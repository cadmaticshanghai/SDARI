/* $Id: HvacSketchGenerator.mac,v1.0.0 2016/01/12 Wallis.liu $ */

/*
**	这个程序用于生成及管理风管管段小票图形
*/

#include "include/dmutil.h"
#include "include/win.h"
#include "include/win_panel.h"
#include "include/PmMgeTags.h"
#include "include/pm.h"
#include "include/pm_errors.h"
#include "include/dm_errors.h"
#include "include/pm_drawings.h"
#include "include/pm_core_tags.h"
#include "include/array.mac"
#include "include/cos.h"
#include "include/dw.h"
#include "include/pm_annot.h"
#include	"include/dm_cos_schema.h"
#include	"include/geoutils.h"
#include "include/PmPipingUtils.h"
#include "opt/pm/EloTools/include/viewutilsELO.h"
#include "include/g2d_ext2df.h"
#include	"include/quants.h"
#include "include/pi_math.mac"
#include "include/pi.h"

#include "$MarineToolkit/Hvac/HvacSketchGenerator.h"
#include "$MarineToolkit/Include/Common_Utility.h"
#include "$MarineToolkit/Include/Math_Utility.h"
#include "$MarineToolkit/Include/Drawing_Utility.h"
#include "$MarineToolkit/Include/Structural_Utility.h"
#include "$MarineToolkit/Include/Grid_Utility.h"

global int Debug = 1;
/*
**脚本语言中似乎无法直接获得一个数组的实际长度，定义一个全局变量用于保存管段信息的数量
**It seem that there isn't method to get the size of a array, define a global var to store the number of pipe spool information
*/

global handle  Block_Name,System_Name,PlanningUnit,Pro_Number,Dra_Number,Start_Page,Outfitting_Area;
global handle  DisplayGrid;
global handle  NULL_HANDLE = 0;
global int     Grid_SelectedItem = 0;
global int     Grid_SortColumn = -1;
global int     Grid_SortDirection = 1;
global handle  Object_List;          	   /*管段handle列表*/
global handle  Sketch_Tag_Array, Column_Description_Array;
global handle  Object_Info;				   /*管段信息列表*/
global int     Object_Number = 0;			/*管段数量*/
global int     Model_Add_Mode = 0;        /*查找模式0 - 替换，1 - 追加*/
global handle  High_Light_List;           /*模型加亮列表*/
global handle  Selected_Objects;
global int     Selected_Objects_Number = 0;
global int     AutoScale = 0;
global int     AutoHighLight = 1;
global handle  MainWindow;
global int     Maximum_Object_Number = 1000;

global handle  Current_Spool_Handle, Cur_Spool_Model_Set;
global handle  Process, Cur_Sketch;
global string  Cur_Spool_Name = "",Cur_Sketch_Name = "";
global handle  Drawing_Form, Select_Form;
global string  Drawing_Form_Name = "";
global handle  Sketch,Sketch_View_Top,Sketch_View_AFT,Sketch_View_SB,Sketch_View_ISO;
global handle  Open_Next,Open_Previous;
global handle  Connection_Points;
global int     Connection_Number = 0;
global int     Connection_Point1 = 0;
global int     Connection_Point2 = 0;
global handle  Overall_Dims;
global int     Overall_Dim_Number = 0;
global handle  Duct_Parts;
global int     Duct_Parts_Amount = 0;
global handle  Radius_Dims;
global int     Radius_Dim_Number = 0;
global handle  Angle_Dims;
global int     Angle_Dim_Number = 0;
global handle  Overall_Dim_Points;
global int     Overall_Dim_Points_Number = 0;
/*
**初始化相关对象
*/
init()
{
	Sketch_Tag_Array = A_ALLOC(Column_Number, "STRING");
	A_PUT(Sketch_Tag_Array,0," ");
	A_PUT(Sketch_Tag_Array,1," ");
	A_PUT(Sketch_Tag_Array,2,SketchStatus);
	A_PUT(Sketch_Tag_Array,3,SketchName);
	A_PUT(Sketch_Tag_Array,4,CreationTime);
	A_PUT(Sketch_Tag_Array,5,"");
	A_PUT(Sketch_Tag_Array,6,"");

	Column_Description_Array = A_ALLOC(Column_Number, "STRING");
	A_PUT(Column_Description_Array,0,"管段名称");
	A_PUT(Column_Description_Array,1,"管段序号");
	A_PUT(Column_Description_Array,2,"工艺状态");
	A_PUT(Column_Description_Array,3,"小票名称");
	A_PUT(Column_Description_Array,4,"生成日期");
	A_PUT(Column_Description_Array,5,"页码");
	A_PUT(Column_Description_Array,6,"总页数");

	Object_Info = alloc_2darray(1,1);

	View_Info = alloc_2darray(1,1);
	View_Positions = alloc_2darray(1,1);

   View_Handles = A_ALLOC(1);
   View_Names = A_ALLOC(1);
   Duct_Parts = A_ALLOC(1);

	View_Positions = alloc_2darray(4,2);
	put_2darray(View_Positions,0,0,View1_X);
	put_2darray(View_Positions,0,1,View1_Y);
	put_2darray(View_Positions,1,0,View2_X);
	put_2darray(View_Positions,1,1,View2_Y);
	put_2darray(View_Positions,2,0,View3_X);
	put_2darray(View_Positions,2,1,View3_Y);
	put_2darray(View_Positions,3,0,View4_X);
	put_2darray(View_Positions,3,1,View4_Y);

	Mto_Table = alloc_2darray(1,1);
	Mto_Label_Table = alloc_2darray(1,1);
	Label_Table = alloc_2darray(1,1);
	Cur_Spool_Model_Set = PM_INIT_SET();
	Connection_Label_Table = alloc_2darray(2,4);
	Connection_Table = alloc_2darray(2,5);
	Dim_Table = alloc_2darray(1,1);
	Overall_Dims = alloc_2darray(1,1);
	Overall_Dim_Points = alloc_2darray(1,1);
	Radius_Dims = alloc_2darray(1,1);
	Angle_Dims = alloc_2darray(1,1);
	Spool_Parts = alloc_2darray(1,1);
	Connection_Points = alloc_2darray(1,1);
}

set_default()
{
	/*初始化模型集合*/
	Object_List = PM_INIT_SET();

	/*初始化加亮模型集合*/
	High_Light_List = PM_INIT_SET();

	/*初始化选中的模型集合*/
	Selected_Objects = PM_INIT_SET();

	drawing_form = "";

	st = GET_STRING_DEFAULT("HvacSketchGenerator", "Drawing_Form", drawing_form);
	if(st == 0){
		W_SET_PANELITEM_ARGS(Drawing_Form, W_PANEL_VALUE, drawing_form);
		Drawing_Form_Name = drawing_form;
	}
}

/*
**Get the selected objects in grid
*/
get_selected_items(handle wobj)
{
	PM_SETOP_SUB(Selected_Objects, Selected_Objects);
	selected_rows = W_GET_WINDOW_ARG( wobj, W_LISTW_MSVALUE );
	total_lines = STRLEN(selected_rows);
	k = 0;
	for (i = 0; i < total_lines; i = i + 1){
		temp_string = SUBSTRING(selected_rows,i);
		flag = HEAD(temp_string,1);
		if (flag == "1"){
			res = W_SET_WINDOW_ARGS( wobj, W_LISTW_ROW, i);
			selected_row = W_GET_WINDOW_ARG( wobj, W_LISTW_ITEMID );
			model_handle = PM_GET_MEMBER_IN_SET(Object_List, selected_row);
			PM_ADD_OBJECT_TO_SET(model_handle,Selected_Objects);
			k = k + 1;
		}
	}
	Selected_Objects_Number = k;
	return (0);
}

model_list_mode(item, event_type, selection)
{
	if (selection == 0){
		Model_Add_Mode = 0;
	}
	else{
		Model_Add_Mode = 1;
	}
	return(0);
}

/*
**获取全局变量Object_List中保存的模型的生产信息，并将生产信息保存到全局变量ProdInfo中；
*/
get_spool_info()
{
	/* 给保存管段信息的全局数组分配存储空间 */
	A_FREE(Object_Info);
	Object_Info = alloc_2darray(Object_Number,Column_Number);
	/* 获取管段的信息并保存到全局数组 */
	for (i = 0; i < Object_Number; i = i + 1;){
		object_handle = PM_GET_MEMBER_IN_SET(Object_List, i);
		/*获取管段名称*/
		spool_name = Get_SpoolName(object_handle);
		put_2darray(Object_Info,i,0,spool_name);

		spool_number = PM_GET_OBJDATA(object_handle, 0, MMT_COSA_SPOOL_NAME);
		put_2darray(Object_Info,i,1,spool_number);
		/*获取管段工艺状态*/
		sketch_status = Get_Attribute_Value(object_handle, SketchStatus);
		if(sketch_status != -1){
		   put_2darray(Object_Info,i,2,sketch_status);
		}
		else{
		   put_2darray(Object_Info,i,2,"未检查");
		}
		/*获取小票名称及生成日期*/
		sketch_name = Get_Attribute_Value(object_handle, SketchName);
		if(!ISINT(sketch_name)){
		   put_2darray(Object_Info,i,3,sketch_name);
		   date_string = Get_Creation_Date(sketch_name);
		   if(!ISINT(date_string)){
		      put_2darray(Object_Info,i,4,date_string);
		   }
		   else{
		      put_2darray(Object_Info,i,4,"0000-00-00");
		   }
		}
		else{
		   put_2darray(Object_Info,i,3,"未生成");
		   put_2darray(Object_Info,i,4,"0000-00-00");
		}
	}
	return 0;
}

/*
**将全局变量object_info中保存的生产信息显示到列表中；
**根据全局变量Grid_SortColumn，Grid_SortDirection保存的信息对显示列表进行排序；
*/
publish_model_info()
{
	/* 将管段信息显示到窗口中 */
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_DELETEROWS, -1);
	for (i = 0; i < Object_Number; i = i + 1;){
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_INSERTROWS, 1);
		for ( j = 0; j < Column_Number; j = j + 1;){
			Value = get_2darray(Object_Info,i,j);
			if (ISSTRING(Value)){
				W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0, W_LISTW_COLUMN, j, W_LISTW_STRING, Value);
			}
		}
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ITEMID, i);
	}

	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 1);

	/* 自动调整列宽度 Adjust the width of column automatically*/
	for (i=0; i < Column_Number; i = i + 1;){
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_COLUMN, i, W_LISTW_COLUMNWIDTH, -1);
	}

	/* 对生产信息列表进行排序 */
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_COLUMN, Grid_SortColumn, W_LISTW_SORT, Grid_SortDirection);
}
/*
**创建顶层窗体
**Create Top frame
*/
create_top_frame()
{
	mainform = W_INIT_FRAME();
	W_REALIZE_WINDOW(mainform,  W_FRAME_TITLE, "矩形风管小票生成工具" );
	return(mainform);
}

/*
**创建显示管段信息的格栅
*/
create_grid(main_form)
{
	wobj = W_ADD_WINDOW(main_form, W_MULTISELECT, "DisplayGrid");

	W_REALIZE_WINDOW(wobj,  W_FRAME_RIGHT_OF,    "Block_Name",
						         W_FRAME_BELOW,       "panel_upperpart",
						         W_LISTW_COLUMNS,     Column_Number,
						         W_FRAME_SCROLLBAR,   W_SCROLLBAR_RIGHTEDGE,
						         W_LISTW_HEADER_MODE, W_LISTW_HEADER_BUTTONS,
						         W_LISTW_MODE_REPORT, 0,
						         W_FRAME_COLS,        60,
						         W_FRAME_ROWS,        10,
						         W_LISTW_CALLBACK,    1);

	W_SET_WINDOW_HANDLER(wobj, "grid_handler");

	/*
	**设置格栅的列标题
	**set the column title of grid
	*/
	Set_Column_Title(wobj, Column_Description_Array, Column_Number);

	return(wobj);
}


quit_handler(item, event_type, button_value)
{
	exit();
	U_MESSAGE("退出矩形风管小票生成工具");
	return(99);
}


grid_handler(window, event_type, row, column, item_id)
{
	if (event_type == W_EVENT_ITEM_SELECTED) {
		/* 处理格栅的排序 */
		if (row < 0 & column >= 0) {
			sort_grid(column,window);
		}
		else if(row >= 0 & column == 0){
			/* 获取选中的模型 */
			get_selected_items(DisplayGrid);
			auto_highlight();
			auto_scale_model();
		}
	}
	/* 处理双击数据行的事件 */
	else if (event_type == W_EVENT_ITEM_DOUBLECLICKED) {
		/* 获取选中的模型 */
		get_selected_items(DisplayGrid);
		auto_highlight();
		auto_scale_model();
	}
	set_page_number();
	return(0);
}

auto_highlight()
{
	/* 处理模型加亮 */
	if (AutoHighLight == 1){
		/* 将已经加亮的模型恢复原来的颜色 */
		model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			Highlight_Object(model,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);
		PM_FREE_SET(temp);

		/* 加亮选中的模型 */
		model_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
		for (i = 0; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
			Highlight_Object(model,TRUE);
			PM_ADD_OBJECT_TO_SET(model,High_Light_List);
		}
	}
}

auto_scale_model()
{
	/* 处理模型自动缩放 */
	if (AutoScale == 1){
		model_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
		if (model_number == 1){
			model_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,0);
			Auto_Scale(model_handle);
		}
	}
}

sort_grid(column,window)
{
	/* A column header was clicked; sort the items */
	if (Grid_SortColumn == column) {
		if (Grid_SortDirection == 0) {
			Grid_SortDirection = 1;
		}
		else {
			Grid_SortDirection = 0;
		}
	}
	else {
		Grid_SortDirection = 1;
	}
	Grid_SortColumn = column;
	W_SET_WINDOW_ARGS(window, W_LISTW_COLUMN, column, W_LISTW_SORT, Grid_SortDirection);
}

model_browsing_handler(item, event_type, button_value)
{
	W_UNMAP_FRAME(MainWindow);
	selected_model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
	if (selected_model_number > 0){
		current_model = PM_GET_MEMBER_IN_SET(High_Light_List, 0);
		parts = PM_GET_OBJECTS_IN_GROUP(current_model);
		part = PM_GET_MEMBER_IN_SET( parts, 0);
		x0 = PM_GET_OBJDATA(part, 0, MMT_TAG_COGX);
		y0 = PM_GET_OBJDATA(part, 0, MMT_TAG_COGY);
		z0 = PM_GET_OBJDATA(part, 0, MMT_TAG_COGZ);
		x = SCAN_QUANT(1,x0);
		y = SCAN_QUANT(1,y0);
		z = SCAN_QUANT(1,z0);
		PM_SET_CURRENT_LOC(x, y, z);
	}
	nth_part = 0;
	PM_PICK_OBJECT("浏览模型",nth_part);
	W_MAP_FRAME(MainWindow);
}


search_objects(item, event_type, button_value)
{
	/* 查询所有的模型组 query all model groups*/
	query = PM_INIT_QUERY("GROUP");
	groups = PM_EXECUTE_QUERY(query);

	/* 获取管段 Get the pipe spool group */
	temp_list = PM_INIT_SET();

	if (!ISINT(groups)){
		group_number = PM_NR_MEMBERS_IN_SET(groups);
		for (i = 0; i < group_number; i = i + 1;){
			group_handle = PM_GET_MEMBER_IN_SET(groups, i);
			group_type = PM_GET_OBJDATA(group_handle, 0, MMT_TAG_GROUPTYPE);
			/* 过滤其它类型的组 Get rid of other type group*/
 			if (group_type == Group_Type){
				/* 过滤不包含零件的组Get rid of group that content nothing */
				parts = PM_GET_OBJECTS_IN_GROUP(group_handle);
				if (!ISINT(parts)){
					part_number = PM_NR_MEMBERS_IN_SET(parts);
					if (part_number > 0){
						/* Get rid of valve*/
						if (part_number == 1){
							part = PM_GET_MEMBER_IN_SET(parts, 0);
							part_type = PM_GET_OBJDATA(part, 0, MMT_TAG_OBJTYPE);
							if(part_type != MMT_OBT_STANDC){
								result = PM_ADD_OBJECT_TO_SET(group_handle,temp_list);
							}
						}
						else{
							/* 将管段的handle保存到全局数组 */
							result = PM_ADD_OBJECT_TO_SET(group_handle,temp_list);
						}
					}
				}
			}
		}
	}

	model_number = PM_NR_MEMBERS_IN_SET(temp_list);
	if (model_number <= 0){
		return 0;
	}

	filter_model(temp_list);

	/* 根据当前模型查找模式将获得的模型添加到全局变量Object_List中 */
	if (Model_Add_Mode == 0){
		PM_SETOP_OR(Object_List,temp_list);
	}

	if (Model_Add_Mode == 1){
	   PM_FREE_SET(Object_List);
	   Object_List = PM_INIT_SET();
		Object_List = PM_COPY_SET(temp_list);
	}

	Object_Number = PM_NR_MEMBERS_IN_SET(Object_List);

	if (Object_Number <= 0){
		PM_FREE_SET(temp_list);
		return 0;
	}

	PM_FREE_SET(temp_list);
	/* 获取并发布生产信息 */
	get_spool_info();
	publish_model_info();
	set_page_number();
}

filter_model( models )
{
	/* 获取过滤条件 Get filter conditions*/
	system_name = W_GET_PANELITEM_ARG(System_Name,W_PANEL_VALUE);
	block_name =  W_GET_PANELITEM_ARG(Block_Name,W_PANEL_VALUE);
	bon_number = W_GET_PANELITEM_ARG(PlanningUnit,W_PANEL_VALUE);
	area_name = W_GET_PANELITEM_ARG(Outfitting_Area,W_PANEL_VALUE);

	temp = PM_INIT_SET();

	/* 过滤掉不符合条件的模型 */
	group_number = PM_NR_MEMBERS_IN_SET(models);
	for (i = 0; i < group_number; i = i + 1;){
		group_handle = PM_GET_MEMBER_IN_SET(models, i);
		parts = PM_GET_OBJECTS_IN_GROUP(group_handle);
		part = PM_GET_MEMBER_IN_SET(parts,0);
		model_system_name = PM_GET_OBJDATA(part,0,MMT_TAG_SYSTEM_NAME);
		model_block_name = PM_GET_OBJDATA(part,0,MMT_TAG_OBJECT_IN_BLOCK);
		if(ISINT(model_block_name)){
		   model_block_name = "*";
		}
		model_bon_number = PM_GET_OBJDATA(part,0,DocName);
		if(ISINT(model_bon_number)){
		   model_bon_number = "*";
		}
		model_area_name = PM_GET_OBJDATA(part,0,MMT_TAG_OBJECT_IN_OUTFIT_AREA);
		if(ISINT(model_area_name)){
		   model_area_name = "*";
		}

		check_system = PATTERN_MATCH(model_system_name,system_name);
		check_block = PATTERN_MATCH(model_block_name,block_name);
		check_bon_number = PATTERN_MATCH(model_bon_number,bon_number);
		check_area_name = PATTERN_MATCH(model_area_name,area_name);
		if(check_system & check_block & check_bon_number & check_area_name){
		   PM_ADD_OBJECT_TO_SET(group_handle,temp);
	   }
	}
	PM_SETOP_SUB(models,models);
	PM_SETOP_OR(models,temp);
	PM_FREE_SET(temp);
	return(0);
}

get_spool_handle(part)
{
	spool_number = PM_GET_OBJDATA(part, 0, MMT_COSA_SPOOL_NAME);
	if (!ISINT(spool_number)){
		spool_handle = PM_GET_OBJECT_GROUP(part, 20);
		return(spool_handle);
	}
	else
	{
		return(-1);
	}
}


pick_objects(item, event_type, button_value)
{
 	tmp = 0;
	flag = TRUE;
	temp = PM_INIT_SET();
	while(flag){
		pick_part = PM_PICK_OBJECT("请选择矩形风管管段", tmp, "AIRDUCT");
		if (!ISINT(pick_part)){
			groups_handle = get_spool_handle(pick_part);
			if (!ISINT(groups_handle)){
				PM_ADD_OBJECT_TO_SET(groups_handle,temp);
				Highlight_Object(groups_handle,TRUE);
			}
		}
		else{
			flag = FALSE;
		}
	}

	if (Model_Add_Mode == 0){
		PM_SETOP_OR(Object_List,temp);
	}

	if (Model_Add_Mode == 1){
		PM_SETOP_SUB(Object_List,Object_List);
		Object_List = PM_COPY_SET(temp);
	}

	Object_Number = PM_NR_MEMBERS_IN_SET(Object_List);
	if (Object_Number <= 0){
		return 0;
	}

	/* 获取并发布生产信息 */
	get_spool_info();
	publish_model_info();

	for (i = 0; i < Object_Number; i = i + 1;){
		group = PM_GET_MEMBER_IN_SET(Object_List, i);
		Highlight_Object(group,FALSE);
	}

	return(0);
}


options_selected(item, event_type, dummy)
{
	s = W_GET_PANELITEM_ARG(item, W_PANEL_VALUE);
	if ( s == "00" ){
		AutoHighLight = 0;
		AutoScale = 0;
		/* 将已经加亮的模型恢复原来的颜色 */
		model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			Highlight_Object(model,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);
		PM_FREE_SET(temp);
	}
	else if( s == "10"){
		AutoHighLight = 1;
		AutoScale = 0;
	}
	else if( s == "11"){
		AutoHighLight = 1;
		AutoScale = 1;
	}
	else if( s == "01"){
		AutoHighLight = 0;
		AutoScale = 1;
		/* 将已经加亮的模型恢复原来的颜色 */
		model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			Highlight_Object(model,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);
		PM_FREE_SET(temp);
	}
	return(0);
}

create_panel_upperpart(mainform)
{
	panel_upperpart = W_ADD_WINDOW(mainform, W_PANEL, "panel_upperpart");
	W_REALIZE_WINDOW(panel_upperpart, W_FRAME_X, 0,
							W_FRAME_Y, 0,
							W_FRAME_ROWS, 2,
							W_FRAME_COLS, 60);


   Block_Name = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Block_Name");
   W_REALIZE_PANELITEM(Block_Name, W_PANEL_ROW, 0, W_PANEL_COL, 0,
   W_PANEL_LABEL, "分段名称:   ",
   W_PANEL_TIP,"Block Name",
   W_PANEL_LENGTH, 15,
   W_PANEL_VALUE, "*",
   W_PANEL_CALLBACK, 1);

   System_Name = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "System_Name");
   W_REALIZE_PANELITEM(System_Name, W_PANEL_ROW, 0, W_PANEL_COL, 25,
   W_PANEL_LABEL, "系统名称:   ",
   W_PANEL_LENGTH, 15,
   W_PANEL_VALUE, "*",
   W_PANEL_CALLBACK, 2);

   search_stru = W_ADD_PANELITEM(panel_upperpart, W_PANEL_BUTTON, "search_stru");
   W_REALIZE_PANELITEM(search_stru, W_PANEL_ROW, 	0, W_PANEL_COL, 50,
   W_PANEL_BUTTONIMAGE, "查找",
   W_PANEL_WIDTH, 10,
   W_PANEL_BUTTONVALUE, 210,
   W_PANEL_CALLBACK, 1,
   W_PANEL_LAYOUT, W_LAYOUT_HORIZONTAL);

   pick_stru = W_ADD_PANELITEM(panel_upperpart, W_PANEL_BUTTON, "pick_stru");
   W_REALIZE_PANELITEM(pick_stru, W_PANEL_ROW, 	1, W_PANEL_COL, 50,
   W_PANEL_BUTTONIMAGE, "点选",
   W_PANEL_WIDTH, 10,
   W_PANEL_BUTTONVALUE, 210,
   W_PANEL_CALLBACK, 1,
   W_PANEL_LAYOUT, W_LAYOUT_HORIZONTAL);

   PlanningUnit = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "PlanningUnit");
   W_REALIZE_PANELITEM(PlanningUnit, W_PANEL_ROW, 1, W_PANEL_COL, 0,
   W_PANEL_LABEL, "DocName ",
   W_PANEL_LENGTH, 15,
   W_PANEL_VALUE, "*",
   W_PANEL_CALLBACK, 3);

   Outfitting_Area = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Outfitting_Area");
   W_REALIZE_PANELITEM(Outfitting_Area, W_PANEL_ROW, 1, W_PANEL_COL, 25,
   W_PANEL_LABEL, "Area:   ",
   W_PANEL_LENGTH, 15,
   W_PANEL_VALUE, "*",
   W_PANEL_CALLBACK, 3);

   seperate_line = W_ADD_PANELITEM(panel_upperpart, W_PANEL_MESSAGE, "seperate_line");
	W_REALIZE_PANELITEM(seperate_line,  W_PANEL_ROW, 2,
	                                    W_PANEL_COL, 0,
		                                 W_PANEL_LABEL,	"小票图形信息",
		                                 W_PANEL_SEPARATOR, 1);

   Pro_Number = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Pro_Number");
   W_REALIZE_PANELITEM(Pro_Number, W_PANEL_ROW, 3, W_PANEL_COL, 0,
   W_PANEL_LABEL,       "工程号:    ",
   W_PANEL_LENGTH,      15,
   W_PANEL_VALUE,       "N1026",
   W_PANEL_CALLBACK,    3);

   Dra_Number = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Dra_Number");
   W_REALIZE_PANELITEM(Dra_Number, W_PANEL_ROW, 3, W_PANEL_COL, 25,
   W_PANEL_LABEL,       "图号:     ",
   W_PANEL_LENGTH,      15,
   W_PANEL_VALUE,       "*",
   W_PANEL_CALLBACK,    3);

   Start_Page = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Start_Page");
   W_REALIZE_PANELITEM(Start_Page, W_PANEL_ROW, 4, W_PANEL_COL, 0,
   W_PANEL_LABEL,       "起始页码:   ",
   W_PANEL_LENGTH,      15,
   W_PANEL_CALLBACK,    4);
   W_CONFIG_NUMERIC_PANELITEM(Start_Page, W_NUMERIC_INT, 1, 1000);
	W_SET_PANELITEM_HANDLER(Start_Page, "page_number_handler");
	W_SET_NUMERIC_VALUE(Start_Page, 2);


   element_add_flag = W_ADD_PANELITEM(panel_upperpart, W_PANEL_CHOICE, "element_add_flag");
   W_REALIZE_PANELITEM(element_add_flag, W_PANEL_ROW, 5, W_PANEL_COL, 0,
   W_PANEL_LABEL, "管段查找模式:      ",
   W_PANEL_CHOICESTRING, "追加  ",
   W_PANEL_CHOICESTRING, "替换  ",
   W_PANEL_ORDINALVALUE, 0,
   W_PANEL_CHOICESTYLE,	W_STYLE_PUSHBUTTONS,
   W_PANEL_CALLBACK, 1);

   Options = W_ADD_PANELITEM(panel_upperpart, W_PANEL_TOGGLE, "options");
   W_REALIZE_PANELITEM(Options, W_PANEL_ROW, 5, W_PANEL_COL, 40,
   W_PANEL_LABEL, "",
   W_PANEL_CHOICESTRING, "自动加亮    ",
   W_PANEL_CHOICESTRING, "自动缩放    ",
   W_PANEL_VALUE, "10",
   W_PANEL_CHOICESTYLE,	W_STYLE_PUSHBUTTONS,
   W_PANEL_CALLBACK, 1);


	W_SET_PANELITEM_HANDLER(search_stru, "search_objects");
	W_SET_PANELITEM_HANDLER(pick_stru, "pick_objects");
	W_SET_PANELITEM_HANDLER(element_add_flag, "model_list_mode");
	W_SET_PANELITEM_HANDLER(Options, "options_selected");

	return(panel_upperpart);
}

create_command(mainform)
{
	command = W_ADD_WINDOW(mainform, W_PANEL, "command");
	W_REALIZE_WINDOW(command,  W_FRAME_X, 0,
							         W_FRAME_Y, 600,
							         W_FRAME_WIDTH,300,
							         W_FRAME_HEIGHT, 1);

	Drawing_Form = W_ADD_PANELITEM(command, W_PANEL_FILL, "Drawing_Form");

	W_REALIZE_PANELITEM(Drawing_Form,   W_PANEL_ROW, 0,
                                       W_PANEL_COL, 0,
     				                        W_PANEL_LABEL, "图框名称:   ",
     				                        W_PANEL_TIP,"ICGD Name",
     				                        W_PANEL_LENGTH, 40,
     				                        W_PANEL_VALUE, "",
     				                        W_PANEL_CALLBACK, 0);

	Select_Form = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Select_Form");

	W_REALIZE_PANELITEM(Select_Form,    W_PANEL_ROW,         0,
                                       W_PANEL_COL,         50,
   						                  W_PANEL_BUTTONIMAGE, "选择图框",
   						                  W_PANEL_TIP,"Select ICGD",
   						                  W_PANEL_WIDTH,       10,
   						                  W_PANEL_BUTTONVALUE, 209,
   						                  W_PANEL_CALLBACK,    1,
   						                  W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);


	Create_Sketch = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Create_Sketch");

	W_REALIZE_PANELITEM(Create_Sketch,  W_PANEL_ROW,         1,
	                                    W_PANEL_COL,         0,
							                  W_PANEL_BUTTONIMAGE, "生成小票",
							                  W_PANEL_TIP,"Create Hvac Sketch",
							                  W_PANEL_WIDTH,       10,
							                  W_PANEL_BUTTONVALUE, 200,
							                  W_PANEL_CALLBACK,    1,
							                  W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);

   Cur_Sketch = W_ADD_PANELITEM(command, W_PANEL_FILL, "Cur_Sketch");

	W_REALIZE_PANELITEM(Cur_Sketch, W_PANEL_ROW, 1,
                                   W_PANEL_COL, 12,
     				                    W_PANEL_LABEL, "",
     				                    W_PANEL_LENGTH, 34,
     				                    W_PANEL_VALUE, "正在处理管段:   ",
     				                    W_PANEL_SENSITIVITY, 0,
     				                    W_PANEL_CALLBACK, 0);

   Pro_label = W_ADD_PANELITEM(command, W_PANEL_FILL, "Pro_label");

	W_REALIZE_PANELITEM(Pro_label,  W_PANEL_ROW, 1,
                                   W_PANEL_COL, 48,
  				                       W_PANEL_LABEL, "进度:",
  				                       W_PANEL_LENGTH, 0,
  				                       W_PANEL_VALUE, "",
  				                       W_PANEL_CALLBACK, 0);

   Process = W_ADD_PANELITEM(command, W_PANEL_FILL, "Process");

	W_REALIZE_PANELITEM(Process,  W_PANEL_ROW, 1,
                                       W_PANEL_COL, 53,
     				                        W_PANEL_LABEL, "",
     				                        W_PANEL_LENGTH, 7,
     				                        W_PANEL_VALUE, "0/0",
     				                        W_PANEL_SENSITIVITY,0,
     				                        W_PANEL_CALLBACK, 0);

	Open_Sketch = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Open_Sketch");

	W_REALIZE_PANELITEM(Open_Sketch,  W_PANEL_ROW,         2,
	                                  W_PANEL_COL,         0,
							                W_PANEL_BUTTONIMAGE, "打开小票",
							                W_PANEL_WIDTH,       10,
							                W_PANEL_BUTTONVALUE, 201,
							                W_PANEL_CALLBACK,    1,
							                W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);

	Open_Previous = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Open_Previous");

	W_REALIZE_PANELITEM(Open_Previous,  W_PANEL_ROW,         2,
	                                    W_PANEL_COL,         12,
							                  W_PANEL_BUTTONIMAGE, "打开前一个",
							                  W_PANEL_WIDTH,       10,
							                  W_PANEL_BUTTONVALUE, 202,
							                  W_PANEL_CALLBACK,    1,
							                  W_PANEL_TIP, "Open Previous Hvac Sketch",
							                  W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);

	Open_Next = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Open_Next");

	W_REALIZE_PANELITEM(Open_Next,  W_PANEL_ROW,         2,
	                                W_PANEL_COL,         24,
							              W_PANEL_BUTTONIMAGE, "打开下一个",
							              W_PANEL_WIDTH,       10,
							              W_PANEL_BUTTONVALUE, 203,
							              W_PANEL_CALLBACK,    1,
							              W_PANEL_TIP, "Open Next Hvac Sketch",
							              W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);

	Browse_Model = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Browse_Model");

	W_REALIZE_PANELITEM(Browse_Model,  W_PANEL_ROW,         2,
	                                   W_PANEL_COL,         36,
							                 W_PANEL_BUTTONIMAGE, "浏览模型",
							                 W_PANEL_WIDTH,       10,
							                 W_PANEL_BUTTONVALUE, 204,
							                 W_PANEL_CALLBACK,    1,
							                 W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);

	Delete_Sketch = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Delete_Sketch");

	W_REALIZE_PANELITEM(Delete_Sketch,  W_PANEL_ROW,         3,
	                                    W_PANEL_COL,         0,
   							               W_PANEL_BUTTONIMAGE, "删除小票",
   							               W_PANEL_WIDTH,       10,
   							               W_PANEL_BUTTONVALUE, 301,
   							               W_PANEL_CALLBACK,    1,
   							               W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);

	Print_Sketch = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Print_Sketch");

	W_REALIZE_PANELITEM(Print_Sketch,   W_PANEL_ROW,         3,
	                                    W_PANEL_COL,         12,
   							               W_PANEL_BUTTONIMAGE, "打印小票",
   							               W_PANEL_WIDTH,       10,
   							               W_PANEL_BUTTONVALUE, 302,
   							               W_PANEL_CALLBACK,    1,
   							               W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);

	Export_Dxf = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Export_Dxf");

	W_REALIZE_PANELITEM(Export_Dxf,   W_PANEL_ROW,         3,
                                     W_PANEL_COL,         24,
   							             W_PANEL_BUTTONIMAGE, "导出DXF",
   							             W_PANEL_WIDTH,       10,
   							             W_PANEL_BUTTONVALUE, 303,
   							             W_PANEL_CALLBACK,    1,
   							             W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);

	Export_Pdf = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Export_Pdf");

	W_REALIZE_PANELITEM(Export_Pdf,   W_PANEL_ROW,         3,
                                     W_PANEL_COL,         36,
   							             W_PANEL_BUTTONIMAGE, "导出PDF",
   							             W_PANEL_WIDTH,       10,
   							             W_PANEL_BUTTONVALUE, 304,
   							             W_PANEL_CALLBACK,    1,
   							             W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);

	quit = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "quit");

	W_REALIZE_PANELITEM(quit,  W_PANEL_ROW, 	      3,
	                           W_PANEL_COL,         50,
							         W_PANEL_BUTTONIMAGE, "退出",
							         W_PANEL_WIDTH,       10,
							         W_PANEL_BUTTONVALUE, 305,
							         W_PANEL_CALLBACK,    1,
							         W_PANEL_CLOSEBUTTON, 1,
							         W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);

	W_SET_PANELITEM_HANDLER(Select_Form, "select_form_handler");
	W_SET_PANELITEM_HANDLER(quit, "quit_handler");
	W_SET_PANELITEM_HANDLER(Create_Sketch, "create_sketch_handler");
	W_SET_PANELITEM_HANDLER(Export_Pdf, "export_pdf_handler");
	W_SET_PANELITEM_HANDLER(Export_Dxf, "export_dxf_handler");
	W_SET_PANELITEM_HANDLER(Print_Sketch, "print_sketch_handler");
	W_SET_PANELITEM_HANDLER(Delete_Sketch, "delete_sketch_handler");
	W_SET_PANELITEM_HANDLER(Open_Sketch, "open_sketch_handler");
	W_SET_PANELITEM_HANDLER(Open_Next, "open_sketch_handler");
	W_SET_PANELITEM_HANDLER(Open_Previous, "open_sketch_handler");
	W_SET_PANELITEM_HANDLER(Browse_Model, "model_browsing_handler");

	return(command);
}

delete_sketch_handler(item, event_type, button_value)
{
	/* 检查是否已经选择模型 */
	spools_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
	if (spools_number <= 0){
		U_CONFIRM("请先选择管段");
		return(0);
	}

	sel = A_ALLOC(2);
	A_PUT(sel,0,"保留最新版本");
	A_PUT(sel,1,"删除所有版本");
	si = 1;
	res = DM_CALL_SCRIPT("macro/Select.mac","U_Select",
		"请选择删除模式",2,sel,si);
	A_FREE(sel);

	if(res == -1){
		return(0);
	}
	else if(res == 0){
		/*循环处理选中的管段*/
		for(i=0;i<spools_number;i=i+1;){
			/*检查是否已经生成小票*/
			spool_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
			sketch_name = Get_Attribute_Value(spool_handle,SketchName);
			if(ISSTRING(sketch_name) & sketch_name != "Unset"){
				current_version = String_To_Int(SUBSTRING(SEARCH(sketch_name,"-SK"),3));
				for(k=0;k<current_version;k=k+1;){
					drawing_name = STRINGTERM(sketch_name,"-SK") + "-SK" + ITOASCII(k);
					doc_guid = "";
					res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);
					if(doc_guid != ""){
						res = PM_DELETE_DRAWING(drawing_name);
						if(res == 0){
							mess = "小票<" + drawing_name + ">已经被删除";
							U_MESSAGE(mess);
						}
						else{
							prompt_error(drawing_name,res);
						}
					}
				}
			}
		}
	}
	else if(res == 1){
		/*循环处理选中的管段*/
		for(i=0;i<spools_number;i=i+1;){
			/*检查是否已经生成小票*/
			spool_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
			sketch_name = Get_Attribute_Value(spool_handle,SketchName);
			if(ISSTRING(sketch_name) & sketch_name != "Unset"){
				current_version = String_To_Int(SUBSTRING(SEARCH(sketch_name,"-SK"),3));
				for(k=0;k<=current_version;k=k+1;){
					drawing_name = STRINGTERM(sketch_name,"-SK") + "-SK" + ITOASCII(k);
					doc_guid = "";
					res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);
					if(doc_guid != ""){
						res = PM_DELETE_DRAWING(drawing_name);
						if(res == 0){
							mess = "小票<" + drawing_name + ">已经被删除";
							U_MESSAGE(mess);
						}
						else{
							prompt_error(drawing_name,res);
						}
					}
				}
			}
			res = Set_Attribute_Value(spool_handle,SketchName,"Unset");
			/*将生成的小票名称显示在格栅中*/
			id = find_spool_grid_id(spool_handle);
			if(id != -1){
				W_SET_WINDOW_ARGS(DisplayGrid,W_LISTW_FINDID,id);
				row = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ROW);
				W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, row, W_LISTW_COLUMN, 2, W_LISTW_STRING, "Unset");
			}
		}
	}
	PM_SAVE(0,1,1);
	return(0);
}

prompt_error(drawing_name,res)
{
   if(res == -1){
      mess = "小票<" + drawing_name + ">无法删除";
      U_MESSAGE(mess);
   }
   else if(res == MMT_E_DRW_NOTFOUND){
      mess = "小票<" + drawing_name + ">不存在";
      U_MESSAGE(mess);
   }
   else if(res == DM_E_DOC_NOT_OWNER){
      mess = "你没有删除小票<" + drawing_name + ">的权限";
      U_MESSAGE(mess);
   }
   else{
      mess = "小票<" + drawing_name + ">无法删除";
      U_MESSAGE(mess);
   }
   return(0);

}

open_sketch_handler(item, event_type, button_value)
{
	/* 检查是否已经选择模型 */
	spools_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
	if (spools_number <= 0){
		U_CONFIRM("请先选择管段");
		return(0);
	}
	else if(spools_number > 1){
		U_CONFIRM("一次只能打开一个图形");
		return(0);
	}

	if(item == Open_Next){
	   row_number = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_NUMOFCHOICES);
	   current_row = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_ROW);
	   new_row = current_row + 1;
	   if(new_row >= row_number){
	      U_CONFIRM("当前管段已经是最后一个管段");
	      return(0);
	   }
	   ms_value = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_MSVALUE);
	   ms_value = "0" + HEAD(ms_value,STRLEN(ms_value)-1);
	   res = W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_MSVALUE, ms_value);
	   item_id = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ITEMID);
	   grid_handler(DisplayGrid, W_EVENT_ITEM_SELECTED, new_row, 0, item_id);
	}
	else if(item == Open_Previous){
	   row_number = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_NUMOFCHOICES);
	   current_row = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_ROW);
	   new_row = current_row - 1;
	   if(new_row < 0){
	      U_CONFIRM("当前管段已经是第一个管段");
	      return(0);
	   }
	   ms_value = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_MSVALUE);
	   ms_value =  TAIL(ms_value,STRLEN(ms_value)-1) + "0";
	   res = W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_MSVALUE, ms_value);
	   item_id = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ITEMID);
	   grid_handler(DisplayGrid, W_EVENT_ITEM_SELECTED, new_row, 0, item_id);
	}

	/*检查是否已经生成小票*/
	spool_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,0);
	drawing_name = Get_Attribute_Value(spool_handle,SketchName);
	if(ISINT(drawing_name)){
	   U_CONFIRM("尚未生成小票");
	   return(0);
	}

	/*检查小票图形是否存在（有可能被手工删除或者其它原因）*/
	doc_guid = "";
	res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);
	if(doc_guid == ""){
	   U_CONFIRM("小票图形不存在");
	   return(0);
	}

	/*检查当前是否有打开的图形*/
	current_drawing = PM_GET_ACTIVE_DRW_NAME();
	if(current_drawing != ""){
	   PM_SAVE_ACTIVE_DRW();
	   PM_CHECK_IN_ACTIVE_DRW();
	   PM_CLOSE_ACTIVE_DRW();
	}

   PM_OPEN_DRAWING(drawing_name,PM_DRW_OFLG_EDIT,"","");

	W_UNMAP_FRAME(MainWindow);
	st = PM_EDIT_ACTIVE_DRW(0);
	W_MAP_FRAME(MainWindow);

	dwg_name = PM_GET_ACTIVE_DRW_NAME();
	if(dwg_name != ""){
		st = PM_SAVE_ACTIVE_DRW();
		if(st){
			U_CONFIRM("无法保存当前图形 <" + dwg_name + ">!");
		}
		else {
			st = PM_CHECK_IN_ACTIVE_DRW();
			if(st){
				U_CONFIRM("无法Check In当前图形 <" + dwg_name + ">!");
			}
		}
		PM_CLOSE_ACTIVE_DRW();
	}

	return(0);
}

print_sketch_handler(item, event_type, button_value)
{
	/* 检查是否已经选择模型 */
	spools_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
	if (spools_number <= 0){
		U_CONFIRM("请先选择管段");
		return(0);
	}

	/*检查管段小票是否已经生成*/
	for(i=0;i<spools_number;i=i+1;){

   	/*检查是否已经生成小票*/
   	spool_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
   	spool_name = Get_SpoolName(spool_handle);
   	drawing_name = Get_Attribute_Value(spool_handle,SketchName);
   	if(ISINT(drawing_name)){
   	   mess = "管段<" + spool_name + ">尚未生成小票";
   	   U_MESSAGE(mess);
   	}

   	/*检查小票图形是否存在（有可能被手工删除或者其它原因）*/
   	doc_guid = "";
   	res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);
   	if(doc_guid == ""){
   	   mess = "小票<"+drawing_name+">不存在";
   	   U_MESSAGE(mess);
   	   return(0);
   	}
   }

   /*循环打印小票*/
	for(i=0;i<spools_number;i=i+1;){

   	spool_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
   	spool_name = Get_SpoolName(spool_handle);
   	drawing_name = Get_Attribute_Value(spool_handle,SketchName);

      /*检查当前是否有打开的图形*/
   	current_drawing = PM_GET_ACTIVE_DRW_NAME();
   	if(current_drawing != ""){
   	   PM_SAVE_ACTIVE_DRW();
   	   PM_CHECK_IN_ACTIVE_DRW();
   	   PM_CLOSE_ACTIVE_DRW();
	   }

	   PM_OPEN_DRAWING(drawing_name,PM_DRW_OFLG_EDIT,"","");
	   mess = "开始打印图形<" + drawing_name + ">";
	   U_MESSAGE(mess);
	   res = PM_PLOT_ACTIVE_DRW(0);
	   if(res == -1){
	      DM_EDIT_SHEET_PLOT_SETTINGS();
         res = PM_PLOT_ACTIVE_DRW(0);
         if(res == -1){
            mess = "图形<" + drawing_name + ">打印失败";
            U_MESSAGE(mess);
         }
	   }
	   else if(res == MMT_E_DRW_NOTACTIVE){
   	   mess = "图形<" + drawing_name + ">无法激活，打印失败";
   	   U_MESSAGE(mess);
	   }
	   else{
   	   mess = "图形<" + drawing_name + ">打印结束";
   	   U_MESSAGE(mess);
	   }
	}
   return(0);
}

export_pdf_handler(item, event_type, button_value)
{
	/* 检查是否已经选择模型 */
	spools_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
	if (spools_number <= 0){
		U_CONFIRM("请先选择管段");
		return(0);
	}

	path = U_GET_DIRECTORY("选择输PDF文件出路径", "c:\\", "", 0);
	if(ISINT(path)){
	   return(0);
	}

	/*循环输出管段小票图*/
	for(i=0;i<spools_number;i=i+1;){

   	/*检查是否已经生成小票*/
   	spool_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
   	spool_name = Get_SpoolName(spool_handle);
   	drawing_name = Get_Attribute_Value(spool_handle,SketchName);
   	if(ISINT(drawing_name)){
   	   mess = "管段<" + spool_name + ">尚未生成小票";
   	   U_MESSAGE(mess);
   	}
   	else{
      	/*检查小票图形是否存在（有可能被手工删除或者其它原因）*/
      	doc_guid = "";
      	res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);
      	if(doc_guid == ""){
      	   mess = "小票<"+drawing_name+">不存在";
      	   U_MESSAGE(mess);
      	}
      	else{
            /*检查当前是否有打开的图形*/
         	current_drawing = PM_GET_ACTIVE_DRW_NAME();
         	if(current_drawing != ""){
         	   PM_SAVE_ACTIVE_DRW();
         	   PM_CHECK_IN_ACTIVE_DRW();
         	   PM_CLOSE_ACTIVE_DRW();
      	   }

      	   res = PM_OPEN_DRAWING(drawing_name,PM_DRW_OFLG_EDIT,"","");
      	   if(res == -1){
      	      mess = "无法打开图形<" + drawing_name + ">，输出失败";
      	      U_MESSAGE(mess);
      	   }
      	   else{
         	   mess = "开始输出图形<" + drawing_name + ">的PDF文件";
         	   U_MESSAGE(mess);
         	   format = G2D_EXT_FRM_PDF;
         	   output_dir = path;
         	   template_dwr = "";
         	   res = Export_Active_Drw(format, template_dwr, output_dir);
         	   if(res == -1){
         	      mess = "图形<" + drawing_name + ">输出失败";
         	      U_MESSAGE(mess);
         	   }
         	   else if(res == MMT_E_DRW_NOTACTIVE){
            	   mess = "图形<" + drawing_name + ">无法激活，输出失败";
            	   U_MESSAGE(mess);
         	   }
         	   else{
            	   mess = "图形<" + drawing_name + ">输出结束";
            	   U_MESSAGE(mess);
         	   }
         	}
      	}
   	}
	}
   return(0);
}

export_dxf_handler(item, event_type, button_value)
{
	/* 检查是否已经选择模型 */
	spools_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
	if (spools_number <= 0){
		U_CONFIRM("请先选择管段");
		return(0);
	}

	path = U_GET_DIRECTORY("选择输DXF文件出路径", "c:\\", "", 0);
	if(ISINT(path)){
	   return(0);
	}

	/*循环输出管段小票图*/
	for(i=0;i<spools_number;i=i+1;){

   	/*检查是否已经生成小票*/
   	spool_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
   	spool_name = Get_SpoolName(spool_handle);
   	drawing_name = Get_Attribute_Value(spool_handle,SketchName);
   	if(ISINT(drawing_name)){
   	   mess = "管段<" + spool_name + ">尚未生成小票";
   	   U_MESSAGE(mess);
   	}
   	else{
      	/*检查小票图形是否存在（有可能被手工删除或者其它原因）*/
      	doc_guid = "";
      	res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);
      	if(doc_guid == ""){
      	   mess = "小票<"+drawing_name+">不存在";
      	   U_MESSAGE(mess);
      	}
      	else{
            /*检查当前是否有打开的图形*/
         	current_drawing = PM_GET_ACTIVE_DRW_NAME();
         	if(current_drawing != ""){
         	   PM_SAVE_ACTIVE_DRW();
         	   PM_CHECK_IN_ACTIVE_DRW();
         	   PM_CLOSE_ACTIVE_DRW();
      	   }

      	   res = PM_OPEN_DRAWING(drawing_name,PM_DRW_OFLG_EDIT,"","");
      	   if(res == -1){
      	      mess = "无法打开图形<" + drawing_name + ">，输出失败";
      	      U_MESSAGE(mess);
      	   }
      	   else{
         	   mess = "开始输出图形<" + drawing_name + ">的DXF文件";
         	   U_MESSAGE(mess);
         	   format = G2D_EXT_FRM_DXF_2000;
         	   output_dir = path;
         	   template_dwr = "";
         	   res = Export_Active_Drw(format, template_dwr, output_dir);
         	   if(res == -1){
         	      mess = "图形<" + drawing_name + ">输出失败";
         	      U_MESSAGE(mess);
         	   }
         	   else if(res == MMT_E_DRW_NOTACTIVE){
            	   mess = "图形<" + drawing_name + ">无法激活，输出失败";
            	   U_MESSAGE(mess);
         	   }
         	   else{
            	   mess = "图形<" + drawing_name + ">输出结束";
            	   U_MESSAGE(mess);
         	   }
         	}
      	}
   	}
	}
   return(0);
}

select_form_handler(item, event_type, button_value)
{
   drawing_form = DM_SELECT_ICGD("",2);
   if(ISSTRING(drawing_form) & drawing_form != ""){
      W_SET_PANELITEM_ARGS(Drawing_Form, W_PANEL_VALUE, drawing_form);
      SET_STRING_DEFAULT("HvacSketchGenerator", "Drawing_Form", drawing_form);
      Drawing_Form_Name = drawing_form;
   }
   return(0);
}

create_sketch_handler(item, event_type, button_value)
{
	/* 检查是否已经选择模型 */
	spools_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);

	if (spools_number <= 0){
		U_CONFIRM("请先选择管段");
		return(0);
	}

	/* 检查图框等设置是否正确 */


	/* 循环生成选中的管段的小票 */
	x0 = 0;y0 = 0;z0 = 0;
	PM_GET_CURRENT_LOC(x0,y0,z0);
	start_time = GET_TIME();
	for(i=0;i<spools_number;i=i+1;){
		Current_Spool_Handle = PM_GET_MEMBER_IN_SET(Selected_Objects, i);
		Cur_Spool_Model_Set = PM_GET_OBJECTS_IN_GROUP(Current_Spool_Handle);
		process_info = ITOASCII(i+1) + "/" + ITOASCII(spools_number);
		W_SET_PANELITEM_ARGS(Process, W_PANEL_VALUE, process_info);
		sketch_info = "正在处理管段：";
		spool_name = Get_SpoolName(Current_Spool_Handle);
		sketch_info = sketch_info + spool_name;
		W_SET_PANELITEM_ARGS(Cur_Sketch, W_PANEL_VALUE, sketch_info);
		Cur_Spool_Name = spool_name;
		res = generate_sketch();
		Overall_Dim_Number = 0;
		Duct_Parts_Amount = 0;
		Radius_Dim_Number = 0;
		Angle_Dim_Number = 0;
		if(res == -1){
			mess = "无法生成管段:" + Cur_Spool_Name + "的小票";
			U_MESSAGE(mess);
		}
	}
	end_time = GET_TIME();
	consumption = end_time - start_time;
	sketch_info = "处理完毕，共耗时" + ITOASCII(consumption) + "秒";
	W_SET_PANELITEM_ARGS(Cur_Sketch, W_PANEL_VALUE, sketch_info);
	PM_SET_CURRENT_LOC(x0,y0,z0);
	return(0);
}

generate_sketch()
{
	Cur_Sketch_Name = get_drawing_name();
	/*创建小票图形*/
	res = create_drawing();
	if(res == -1){
		return(-1);
	}

	res = PM_OPEN_DRAWING(Cur_Sketch_Name,PM_DRW_OFLG_EDIT,"","");
	if(res != 0){
		mess = "无法打开小票图:" + Cur_Sketch_Name;
		U_MESSAGE(mess);
		return(-1);
	}

	/*创建管段视图*/
	res = create_view();
	if(res != 0){
		mess = "无法在小票图:" + Cur_Sketch_Name + "中创建管段视图";
		U_MESSAGE(mess);
		return(-1);
	}

	/*将管段视图分配到小票图中*/
	res = assign_views_to_drawing();
	if(res != 0){
		mess = "无法将管段视图分配给小票图:" + Cur_Sketch_Name;
		U_MESSAGE(mess);
		return(-1);
	}
	/*处理风管零件*/
	sort_parts();
	numbering_part();
	print_part_info();

	/* 获取管段材料表信息*/
	res = get_mto_table();
	if(res != 0){
		mess = "获取管段:" + Cur_Spool_Name + "的材料信息时出错";
		U_MESSAGE(mess);
		return(-1);
	}
	print_mto_info();

	/* Initiate 2D drawing environment */
	style_name = "";
	drafting_style = GetFirstDraftingStyle(style_name);
	dw = PM_START_PAGE_ANNOTATION(style_name);
	DW_ACTIVATEVIEW(dw);
	InitDrawingSettings();
	
	/* 绘制材料表*/
	res = draw_mto_table();

	/*获取校管表，连接表，连接编号标注等信息*/
	get_connection_table();
	draw_connection_table();

	/*合并标注信息*/
	get_label_table();

	/*标注相关信息*/
	draw_label();

	/*get dimensions information*/
	adjust_connection_point_data();
	get_dimension_table();
	get_overall_dimension_points();
	get_overall_dimensions();
	get_radius_dimensions();
	get_angle_dimensions();

	/*add dimensions to drawing*/
	style_name = "";
	drafting_style = GetFirstDraftingStyle(style_name);
	dw = PM_START_PAGE_ANNOTATION(style_name);
	DW_ACTIVATEVIEW(dw);
	InitDrawingSettings();
	draw_dimension();
	draw_overall_dimension();
	draw_radius_dimension();
	draw_angle_dimension();
	
	/*结束标注*/
	PM_TERMINATE_PAGE_ANNOTATION(1);	

	/*setting title block*/
	set_header_field();

	/*save drawing*/
	res = PM_SAVE_ACTIVE_DRW();
	if(res != 0){
		mess = "无法保存小票图:" + Cur_Sketch_Name;
		U_MESSAGE(mess);
		return(-1);
	}

	/*CheckIn drawing*/
	res = PM_CHECK_IN_ACTIVE_DRW();
	if(res != 0){
		mess = "无法CheckIn小票图:" + Cur_Sketch_Name;
		U_MESSAGE(mess);
		return(-1);
	}

	/*close drawing*/
	res = PM_CLOSE_ACTIVE_DRW();
	if(res != 0){
		mess = "无法关闭小票图:" + Cur_Sketch_Name;
		U_MESSAGE(mess);
		return(-1);
	}
	return(0);
}

print_mto_info()
{
	if(Debug){
		U_MESSAGE("材料表信息：");
		for(i=0;i<Mto_Number;i=i+1;){
			s0 = get_2darray(Mto_Table,i,0);
			s1 = get_2darray(Mto_Table,i,1);
			s2 = get_2darray(Mto_Table,i,2);
			s3 = get_2darray(Mto_Table,i,3);
			s4 = FTOASCII(get_2darray(Mto_Table,i,4));
			s5 = FTOASCII(get_2darray(Mto_Table,i,5));
			info = s0 + "-|-" + s1 + "-|-" + s2 + "-|-" + s3 + "-|-" + s4 + "-|-" + s5;
			U_MESSAGE(info);
		}
	}
	return(0);
}

get_dimension_table()
{
	if(Debug){
		U_MESSAGE("*************开始计算尺寸标注点*****************");
	}

	find_duct_component();
	/*定义用于临时保存尺寸标注信息的数组*/
	dim_table = alloc_2darray(100,10);
	dim_number = 0;
	for(i=0;i<Connection_Number;i=i+1;){
		get_connection_point_dim(dim_number,dim_table,i);
	}

	/*在命令行显示尺寸标注信息*/
	if(Debug){
		for(i=0;i<dim_number;i=i+1;){
			node0_x = STRINGTERM(FTOASCII(get_2darray(dim_table,i,0)),".");
			node0_y = STRINGTERM(FTOASCII(get_2darray(dim_table,i,1)),".");
			node0_z = STRINGTERM(FTOASCII(get_2darray(dim_table,i,2)),".");
			node1_x = STRINGTERM(FTOASCII(get_2darray(dim_table,i,3)),".");
			node1_y = STRINGTERM(FTOASCII(get_2darray(dim_table,i,4)),".");
			node1_z = STRINGTERM(FTOASCII(get_2darray(dim_table,i,5)),".");
			mess = ITOASCII(i) + ":  x1=" + node0_x + ",y1=" + node0_y + ",z1=" + node0_z + ";x2=" + node1_x + ",y2=" + node1_y + ",z2=" + node1_z;
			U_MESSAGE(mess);
		}
	}
	/*将尺寸标注信息存入全局变量*/
	Dim_Number = dim_number;
	free_2darray(Dim_Table);
	Dim_Table = alloc_2darray(Dim_Number,10);
	for(i=0;i<Dim_Number;i=i+1;){
		for(j=0;j<10;j=j+1;){
			valve = get_2darray(dim_table,i,j);
			put_2darray(Dim_Table,i,j,valve);
		}
	}
	free_2darray(dim_table);

	if(Debug){
	  U_MESSAGE("****************尺寸标注点计算结束**********************");
	}
	return(0);
}

get_overall_dimensions()
{
	offset = get_overall_dimension_offset();
	dim_table = alloc_2darray(100,11);
	dim_amount = 0;
	/*if only have straight part*/
	if(Duct_Parts_Amount == 0){
		x1 = get_2darray(Connection_Points,0,1);
		y1 = get_2darray(Connection_Points,0,2);
		z1 = get_2darray(Connection_Points,0,3);
		x2 = get_2darray(Connection_Points,1,1);
		y2 = get_2darray(Connection_Points,1,2);
		z2 = get_2darray(Connection_Points,1,3);
		dx = get_2darray(Connection_Points,1,8);
		dy = get_2darray(Connection_Points,1,9);
		dz = get_2darray(Connection_Points,1,10);
		level = 1;
		add_overall_dimensions_(dim_table,dim_amount,x1,y1,z1,x2,y2,z2,dx,dy,dz,offset,level);
	}
	/*if have any other part than straight part*/
	else{
		for(i=0;i<Duct_Parts_Amount;i=i+1;){
			part = A_GET(Duct_Parts,i);
			part_type = PM_GET_OBJDATA(part,0,Duct_Shape);
			if(part_type == Rectangular_Bend){
				/*get connection point data*/
				connection_table = alloc_2darray(3,13);
				connection_number = 0;
				node_id = 1;
				connected_obj = "NULL";
				get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);
				node_id = 2;
				get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);
				node_id = 3;
				get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);
				/*connection point 1*/
				x = get_2darray(connection_table,0,1);
				y = get_2darray(connection_table,0,2);
				z = get_2darray(connection_table,0,3);
				dx = get_2darray(connection_table,0,4);
				dy = get_2darray(connection_table,0,5);
				dz = get_2darray(connection_table,0,6);
				length = String_To_Float(PM_GET_OBJDATA(part,0,".mp"));
				x = x - length*dx;
				y = y - length*dy;
				z = z - length*dz;
				level = 1;
				add_overall_dimensions(dim_table,dim_amount,x,y,z,offset,level);
				/*connection point 2*/
				x = get_2darray(connection_table,1,1);
				y = get_2darray(connection_table,1,2);
				z = get_2darray(connection_table,1,3);
				level = 2;
				add_overall_dimensions(dim_table,dim_amount,x,y,z,offset,level);
				/*connection point 3*/
				x = get_2darray(connection_table,2,1);
				y = get_2darray(connection_table,2,2);
				z = get_2darray(connection_table,2,3);
				dx = get_2darray(connection_table,2,4);
				dy = get_2darray(connection_table,2,5);
				dz = get_2darray(connection_table,2,6);
				length = String_To_Float(PM_GET_OBJDATA(part,0,".mq"));
				x = x - length*dx;
				y = y - length*dy;
				z = z - length*dz;
				level = 1;
				add_overall_dimensions(dim_table,dim_amount,x,y,z,offset,level);
				free_2darray(connection_table);
			}
		}
	}

	/*将尺寸标注信息存入全局变量*/
	Overall_Dim_Number = dim_amount;
	free_2darray(Overall_Dims);
	Overall_Dims = alloc_2darray(Overall_Dim_Number,11);
	for(i=0;i<Overall_Dim_Number;i=i+1;){
		for(j=0;j<10;j=j+1;){
			value = get_2darray(dim_table,i,j);
			put_2darray(Overall_Dims,i,j,value);
		}
	}
	free_2darray(dim_table);

	return(0);
}

get_radius_dimensions()
{
   dim_table = alloc_2darray(5,7);
   dim_amount = 0;
   if(Duct_Parts_Amount == 0){
      return(0);
   }
   else{
      for(i=0;i<Duct_Parts_Amount;i=i+1;){
         part = A_GET(Duct_Parts,i);
         part_type = PM_GET_OBJDATA(part,0,Duct_Shape);
         if(part_type == Rectangular_Bend){
            add_radius_dimensions(part,part_type,dim_table,dim_amount);
         }
         else if(part_type == Rectangular_Asymmetric_Bend){
            add_radius_dimensions(part,part_type,dim_table,dim_amount);
         }
         else if(part_type == Rectangular_T_branch){
            add_radius_dimensions(part,part_type,dim_table,dim_amount);
         }
         else if(part_type == Lateral_Radius_Y){
            add_radius_dimensions(part,part_type,dim_table,dim_amount);
         }
         else if(part_type == Unequal_Circular_Radius_Lateral_Y){
            add_radius_dimensions(part,part_type,dim_table,dim_amount);
         }
         else if(part_type == Rounded_Rectangular_Boot_Outlet){
            add_radius_dimensions(part,part_type,dim_table,dim_amount);
         }
      }
   }

   /*save the radius dimension information to global array*/
   Radius_Dim_Number = dim_amount;
   free_2darray(Radius_Dims);
   Radius_Dims = alloc_2darray(Radius_Dim_Number,7);
   for(i=0;i<Radius_Dim_Number;i=i+1;){
      for(j=0;j<7;j=j+1;){
         value = get_2darray(dim_table,i,j);
         put_2darray(Radius_Dims,i,j,value);
      }
   }
   free_2darray(dim_table);
   return(0);
}

add_radius_dimensions(part,part_type,dim_table,dim_amount)
{
   if(part_type == Rectangular_Bend){
      /*calculate dimension point*/
      start_length = String_To_Float(PM_GET_OBJDATA(part,0,".mp"));
      end_length = String_To_Float(PM_GET_OBJDATA(part,0,".mq"));
      inner_radius = String_To_Float(PM_GET_OBJDATA(part,0,"dr"));
      if(inner_radius > 10){
         /*get connection point data*/
         connection_table = alloc_2darray(3,13);
         connection_number = 0;
         node_id = 1;
         connected_obj = "NULL";
         get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);
         node_id = 2;
         get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);
         node_id = 3;
         get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);
         dim_text = "R" + PM_GET_OBJDATA(part,0,"dr");
         x1 = get_2darray(connection_table,0,1);
         y1 = get_2darray(connection_table,0,2);
         z1 = get_2darray(connection_table,0,3);
         dx1 = get_2darray(connection_table,0,4);
         dy1 = get_2darray(connection_table,0,5);
         dz1 = get_2darray(connection_table,0,6);
         w_dx1 = get_2darray(connection_table,0,8);
         w_dy1 = get_2darray(connection_table,0,9);
         w_dz1 = get_2darray(connection_table,0,10);
         x1 = x1 - dx1*start_length;
         y1 = y1 - dy1*start_length;
         z1 = z1 - dz1*start_length;
         x3 = get_2darray(connection_table,2,1);
         y3 = get_2darray(connection_table,2,2);
         z3 = get_2darray(connection_table,2,3);
         dx3 = get_2darray(connection_table,2,4);
         dy3 = get_2darray(connection_table,2,5);
         dz3 = get_2darray(connection_table,2,6);
         w_dx3 = get_2darray(connection_table,2,8);
         w_dy3 = get_2darray(connection_table,2,9);
         w_dz3 = get_2darray(connection_table,2,10);
         x3 = x3 - dx3*end_length;
         y3 = y3 - dy3*end_length;
         z3 = z3 - dz3*end_length;
         x01 = 0;y01 = 0;z01 = 0;
         res = Line_Intersect_Line(x1,y1,z1,w_dx1,w_dy1,w_dz1,x3,y3,z3,w_dx3,w_dy3,w_dz3,x01,y01,z01);
         x02 = 0;y02 = 0;z02 = 0;
         res = Line_Intersect_Line(x1,y1,z1,dx1,dy1,dz1,x3,y3,z3,dx3,dy3,dz3,x02,y02,z02);
         dx = x02 - x01;
         dy = y02 - y01;
         dz = z02 - z01;
         VEC_UNITV(dx,dy,dz);
         put_2darray(dim_table,dim_amount,0,x01);
         put_2darray(dim_table,dim_amount,1,y01);
         put_2darray(dim_table,dim_amount,2,z01);
         Point_3D_Move_With_DirAndDis(x01,y01,z01,dx,dy,dz,inner_radius);
         put_2darray(dim_table,dim_amount,3,x01);
         put_2darray(dim_table,dim_amount,4,y01);
         put_2darray(dim_table,dim_amount,5,z01);
         put_2darray(dim_table,dim_amount,6,dim_text);
         free_2darray(connection_table);
         dim_amount = dim_amount + 1;
      }
   }
   else if(part_type == Rectangular_Asymmetric_Bend){
      a = 0;
   }
   else if(part_type == Rectangular_T_branch){
      /*calculate dimension point*/
      start_radius = String_To_Float(PM_GET_OBJDATA(part,0,".nD"));
      end_radius = String_To_Float(PM_GET_OBJDATA(part,0,".nE"));
      if(start_radius > 10 | end_radius > 10){
         /*get connection point data*/
         connection_table = alloc_2darray(3,13);
         connection_number = 0;
         node_id = 1;
         connected_obj = "NULL";
         get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);
         node_id = 2;
         get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);
         node_id = 3;
         get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);

         if(start_radius > 10){
            start_throat = String_To_Float(PM_GET_OBJDATA(part,0,".mr"));
            branch_start_throat = String_To_Float(PM_GET_OBJDATA(part,0,".nB"));
            start_radius = String_To_Float(PM_GET_OBJDATA(part,0,".nD"));
            start_length = start_throat - start_radius;
            branch_length = branch_start_throat - start_radius;
            dim_text = "R" + PM_GET_OBJDATA(part,0,".nD");
            x1 = get_2darray(connection_table,0,1);
            y1 = get_2darray(connection_table,0,2);
            z1 = get_2darray(connection_table,0,3);
            dx1 = get_2darray(connection_table,0,4);
            dy1 = get_2darray(connection_table,0,5);
            dz1 = get_2darray(connection_table,0,6);
            w_dx1 = get_2darray(connection_table,0,8);
            w_dy1 = get_2darray(connection_table,0,9);
            w_dz1 = get_2darray(connection_table,0,10);
            x1 = x1 - dx1*start_length;
            y1 = y1 - dy1*start_length;
            z1 = z1 - dz1*start_length;
            x3 = get_2darray(connection_table,2,1);
            y3 = get_2darray(connection_table,2,2);
            z3 = get_2darray(connection_table,2,3);
            dx3 = get_2darray(connection_table,2,4);
            dy3 = get_2darray(connection_table,2,5);
            dz3 = get_2darray(connection_table,2,6);
            w_dx3 = get_2darray(connection_table,2,8);
            w_dy3 = get_2darray(connection_table,2,9);
            w_dz3 = get_2darray(connection_table,2,10);
            x3 = x3 - dx3*branch_length;
            y3 = y3 - dy3*branch_length;
            z3 = z3 - dz3*branch_length;
            x01 = 0;y01 = 0;z01 = 0;
            res = Line_Intersect_Line(x1,y1,z1,w_dx1,w_dy1,w_dz1,x3,y3,z3,w_dx3,w_dy3,w_dz3,x01,y01,z01);
            x02 = 0;y02 = 0;z02 = 0;
            res = Line_Intersect_Line(x1,y1,z1,dx1,dy1,dz1,x3,y3,z3,dx3,dy3,dz3,x02,y02,z02);
            dx = x02 - x01;
            dy = y02 - y01;
            dz = z02 - z01;
            VEC_UNITV(dx,dy,dz);
            put_2darray(dim_table,dim_amount,0,x01);
            put_2darray(dim_table,dim_amount,1,y01);
            put_2darray(dim_table,dim_amount,2,z01);
            Point_3D_Move_With_DirAndDis(x01,y01,z01,dx,dy,dz,start_radius);
            put_2darray(dim_table,dim_amount,3,x01);
            put_2darray(dim_table,dim_amount,4,y01);
            put_2darray(dim_table,dim_amount,5,z01);
            put_2darray(dim_table,dim_amount,6,dim_text);
            dim_amount = dim_amount + 1;
         }

         if(end_radius > 10){
            end_throat = String_To_Float(PM_GET_OBJDATA(part,0,".ms"));
            branch_end_throat = String_To_Float(PM_GET_OBJDATA(part,0,".nC"));
            end_radius = String_To_Float(PM_GET_OBJDATA(part,0,".nE"));
            end_length = end_throat - end_radius;
            branch_length = branch_end_throat - end_radius;
            dim_text = "R" + PM_GET_OBJDATA(part,0,".nE");
            x2 = get_2darray(connection_table,1,1);
            y2 = get_2darray(connection_table,1,2);
            z2 = get_2darray(connection_table,1,3);
            dx2 = get_2darray(connection_table,1,4);
            dy2 = get_2darray(connection_table,1,5);
            dz2 = get_2darray(connection_table,1,6);
            w_dx2 = get_2darray(connection_table,1,8);
            w_dy2 = get_2darray(connection_table,1,9);
            w_dz2 = get_2darray(connection_table,1,10);
            x2 = x2 - dx2*end_length;
            y2 = y2 - dy2*end_length;
            z2 = z2 - dz2*end_length;
            x3 = get_2darray(connection_table,2,1);
            y3 = get_2darray(connection_table,2,2);
            z3 = get_2darray(connection_table,2,3);
            dx3 = get_2darray(connection_table,2,4);
            dy3 = get_2darray(connection_table,2,5);
            dz3 = get_2darray(connection_table,2,6);
            w_dx3 = get_2darray(connection_table,2,8);
            w_dy3 = get_2darray(connection_table,2,9);
            w_dz3 = get_2darray(connection_table,2,10);
            x3 = x3 - dx3*branch_length;
            y3 = y3 - dy3*branch_length;
            z3 = z3 - dz3*branch_length;
            x01 = 0;y01 = 0;z01 = 0;
            res = Line_Intersect_Line(x1,y1,z1,w_dx1,w_dy1,w_dz1,x3,y3,z3,w_dx3,w_dy3,w_dz3,x01,y01,z01);
            x02 = 0;y02 = 0;z02 = 0;
            res = Line_Intersect_Line(x1,y1,z1,dx1,dy1,dz1,x3,y3,z3,dx3,dy3,dz3,x02,y02,z02);
            dx = x02 - x01;
            dy = y02 - y01;
            dz = z02 - z01;
            VEC_UNITV(dx,dy,dz);
            put_2darray(dim_table,dim_amount,0,x01);
            put_2darray(dim_table,dim_amount,1,y01);
            put_2darray(dim_table,dim_amount,2,z01);
            Point_3D_Move_With_DirAndDis(x01,y01,z01,dx,dy,dz,end_radius);
            put_2darray(dim_table,dim_amount,3,x01);
            put_2darray(dim_table,dim_amount,4,y01);
            put_2darray(dim_table,dim_amount,5,z01);
            put_2darray(dim_table,dim_amount,6,dim_text);
            dim_amount = dim_amount + 1;
         }
         free_2darray(connection_table);
      }
   }
   else if(part_type == Lateral_Radius_Y){
      /*calculate dimension point*/
      start_length = String_To_Float(PM_GET_OBJDATA(part,0,".mp"));
      end_length = String_To_Float(PM_GET_OBJDATA(part,0,".mq"));
      inner_radius = String_To_Float(PM_GET_OBJDATA(part,0,"dr"));
      if(inner_radius > 10){
         /*get connection point data*/
         connection_table = alloc_2darray(3,13);
         connection_number = 0;
         node_id = 1;
         connected_obj = "NULL";
         get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);
         node_id = 2;
         get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);
         node_id = 3;
         get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);
         dim_text = "R" + PM_GET_OBJDATA(part,0,"dr");
         x1 = get_2darray(connection_table,0,1);
         y1 = get_2darray(connection_table,0,2);
         z1 = get_2darray(connection_table,0,3);
         dx1 = get_2darray(connection_table,0,4);
         dy1 = get_2darray(connection_table,0,5);
         dz1 = get_2darray(connection_table,0,6);
         w_dx1 = get_2darray(connection_table,0,8);
         w_dy1 = get_2darray(connection_table,0,9);
         w_dz1 = get_2darray(connection_table,0,10);
         x1 = x1 - dx1*start_length;
         y1 = y1 - dy1*start_length;
         z1 = z1 - dz1*start_length;
         x3 = get_2darray(connection_table,2,1);
         y3 = get_2darray(connection_table,2,2);
         z3 = get_2darray(connection_table,2,3);
         dx3 = get_2darray(connection_table,2,4);
         dy3 = get_2darray(connection_table,2,5);
         dz3 = get_2darray(connection_table,2,6);
         w_dx3 = get_2darray(connection_table,2,8);
         w_dy3 = get_2darray(connection_table,2,9);
         w_dz3 = get_2darray(connection_table,2,10);
         x3 = x3 - dx3*end_length;
         y3 = y3 - dy3*end_length;
         z3 = z3 - dz3*end_length;
         x01 = 0;y01 = 0;z01 = 0;
         res = Line_Intersect_Line(x1,y1,z1,w_dx1,w_dy1,w_dz1,x3,y3,z3,w_dx3,w_dy3,w_dz3,x01,y01,z01);
         x02 = 0;y02 = 0;z02 = 0;
         res = Line_Intersect_Line(x1,y1,z1,dx1,dy1,dz1,x3,y3,z3,dx3,dy3,dz3,x02,y02,z02);
         dx = x02 - x01;
         dy = y02 - y01;
         dz = z02 - z01;
         VEC_UNITV(dx,dy,dz);
         put_2darray(dim_table,dim_amount,0,x01);
         put_2darray(dim_table,dim_amount,1,y01);
         put_2darray(dim_table,dim_amount,2,z01);
         Point_3D_Move_With_DirAndDis(x01,y01,z01,dx,dy,dz,inner_radius);
         put_2darray(dim_table,dim_amount,3,x01);
         put_2darray(dim_table,dim_amount,4,y01);
         put_2darray(dim_table,dim_amount,5,z01);
         put_2darray(dim_table,dim_amount,6,dim_text);
         free_2darray(connection_table);
         dim_amount = dim_amount + 1;
      }
   }
   else if(part_type == Unequal_Circular_Radius_Lateral_Y){
       a = 0;
   }
   else if(part_type == Rounded_Rectangular_Boot_Outlet){
       a = 0;
   }
   return(0);
}

get_angle_dimensions()
{
   dim_table = alloc_2darray(5,10);
   dim_amount = 0;
   if(Duct_Parts_Amount == 0){
      return(0);
   }
   else{
      for(i=0;i<Duct_Parts_Amount;i=i+1;){
         part = A_GET(Duct_Parts,i);
         part_type = PM_GET_OBJDATA(part,0,Duct_Shape);
         if(part_type == Rectangular_Bend){
            add_angle_dimensions(part,part_type,dim_table,dim_amount);
         }
         else if(part_type == Rectangular_Asymmetric_Bend){
            add_angle_dimensions(part,part_type,dim_table,dim_amount);
         }
         else if(part_type == Rectangular_T_branch){
            add_angle_dimensions(part,part_type,dim_table,dim_amount);
         }
         else if(part_type == Lateral_Radius_Y){
            add_angle_dimensions(part,part_type,dim_table,dim_amount);
         }
         else if(part_type == Unequal_Circular_Radius_Lateral_Y){
            add_angle_dimensions(part,part_type,dim_table,dim_amount);
         }
         else if(part_type == Rounded_Rectangular_Boot_Outlet){
            add_angle_dimensions(part,part_type,dim_table,dim_amount);
         }
      }
   }

   /*save the radius dimension information to global array*/
   Angle_Dim_Number = dim_amount;
   free_2darray(Angle_Dims);
   Angle_Dims = alloc_2darray(Angle_Dim_Number,10);
   for(i=0;i<Angle_Dim_Number;i=i+1;){
      for(j=0;j<10;j=j+1;){
         value = get_2darray(dim_table,i,j);
         put_2darray(Angle_Dims,i,j,value);
      }
   }
   free_2darray(dim_table);
   return(0);
}

add_angle_dimensions(part,part_type,dim_table,dim_amount)
{
   if(part_type == Rectangular_Bend){
      /*calculate dimension point*/
      start_length = String_To_Float(PM_GET_OBJDATA(part,0,".mp"));
      end_length = String_To_Float(PM_GET_OBJDATA(part,0,".mq"));
      angle = 180 - String_To_Float(PM_GET_OBJDATA(part,0,"fii"));
      dim_text = "";
      S_PRINTF(dim_text, "%.1f",angle);
      /*get connection point data*/
      connection_table = alloc_2darray(3,13);
      connection_number = 0;
      node_id = 1;
      connected_obj = "NULL";
      get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);
      node_id = 2;
      get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);
      node_id = 3;
      get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);
      x1 = get_2darray(connection_table,0,1);
      y1 = get_2darray(connection_table,0,2);
      z1 = get_2darray(connection_table,0,3);
      dx1 = get_2darray(connection_table,0,4);
      dy1 = get_2darray(connection_table,0,5);
      dz1 = get_2darray(connection_table,0,6);
      x1 = x1 - dx1*start_length;
      y1 = y1 - dy1*start_length;
      z1 = z1 - dz1*start_length;
      x3 = get_2darray(connection_table,2,1);
      y3 = get_2darray(connection_table,2,2);
      z3 = get_2darray(connection_table,2,3);
      dx3 = get_2darray(connection_table,2,4);
      dy3 = get_2darray(connection_table,2,5);
      dz3 = get_2darray(connection_table,2,6);
      x3 = x3 - dx3*end_length;
      y3 = y3 - dy3*end_length;
      z3 = z3 - dz3*end_length;
      x0 = 0;y0 = 0;z0 = 0;
      res = Line_Intersect_Line(x1,y1,z1,dx1,dy1,dz1,x3,y3,z3,dx3,dy3,dz3,x0,y0,z0);
      put_2darray(dim_table,dim_amount,0,x0);
      put_2darray(dim_table,dim_amount,1,y0);
      put_2darray(dim_table,dim_amount,2,z0);
      put_2darray(dim_table,dim_amount,3,x1);
      put_2darray(dim_table,dim_amount,4,y1);
      put_2darray(dim_table,dim_amount,5,z1);
      put_2darray(dim_table,dim_amount,6,x3);
      put_2darray(dim_table,dim_amount,7,y3);
      put_2darray(dim_table,dim_amount,8,z3);
      put_2darray(dim_table,dim_amount,9,dim_text);
      free_2darray(connection_table);
      dim_amount = dim_amount + 1;
   }
   else if(part_type == Rectangular_Asymmetric_Bend){
      a = 0;
   }
   else if(part_type == Rectangular_T_branch){
      a = 0;
   }
   else if(part_type == Lateral_Radius_Y){
      a = 0;
   }
   else if(part_type == Unequal_Circular_Radius_Lateral_Y){
       a = 0;
   }
   else if(part_type == Rounded_Rectangular_Boot_Outlet){
       a = 0;
   }
   return(0);
}

distance_to_nearest_connection_point(x,y,z,dx,dy,dz)
{
   for(k=0;k<Connection_Number;k=k+1;){
      x0 = get_2darray(Connection_Points,k,1);
      y0 = get_2darray(Connection_Points,k,2);
      z0 = get_2darray(Connection_Points,k,3);
      dx0 = get_2darray(Connection_Points,k,4);
      dy0 = get_2darray(Connection_Points,k,5);
      dz0 = get_2darray(Connection_Points,k,6);
      angle = 0;
      GU_GetAngleBetweenTwoVectors(dx,dy,dz,dx0,dy0,dz0,angle);
      if(-0.05<angle & angle<0.05){
         dis = Get_Point_Distance(x,y,z,x0,y0,z0);
         return(dis);
      }
   }
   return(0);
}

add_overall_dimensions(dim_table,dim_amount,x,y,z,offset,level)
{
   for(k=0;k<Overall_Dim_Points_Number;k=k+1;){
      x0 = get_2darray(Overall_Dim_Points,k,0);
      y0 = get_2darray(Overall_Dim_Points,k,1);
      z0 = get_2darray(Overall_Dim_Points,k,2);
      dx = x0-x;
      dy = y0-y;
      dz = z0-z;
      distance = VEC_UNITV(dx,dy,dz);
      if(distance>10){
         dx0 = get_2darray(Overall_Dim_Points,k,3);
         dy0 = get_2darray(Overall_Dim_Points,k,4);
         dz0 = get_2darray(Overall_Dim_Points,k,5);
         angle = 0;
         GU_GetAngleBetweenTwoVectors(dx,dy,dz,dx0,dy0,dz0,angle);
         if((-0.05<angle & angle<0.05) | (179.95<angle & angle<180.05)){
            dx = get_2darray(Overall_Dim_Points,k,6);
            dy = get_2darray(Overall_Dim_Points,k,7);
            dz = get_2darray(Overall_Dim_Points,k,8);
            put_2darray(dim_table,dim_amount,0,x0);
            put_2darray(dim_table,dim_amount,1,y0);
            put_2darray(dim_table,dim_amount,2,z0);
            put_2darray(dim_table,dim_amount,3,x);
            put_2darray(dim_table,dim_amount,4,y);
            put_2darray(dim_table,dim_amount,5,z);
            put_2darray(dim_table,dim_amount,6,dx);
            put_2darray(dim_table,dim_amount,7,dy);
            put_2darray(dim_table,dim_amount,8,dz);
            put_2darray(dim_table,dim_amount,9,offset);
            put_2darray(dim_table,dim_amount,10,level);
            dim_amount = dim_amount + 1;
         }
      }
   }
   return(0);
}

add_overall_dimensions_(dim_table,dim_amount,x1,y1,z1,x2,y2,z2,dx,dy,dz,offset,level)
{
   put_2darray(dim_table,dim_amount,0,x1);
   put_2darray(dim_table,dim_amount,1,y1);
   put_2darray(dim_table,dim_amount,2,z1);
   put_2darray(dim_table,dim_amount,3,x2);
   put_2darray(dim_table,dim_amount,4,y2);
   put_2darray(dim_table,dim_amount,5,z2);
   put_2darray(dim_table,dim_amount,6,dx);
   put_2darray(dim_table,dim_amount,7,dy);
   put_2darray(dim_table,dim_amount,8,dz);
   put_2darray(dim_table,dim_amount,9,offset);
   put_2darray(dim_table,dim_amount,10,level);
   dim_amount = dim_amount + 1;
   return(0);
}

/*calculate dimension offset*/
get_overall_dimension_offset()
{
	offset = 4;
	for(k=0;k<Overall_Dim_Points_Number;k=k+1;){
		offset0 = get_2darray(Overall_Dim_Points,k,9);
		if(offset0 > offset){
			offset = offset0;
		}
	}
	offset = offset/2;
	return(offset);
}

get_overall_dimension_points()
{
	overall_dim_points = alloc_2darray(100,10);
	overall_dim_amount = 0;
	/*Add connection point to overall dimension table 将连接点位置添加到全局尺寸标注表 */
	for(i=0;i<Connection_Number;i=i+1){
		x = get_2darray(Connection_Points,i,1);
		y = get_2darray(Connection_Points,i,2);
		z = get_2darray(Connection_Points,i,3);
		dx = get_2darray(Connection_Points,i,4);
		dy = get_2darray(Connection_Points,i,5);
		dz = get_2darray(Connection_Points,i,6);
		wdx = get_2darray(Connection_Points,i,8);
		wdy = get_2darray(Connection_Points,i,9);
		wdz = get_2darray(Connection_Points,i,10);
		offset = get_2darray(Connection_Points,i,11);
		put_2darray(overall_dim_points,overall_dim_amount,0,x);
		put_2darray(overall_dim_points,overall_dim_amount,1,y);
		put_2darray(overall_dim_points,overall_dim_amount,2,y);
		put_2darray(overall_dim_points,overall_dim_amount,3,dx);
		put_2darray(overall_dim_points,overall_dim_amount,4,dy);
		put_2darray(overall_dim_points,overall_dim_amount,5,dz);
		put_2darray(overall_dim_points,overall_dim_amount,6,dx);
		put_2darray(overall_dim_points,overall_dim_amount,7,dy);
		put_2darray(overall_dim_points,overall_dim_amount,8,dz);
		put_2darray(overall_dim_points,overall_dim_amount,9,offset);
		overall_dim_amount = overall_dim_amount + 1;
	}
	
	if(Duct_Parts_Amount > 0){
		for(i=0;i<Duct_Parts_Amount;i=i+1;){
			part = A_GET(Duct_Parts,i);
			part_type = PM_GET_OBJDATA(part,0,Duct_Shape);
			if(part_type == Rectangular_Bend | part_type == Rectangular_Asymmetric_Bend){
				/*get connection point data*/
				connection_table = alloc_2darray(3,13);
				connection_number = 0;
				node_id = 1;
				connected_obj = "NULL";
				get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);
				node_id = 2;
				get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);
				node_id = 3;
				get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);
				/*connection point 1*/
				x = get_2darray(connection_table,0,1);
				y = get_2darray(connection_table,0,2);
				z = get_2darray(connection_table,0,3);
				dx = get_2darray(connection_table,0,4);
				dy = get_2darray(connection_table,0,5);
				dz = get_2darray(connection_table,0,6);
				length = String_To_Float(PM_GET_OBJDATA(part,0,".mp"));
				x = x - length*dx;
				y = y - length*dy;
				z = z - length*dz;
				offset = get_2darray(connection_table,0,11);
				wdx = get_2darray(connection_table,0,8);
				wdy = get_2darray(connection_table,0,9);
				wdz = get_2darray(connection_table,0,10);
				put_2darray(overall_dim_points,overall_dim_amount,0,x);
				put_2darray(overall_dim_points,overall_dim_amount,1,y);
				put_2darray(overall_dim_points,overall_dim_amount,2,y);
				put_2darray(overall_dim_points,overall_dim_amount,3,dx);
				put_2darray(overall_dim_points,overall_dim_amount,4,dy);
				put_2darray(overall_dim_points,overall_dim_amount,5,dz);
				put_2darray(overall_dim_points,overall_dim_amount,6,wdx);
				put_2darray(overall_dim_points,overall_dim_amount,7,wdy);
				put_2darray(overall_dim_points,overall_dim_amount,8,wdz);
				put_2darray(overall_dim_points,overall_dim_amount,9,offset);
				overall_dim_amount = overall_dim_amount + 1;

				/*connection point 3*/
				x = get_2darray(connection_table,2,1);
				y = get_2darray(connection_table,2,2);
				z = get_2darray(connection_table,2,3);
				dx = get_2darray(connection_table,2,4);
				dy = get_2darray(connection_table,2,5);
				dz = get_2darray(connection_table,2,6);
				length = String_To_Float(PM_GET_OBJDATA(part,0,".mq"));
				x = x - length*dx;
				y = y - length*dy;
				z = z - length*dz;
				wdx = get_2darray(connection_table,2,8);
				wdy = get_2darray(connection_table,2,9);
				wdz = get_2darray(connection_table,2,10);
				offset = get_2darray(connection_table,2,11);
				put_2darray(overall_dim_points,overall_dim_amount,0,x);
				put_2darray(overall_dim_points,overall_dim_amount,1,y);
				put_2darray(overall_dim_points,overall_dim_amount,2,y);
				put_2darray(overall_dim_points,overall_dim_amount,3,dx);
				put_2darray(overall_dim_points,overall_dim_amount,4,dy);
				put_2darray(overall_dim_points,overall_dim_amount,5,dz);
				put_2darray(overall_dim_points,overall_dim_amount,6,wdx);
				put_2darray(overall_dim_points,overall_dim_amount,7,wdy);
				put_2darray(overall_dim_points,overall_dim_amount,8,wdz);
				put_2darray(overall_dim_points,overall_dim_amount,9,offset);
				overall_dim_amount = overall_dim_amount + 1;

				/*connection point 2*/
				x = get_2darray(connection_table,1,1);
				y = get_2darray(connection_table,1,2);
				z = get_2darray(connection_table,1,3);
				dx = get_2darray(connection_table,0,4);
				dy = get_2darray(connection_table,0,5);
				dz = get_2darray(connection_table,0,6);
				wdx = get_2darray(connection_table,0,8);
				wdy = get_2darray(connection_table,0,9);
				wdz = get_2darray(connection_table,0,10);
				put_2darray(overall_dim_points,overall_dim_amount,0,x);
				put_2darray(overall_dim_points,overall_dim_amount,1,y);
				put_2darray(overall_dim_points,overall_dim_amount,2,y);
				put_2darray(overall_dim_points,overall_dim_amount,3,dx);
				put_2darray(overall_dim_points,overall_dim_amount,4,dy);
				put_2darray(overall_dim_points,overall_dim_amount,5,dz);
				put_2darray(overall_dim_points,overall_dim_amount,6,wdx);
				put_2darray(overall_dim_points,overall_dim_amount,7,wdy);
				put_2darray(overall_dim_points,overall_dim_amount,8,wdz);
				put_2darray(overall_dim_points,overall_dim_amount,9,offset);
				overall_dim_amount = overall_dim_amount + 1;
				dx = get_2darray(connection_table,2,4);
				dy = get_2darray(connection_table,2,5);
				dz = get_2darray(connection_table,2,6);
				put_2darray(overall_dim_points,overall_dim_amount,0,x);
				put_2darray(overall_dim_points,overall_dim_amount,1,y);
				put_2darray(overall_dim_points,overall_dim_amount,2,y);
				put_2darray(overall_dim_points,overall_dim_amount,3,dx);
				put_2darray(overall_dim_points,overall_dim_amount,4,dy);
				put_2darray(overall_dim_points,overall_dim_amount,5,dz);
				put_2darray(overall_dim_points,overall_dim_amount,6,wdx);
				put_2darray(overall_dim_points,overall_dim_amount,7,wdy);
				put_2darray(overall_dim_points,overall_dim_amount,8,wdz);
				put_2darray(overall_dim_points,overall_dim_amount,9,offset);
				overall_dim_amount = overall_dim_amount + 1;

				free_2darray(connection_table);
			}
			else if(part_type == Rectangular_T_branch){
				/*get connection point data*/
				connection_table = alloc_2darray(4,13);
				connection_number = 0;
				node_id = 1;
				connected_obj = "NULL";
				get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);
				node_id = 2;
				get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);
				node_id = 3;
				get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);
				node_id = 4;
				get_connection_point_data(connection_table,connection_number,part,node_id,connected_obj);

				bts = String_To_Float(PM_GET_OBJDATA(part,0,".nB"));
				bte = String_To_Float(PM_GET_OBJDATA(part,0,".nC"));
				brs = String_To_Float(PM_GET_OBJDATA(part,0,".nD"));
				bre = String_To_Float(PM_GET_OBJDATA(part,0,".nE"));
				ts = String_To_Float(PM_GET_OBJDATA(part,0,".mr"));
				te = String_To_Float(PM_GET_OBJDATA(part,0,".ms"));
				w1 = String_To_Float(PM_GET_OBJDATA(part,0,"dw1"));
				w2 = String_To_Float(PM_GET_OBJDATA(part,0,"dw2"));
				w3 = String_To_Float(PM_GET_OBJDATA(part,0,".nA"));

				if((bts-bte<0.1)&(bts-bte>-0.1)&(w1-w2<0.1)&(w1-w2>-0.1)){
					/*connection point 1*/
					if(brs>0){
						if(ts>brs){
							x = get_2darray(connection_table,0,1);
							y = get_2darray(connection_table,0,2);
							z = get_2darray(connection_table,0,3);
							dx = get_2darray(connection_table,0,4);
							dy = get_2darray(connection_table,0,5);
							dz = get_2darray(connection_table,0,6);
							length = ts - brs;
							x = x - length*dx;
							y = y - length*dy;
							z = z - length*dz;
							wdx = get_2darray(connection_table,0,8);
							wdy = get_2darray(connection_table,0,9);
							wdz = get_2darray(connection_table,0,10);
							offset = get_2darray(connection_table,0,11);
							put_2darray(overall_dim_points,overall_dim_amount,0,x);
							put_2darray(overall_dim_points,overall_dim_amount,1,y);
							put_2darray(overall_dim_points,overall_dim_amount,2,y);
							put_2darray(overall_dim_points,overall_dim_amount,3,dx);
							put_2darray(overall_dim_points,overall_dim_amount,4,dy);
							put_2darray(overall_dim_points,overall_dim_amount,5,dz);
							put_2darray(overall_dim_points,overall_dim_amount,6,wdx);
							put_2darray(overall_dim_points,overall_dim_amount,7,wdy);
							put_2darray(overall_dim_points,overall_dim_amount,8,wdz);
							put_2darray(overall_dim_points,overall_dim_amount,9,offset);
							overall_dim_amount = overall_dim_amount + 1;
						}
						else{
							x = get_2darray(connection_table,0,1);
							y = get_2darray(connection_table,0,2);
							z = get_2darray(connection_table,0,3);
							dx = get_2darray(connection_table,0,4);
							dy = get_2darray(connection_table,0,5);
							dz = get_2darray(connection_table,0,6);
							wdx = get_2darray(connection_table,0,8);
							wdy = get_2darray(connection_table,0,9);
							wdz = get_2darray(connection_table,0,10);
							offset = get_2darray(connection_table,0,11);
							put_2darray(overall_dim_points,overall_dim_amount,0,x);
							put_2darray(overall_dim_points,overall_dim_amount,1,y);
							put_2darray(overall_dim_points,overall_dim_amount,2,y);
							put_2darray(overall_dim_points,overall_dim_amount,3,dx);
							put_2darray(overall_dim_points,overall_dim_amount,4,dy);
							put_2darray(overall_dim_points,overall_dim_amount,5,dz);
							put_2darray(overall_dim_points,overall_dim_amount,6,wdx);
							put_2darray(overall_dim_points,overall_dim_amount,7,wdy);
							put_2darray(overall_dim_points,overall_dim_amount,8,wdz);
							put_2darray(overall_dim_points,overall_dim_amount,9,offset);
							overall_dim_amount = overall_dim_amount + 1;
						}
					}
					/*connection point 2*/
					if(bre>0){
						if(te>bre){
							x =  get_2darray(connection_table,1,1);
							y =  get_2darray(connection_table,1,2);
							z =  get_2darray(connection_table,1,3);
							dx = get_2darray(connection_table,1,4);
							dy = get_2darray(connection_table,1,5);
							dz = get_2darray(connection_table,1,6);
							length = te - bre;
							x = x - length*dx;
							y = y - length*dy;
							z = z - length*dz;
							wdx = get_2darray(connection_table,1,8);
							wdy = get_2darray(connection_table,1,9);
							wdz = get_2darray(connection_table,1,10);
							offset = get_2darray(connection_table,1,11);
							put_2darray(overall_dim_points,overall_dim_amount,0,x);
							put_2darray(overall_dim_points,overall_dim_amount,1,y);
							put_2darray(overall_dim_points,overall_dim_amount,2,y);
							put_2darray(overall_dim_points,overall_dim_amount,3,dx);
							put_2darray(overall_dim_points,overall_dim_amount,4,dy);
							put_2darray(overall_dim_points,overall_dim_amount,5,dz);
							put_2darray(overall_dim_points,overall_dim_amount,6,wdx);
							put_2darray(overall_dim_points,overall_dim_amount,7,wdy);
							put_2darray(overall_dim_points,overall_dim_amount,8,wdz);
							put_2darray(overall_dim_points,overall_dim_amount,9,offset);
							overall_dim_amount = overall_dim_amount + 1;
						}
						else{
							x =  get_2darray(connection_table,1,1);
							y =  get_2darray(connection_table,1,2);
							z =  get_2darray(connection_table,1,3);
							dx = get_2darray(connection_table,1,4);
							dy = get_2darray(connection_table,1,5);
							dz = get_2darray(connection_table,1,6);
							wdx = get_2darray(connection_table,1,8);
							wdy = get_2darray(connection_table,1,9);
							wdz = get_2darray(connection_table,1,10);
							offset = get_2darray(connection_table,1,11);
							put_2darray(overall_dim_points,overall_dim_amount,0,x);
							put_2darray(overall_dim_points,overall_dim_amount,1,y);
							put_2darray(overall_dim_points,overall_dim_amount,2,y);
							put_2darray(overall_dim_points,overall_dim_amount,3,dx);
							put_2darray(overall_dim_points,overall_dim_amount,4,dy);
							put_2darray(overall_dim_points,overall_dim_amount,5,dz);
							put_2darray(overall_dim_points,overall_dim_amount,6,wdx);
							put_2darray(overall_dim_points,overall_dim_amount,7,wdy);
							put_2darray(overall_dim_points,overall_dim_amount,8,wdz);
							put_2darray(overall_dim_points,overall_dim_amount,9,offset);
							overall_dim_amount = overall_dim_amount + 1;
						}
					}
					/*connection point 3*/
					if(bre>0 | brs>0){
						if((bts-brs)>(bte-bre)){
							x =  get_2darray(connection_table,2,1);
							y =  get_2darray(connection_table,2,2);
							z =  get_2darray(connection_table,2,3);
							dx = get_2darray(connection_table,2,4);
							dy = get_2darray(connection_table,2,5);
							dz = get_2darray(connection_table,2,6);
							length = bte - bre;
							x = x - length*dx;
							y = y - length*dy;
							z = z - length*dz;
							wdx = get_2darray(connection_table,2,8);
							wdy = get_2darray(connection_table,2,9);
							wdz = get_2darray(connection_table,2,10);
							offset = get_2darray(connection_table,2,11);
							put_2darray(overall_dim_points,overall_dim_amount,0,x);
							put_2darray(overall_dim_points,overall_dim_amount,1,y);
							put_2darray(overall_dim_points,overall_dim_amount,2,y);
							put_2darray(overall_dim_points,overall_dim_amount,3,dx);
							put_2darray(overall_dim_points,overall_dim_amount,4,dy);
							put_2darray(overall_dim_points,overall_dim_amount,5,dz);
							put_2darray(overall_dim_points,overall_dim_amount,6,wdx);
							put_2darray(overall_dim_points,overall_dim_amount,7,wdy);
							put_2darray(overall_dim_points,overall_dim_amount,8,wdz);
							put_2darray(overall_dim_points,overall_dim_amount,9,offset);
							overall_dim_amount = overall_dim_amount + 1;
						}
						else{
							x =  get_2darray(connection_table,2,1);
							y =  get_2darray(connection_table,2,2);
							z =  get_2darray(connection_table,2,3);
							dx = get_2darray(connection_table,2,4);
							dy = get_2darray(connection_table,2,5);
							dz = get_2darray(connection_table,2,6);
							length = bts - brs;
							x = x - length*dx;
							y = y - length*dy;
							z = z - length*dz;
							wdx = get_2darray(connection_table,2,8);
							wdy = get_2darray(connection_table,2,9);
							wdz = get_2darray(connection_table,2,10);
							offset = get_2darray(connection_table,2,11);
							put_2darray(overall_dim_points,overall_dim_amount,0,x);
							put_2darray(overall_dim_points,overall_dim_amount,1,y);
							put_2darray(overall_dim_points,overall_dim_amount,2,y);
							put_2darray(overall_dim_points,overall_dim_amount,3,dx);
							put_2darray(overall_dim_points,overall_dim_amount,4,dy);
							put_2darray(overall_dim_points,overall_dim_amount,5,dz);
							put_2darray(overall_dim_points,overall_dim_amount,6,wdx);
							put_2darray(overall_dim_points,overall_dim_amount,7,wdy);
							put_2darray(overall_dim_points,overall_dim_amount,8,wdz);
							put_2darray(overall_dim_points,overall_dim_amount,9,offset);
							overall_dim_amount = overall_dim_amount + 1;
						}
					}
					/*connection point 4*/
					if(1){
						x =  get_2darray(connection_table,3,1);
						y =  get_2darray(connection_table,3,2);
						z =  get_2darray(connection_table,3,3);
						dx = get_2darray(connection_table,0,4);
						dy = get_2darray(connection_table,0,5);
						dz = get_2darray(connection_table,0,6);
						wdx = get_2darray(connection_table,0,8);
						wdy = get_2darray(connection_table,0,9);
						wdz = get_2darray(connection_table,0,10);
						offset = get_2darray(connection_table,0,11);
						put_2darray(overall_dim_points,overall_dim_amount,0,x);
						put_2darray(overall_dim_points,overall_dim_amount,1,y);
						put_2darray(overall_dim_points,overall_dim_amount,2,y);
						put_2darray(overall_dim_points,overall_dim_amount,3,dx);
						put_2darray(overall_dim_points,overall_dim_amount,4,dy);
						put_2darray(overall_dim_points,overall_dim_amount,5,dz);
						put_2darray(overall_dim_points,overall_dim_amount,6,wdx);
						put_2darray(overall_dim_points,overall_dim_amount,7,wdy);
						put_2darray(overall_dim_points,overall_dim_amount,8,wdz);
						put_2darray(overall_dim_points,overall_dim_amount,9,offset);
						overall_dim_amount = overall_dim_amount + 1;
						dx = get_2darray(connection_table,1,4);
						dy = get_2darray(connection_table,1,5);
						dz = get_2darray(connection_table,1,6);
						wdx = get_2darray(connection_table,1,8);
						wdy = get_2darray(connection_table,1,9);
						wdz = get_2darray(connection_table,1,10);
						offset = get_2darray(connection_table,1,11);
						put_2darray(overall_dim_points,overall_dim_amount,0,x);
						put_2darray(overall_dim_points,overall_dim_amount,1,y);
						put_2darray(overall_dim_points,overall_dim_amount,2,y);
						put_2darray(overall_dim_points,overall_dim_amount,3,dx);
						put_2darray(overall_dim_points,overall_dim_amount,4,dy);
						put_2darray(overall_dim_points,overall_dim_amount,5,dz);
						put_2darray(overall_dim_points,overall_dim_amount,6,wdx);
						put_2darray(overall_dim_points,overall_dim_amount,7,wdy);
						put_2darray(overall_dim_points,overall_dim_amount,8,wdz);
						put_2darray(overall_dim_points,overall_dim_amount,9,offset);
						overall_dim_amount = overall_dim_amount + 1;
						dx = get_2darray(connection_table,2,4);
						dy = get_2darray(connection_table,2,5);
						dz = get_2darray(connection_table,2,6);
						wdx = get_2darray(connection_table,2,8);
						wdy = get_2darray(connection_table,2,9);
						wdz = get_2darray(connection_table,2,10);
						offset = get_2darray(connection_table,2,11);
						put_2darray(overall_dim_points,overall_dim_amount,0,x);
						put_2darray(overall_dim_points,overall_dim_amount,1,y);
						put_2darray(overall_dim_points,overall_dim_amount,2,y);
						put_2darray(overall_dim_points,overall_dim_amount,3,dx);
						put_2darray(overall_dim_points,overall_dim_amount,4,dy);
						put_2darray(overall_dim_points,overall_dim_amount,5,dz);
						put_2darray(overall_dim_points,overall_dim_amount,6,wdx);
						put_2darray(overall_dim_points,overall_dim_amount,7,wdy);
						put_2darray(overall_dim_points,overall_dim_amount,8,wdz);
						put_2darray(overall_dim_points,overall_dim_amount,9,offset);
						overall_dim_amount = overall_dim_amount + 1;
					}
				}
				else{
					/*connection point 1*/
					if(1){
						x = get_2darray(connection_table,0,1);
						y = get_2darray(connection_table,0,2);
						z = get_2darray(connection_table,0,3);
						dx = get_2darray(connection_table,0,4);
						dy = get_2darray(connection_table,0,5);
						dz = get_2darray(connection_table,0,6);
						wdx = get_2darray(connection_table,0,8);
						wdy = get_2darray(connection_table,0,9);
						wdz = get_2darray(connection_table,0,10);
						offset = get_2darray(connection_table,0,11);
						put_2darray(overall_dim_points,overall_dim_amount,0,x);
						put_2darray(overall_dim_points,overall_dim_amount,1,y);
						put_2darray(overall_dim_points,overall_dim_amount,2,y);
						put_2darray(overall_dim_points,overall_dim_amount,3,dx);
						put_2darray(overall_dim_points,overall_dim_amount,4,dy);
						put_2darray(overall_dim_points,overall_dim_amount,5,dz);
						put_2darray(overall_dim_points,overall_dim_amount,6,wdx);
						put_2darray(overall_dim_points,overall_dim_amount,7,wdy);
						put_2darray(overall_dim_points,overall_dim_amount,8,wdz);
						put_2darray(overall_dim_points,overall_dim_amount,9,offset);
						overall_dim_amount = overall_dim_amount + 1;
					}
					/*connection point 2*/
					if(1){
						x =  get_2darray(connection_table,1,1);
						y =  get_2darray(connection_table,1,2);
						z =  get_2darray(connection_table,1,3);
						dx = get_2darray(connection_table,1,4);
						dy = get_2darray(connection_table,1,5);
						dz = get_2darray(connection_table,1,6);
						wdx = get_2darray(connection_table,1,8);
						wdy = get_2darray(connection_table,1,9);
						wdz = get_2darray(connection_table,1,10);
						offset = get_2darray(connection_table,1,11);
						put_2darray(overall_dim_points,overall_dim_amount,0,x);
						put_2darray(overall_dim_points,overall_dim_amount,1,y);
						put_2darray(overall_dim_points,overall_dim_amount,2,y);
						put_2darray(overall_dim_points,overall_dim_amount,3,dx);
						put_2darray(overall_dim_points,overall_dim_amount,4,dy);
						put_2darray(overall_dim_points,overall_dim_amount,5,dz);
						put_2darray(overall_dim_points,overall_dim_amount,6,wdx);
						put_2darray(overall_dim_points,overall_dim_amount,7,wdy);
						put_2darray(overall_dim_points,overall_dim_amount,8,wdz);
						put_2darray(overall_dim_points,overall_dim_amount,9,offset);
						overall_dim_amount = overall_dim_amount + 1;
					}
					/*connection point 3*/
					if(bre>0 | brs>0){
						if((bts-brs)>(bte-bre)){
							x =  get_2darray(connection_table,2,1);
							y =  get_2darray(connection_table,2,2);
							z =  get_2darray(connection_table,2,3);
							dx = get_2darray(connection_table,2,4);
							dy = get_2darray(connection_table,2,5);
							dz = get_2darray(connection_table,2,6);
							length = bte - bre;
							x = x - length*dx;
							y = y - length*dy;
							z = z - length*dz;
							wdx = get_2darray(connection_table,2,8);
							wdy = get_2darray(connection_table,2,9);
							wdz = get_2darray(connection_table,2,10);
							offset = get_2darray(connection_table,2,11);
							put_2darray(overall_dim_points,overall_dim_amount,0,x);
							put_2darray(overall_dim_points,overall_dim_amount,1,y);
							put_2darray(overall_dim_points,overall_dim_amount,2,y);
							put_2darray(overall_dim_points,overall_dim_amount,3,dx);
							put_2darray(overall_dim_points,overall_dim_amount,4,dy);
							put_2darray(overall_dim_points,overall_dim_amount,5,dz);
							put_2darray(overall_dim_points,overall_dim_amount,6,wdx);
							put_2darray(overall_dim_points,overall_dim_amount,7,wdy);
							put_2darray(overall_dim_points,overall_dim_amount,8,wdz);
							put_2darray(overall_dim_points,overall_dim_amount,9,offset);
							overall_dim_amount = overall_dim_amount + 1;
						}
						else{
							x =  get_2darray(connection_table,2,1);
							y =  get_2darray(connection_table,2,2);
							z =  get_2darray(connection_table,2,3);
							dx = get_2darray(connection_table,2,4);
							dy = get_2darray(connection_table,2,5);
							dz = get_2darray(connection_table,2,6);
							length = bts - brs;
							x = x - length*dx;
							y = y - length*dy;
							z = z - length*dz;
							wdx = get_2darray(connection_table,2,8);
							wdy = get_2darray(connection_table,2,9);
							wdz = get_2darray(connection_table,2,10);
							offset = get_2darray(connection_table,2,11);
							put_2darray(overall_dim_points,overall_dim_amount,0,x);
							put_2darray(overall_dim_points,overall_dim_amount,1,y);
							put_2darray(overall_dim_points,overall_dim_amount,2,y);
							put_2darray(overall_dim_points,overall_dim_amount,3,dx);
							put_2darray(overall_dim_points,overall_dim_amount,4,dy);
							put_2darray(overall_dim_points,overall_dim_amount,5,dz);
							put_2darray(overall_dim_points,overall_dim_amount,6,wdx);
							put_2darray(overall_dim_points,overall_dim_amount,7,wdy);
							put_2darray(overall_dim_points,overall_dim_amount,8,wdz);
							put_2darray(overall_dim_points,overall_dim_amount,9,offset);
							overall_dim_amount = overall_dim_amount + 1;
						}
					}
				}
				free_2darray(connection_table);
			}
			else if(part_type == Rectangular_Transition){
				a = 0;
			}
			else if(part_type == Lateral_Radius_Y){
				a = 0;
			}
			else if(part_type == Unequal_Circular_Radius_Lateral_Y){
				a = 0;
			}
			else if(part_type == Rectangular_To_Round){
				a = 0;
			}
			else if(part_type == Rounded_Rectangular_Boot_Outlet){
				a = 0;
			}
		}
	}

	/*将尺寸标注信息存入全局变量*/
	Overall_Dim_Points_Number = overall_dim_amount;
	free_2darray(Overall_Dim_Points);
	Overall_Dim_Points = alloc_2darray(Overall_Dim_Points_Number,10);
	for(i=0;i<Overall_Dim_Points_Number;i=i+1;){
		for(j=0;j<10;j=j+1;){
			value = get_2darray(overall_dim_points,i,j);
			put_2darray(Overall_Dim_Points,i,j,value);
		}
	}
	free_2darray(overall_dim_points);

	return(0);
}

find_duct_component()
{
	duct_parts = A_ALLOC(10);
	duct_parts_amount = 0;
	parts = PM_GET_OBJECTS_IN_GROUP(Current_Spool_Handle);
	part_number = PM_NR_MEMBERS_IN_SET(parts);
	for(i=0;i<part_number;i=i+1){
		part = PM_GET_MEMBER_IN_SET(parts,i);
		part_type = PM_GET_OBJDATA(part,0,Duct_Shape);
		if(ISSTRING(part_type)){
			A_PUT(duct_parts,duct_parts_amount,part);
			duct_parts_amount = duct_parts_amount + 1;
		}
	}
	Duct_Parts_Amount = duct_parts_amount;
	if(Duct_Parts_Amount > 0){
		A_FREE(Duct_Parts);
		Duct_Parts = A_ALLOC(Duct_Parts_Amount);
		for(i=0;i<duct_parts_amount;i=i+1;){
			part = A_GET(duct_parts,i);
			A_PUT(Duct_Parts,i,part);
		}
	}
	A_FREE(duct_parts);
	return(0);
}

get_connection_point_dim(dim_number,dim_table,i)
{
	x = get_2darray(Connection_Points,i,1);
	y = get_2darray(Connection_Points,i,2);
	z = get_2darray(Connection_Points,i,3);
	wdx = get_2darray(Connection_Points,i,8);
	wdy = get_2darray(Connection_Points,i,9);
	wdz = get_2darray(Connection_Points,i,10);
	offset = get_2darray(Connection_Points,i,11)/2;
	x1 = x + offset*wdx;
	y1 = y + offset*wdy;
	z1 = z + offset*wdz;
	x2 = x - offset*wdx;
	y2 = y - offset*wdy;
	z2 = z - offset*wdz;
	dx = get_2darray(Connection_Points,i,4);
	dy = get_2darray(Connection_Points,i,5);
	dz = get_2darray(Connection_Points,i,6);
	put_2darray(dim_table,dim_number,0,x1);
	put_2darray(dim_table,dim_number,1,y1);
	put_2darray(dim_table,dim_number,2,z1);
	put_2darray(dim_table,dim_number,3,x2);
	put_2darray(dim_table,dim_number,4,y2);
	put_2darray(dim_table,dim_number,5,z2);
	put_2darray(dim_table,dim_number,6,dx);
	put_2darray(dim_table,dim_number,7,dy);
	put_2darray(dim_table,dim_number,8,dz);
	put_2darray(dim_table,dim_number,9,0);
	dim_number = dim_number + 1;

	hdx = 0;hdy = 0;hdz = 0;
	VEC_CROSS_PRODUCT(dx,dy,dz,wdx,wdy,wdz,hdx,hdy,hdz);
	VEC_UNITV(hdx,hdy,hdz);
	offset = get_2darray(Connection_Points,i,12)/2;
	x1 = x + offset*hdx;
	y1 = y + offset*hdy;
	z1 = z + offset*hdz;
	x2 = x - offset*hdx;
	y2 = y - offset*hdy;
	z2 = z - offset*hdz;
	put_2darray(dim_table,dim_number,0,x1);
	put_2darray(dim_table,dim_number,1,y1);
	put_2darray(dim_table,dim_number,2,z1);
	put_2darray(dim_table,dim_number,3,x2);
	put_2darray(dim_table,dim_number,4,y2);
	put_2darray(dim_table,dim_number,5,z2);
	put_2darray(dim_table,dim_number,6,dx);
	put_2darray(dim_table,dim_number,7,dy);
	put_2darray(dim_table,dim_number,8,dz);
	put_2darray(dim_table,dim_number,9,0);
	dim_number = dim_number + 1;
	return(0);
}

/* add dimension of connect point */
draw_dimension()
{
	if(Dim_Number <= 0){
		return(0);
	}
	if(Debug){
		U_MESSAGE("**************开始标注接口尺寸***************");
	}
	/*开始标注*/


	for(i=0;i<Dim_Number;i=i+1;){
		/*计算标注尺寸值*/
		x0 = get_2darray(Dim_Table,i,0);
		y0 = get_2darray(Dim_Table,i,1);
		z0 = get_2darray(Dim_Table,i,2);
		x1 = get_2darray(Dim_Table,i,3);
		y1 = get_2darray(Dim_Table,i,4);
		z1 = get_2darray(Dim_Table,i,5);
		dx = get_2darray(Dim_Table,i,6);
		dy = get_2darray(Dim_Table,i,7);
		dz = get_2darray(Dim_Table,i,8);
		offset = get_2darray(Dim_Table,i,9);
		x=x1-x0;y=y1-y0;z=z1-z0;
		/*sometime if script get wrong coordinate value, the text direction will become strange*/
		dim_value = SQRT(x*x+y*y+z*z);
		if(dim_value > 10000){
		 mess = "第" + ITOASCII(i) + "连接点尺寸标注的值有问题";
		 U_MESSAGE("mess");
		}
		else{
		dim_text = "";
		S_PRINTF(dim_text,"%.0f",dim_value);
		for(j=0;j<3;j=j+1;){
		view = A_GET(View_Handles,j);
		if(ActivateDeActivate2D(view, 1) < 0){
		msg = "无法启动尺寸标注";
		U_MESSAGEBOX(msg, U_MB_ERROR, U_MB_OK, U_OK);
		return(-1);
		}
		Add_Linear_Dimension(view,x0,y0,z0,x1,y1,z1,dx,dy,dz,4,0,2,1.6,0.5,2,dim_text);
		}
		}
	}

	/*结束标注*/
	return(0);

}

draw_radius_dimension()
{
	if(Radius_Dim_Number <= 0){
		return(0);
	}
	if(Debug){
		U_MESSAGE("**************开始标注半径***************");
	}
	for(i=0;i<Radius_Dim_Number;i=i+1;){
		/*计算标注尺寸值*/
		x0 = get_2darray(Radius_Dims,i,0);
		y0 = get_2darray(Radius_Dims,i,1);
		z0 = get_2darray(Radius_Dims,i,2);
		x1 = get_2darray(Radius_Dims,i,3);
		y1 = get_2darray(Radius_Dims,i,4);
		z1 = get_2darray(Radius_Dims,i,5);
		dim_text = get_2darray(Radius_Dims,i,6);
		for(j=0;j<3;j=j+1;){
			view = A_GET(View_Handles,j);
			if(ActivateDeActivate2D(view, 1) < 0){
				msg = "无法启动尺寸标注";
				U_MESSAGEBOX(msg, U_MB_ERROR, U_MB_OK, U_OK);
				return(-1);
			}
			Add_Radius_Dimension(view,x0,y0,z0,x1,y1,z1,0,2,2,0.5,2,dim_text);
		}
	}
	return(0);
}

draw_angle_dimension()
{
	if(Angle_Dim_Number <= 0){
		return(0);
	}
	if(Debug){
		U_MESSAGE("**************开始标注角度***************");
	}
	for(i=0;i<Angle_Dim_Number;i=i+1;){
		/*计算标注尺寸值*/
		x0 = get_2darray(Angle_Dims,i,0);
		y0 = get_2darray(Angle_Dims,i,1);
		z0 = get_2darray(Angle_Dims,i,2);
		x1 = get_2darray(Angle_Dims,i,3);
		y1 = get_2darray(Angle_Dims,i,4);
		z1 = get_2darray(Angle_Dims,i,5);
		x2 = get_2darray(Angle_Dims,i,6);
		y2 = get_2darray(Angle_Dims,i,7);
		z2 = get_2darray(Angle_Dims,i,8);
		dim_text = get_2darray(Angle_Dims,i,9);
		for(j=0;j<3;j=j+1;){
			view = A_GET(View_Handles,j);
			if(ActivateDeActivate2D(view, 1) < 0){
				msg = "无法启动尺寸标注";
				U_MESSAGEBOX(msg, U_MB_ERROR, U_MB_OK, U_OK);
				return(-1);
			}
			Add_Angle_Dimension(view,x0,y0,z0,x1,y1,z1,x2,y2,z2,2,1.6,0.5,2,dim_text);
		}
	}
	return(0);
}

draw_overall_dimension()
{
	if(Dim_Number <= 0){
		return(0);
	}
	if(Debug){
		U_MESSAGE("**************开始标注总体尺寸***************");
	}
	for(i=0;i<Overall_Dim_Number;i=i+1;){
		/*计算标注尺寸值*/
		x0 = get_2darray(Overall_Dims,i,0);
		y0 = get_2darray(Overall_Dims,i,1);
		z0 = get_2darray(Overall_Dims,i,2);
		x1 = get_2darray(Overall_Dims,i,3);
		y1 = get_2darray(Overall_Dims,i,4);
		z1 = get_2darray(Overall_Dims,i,5);
		dx = get_2darray(Overall_Dims,i,6);
		dy = get_2darray(Overall_Dims,i,7);
		dz = get_2darray(Overall_Dims,i,8);
		offset = get_2darray(Overall_Dims,i,9);
		level = get_2darray(Overall_Dims,i,10);
		x=x1-x0;y=y1-y0;z=z1-z0;
		dim_value = SQRT(x*x+y*y+z*z);
		if(dim_value > 10000){
			mess = "第" + ITOASCII(i) + "总体尺寸标注的值有问题";
			U_MESSAGE("mess");
		}
		else{
			dim_text = "";
			S_PRINTF(dim_text,"%.0f",dim_value);
			for(j=0;j<3;j=j+1;){
				view = A_GET(View_Handles,j);
				if(ActivateDeActivate2D(view, 1) < 0){
					msg = "无法启动尺寸标注";
					U_MESSAGEBOX(msg, U_MB_ERROR, U_MB_OK, U_OK);
					return(-1);
				}
				Add_Linear_Dimension(view,x0,y0,z0,x1,y1,z1,dx,dy,dz,3*level,offset,2,1.6,0.5,2,dim_text);
			}
		}
	}
	return(0);
}

/* set up title block */
set_header_field()
{
	page_header_rec = DM_INIT_TAGREC();
	res = PM_GET_HEADER_FROM_ACTIVE_DRW(page_header_rec);
	if(res != 0){
		U_MESSAGE("无法获取标题栏数据");
		return(0);
	}

	/*set spool name*/
	spool_name = Cur_Spool_Name;
	DM_SET_TAGVAL(page_header_rec,Spool_Name,spool_name);

	/*planning Unit*/
	planning_unit = PM_GET_OBJDATA(Current_Spool_Handle, 0, DocName);
	DM_SET_TAGVAL(page_header_rec,Planning_Unit,planning_unit);

	/*spool weight*/
	weight = get_spool_weight();
	weight_s = "";
	S_PRINTF(weight_s, "%.2f", weight);
	DM_SET_TAGVAL(page_header_rec,Weight,weight_s);

	/*page number*/
	id = find_spool_grid_id(Current_Spool_Handle);
	W_SET_WINDOW_ARGS(DisplayGrid,W_LISTW_FINDID,id);
	row = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ROW);
	st = 0;
	start_page = W_GET_NUMERIC_VALUE(Start_Page, st);
	if (st != 0){
		W_SET_NUMERIC_VALUE(Start_Page, 2);
		start_page = 2;
	}
	page_number = ITOASCII(start_page + row);	   
	spool_number = PM_NR_MEMBERS_IN_SET(Object_List);
	total_number = ITOASCII(start_page + spool_number - 1);   
	DM_SET_TAGVAL(page_header_rec,PageNumber,page_number);
	DM_SET_TAGVAL(page_header_rec,TotalPage,total_number);
	/*set drawing header information*/	
	res = PM_SET_HEADER_TO_ACTIVE_DRW(page_header_rec); 
	DM_FREE_TAGREC(page_header_rec);
	return(0);
}

get_spool_weight()
{
	weight = 0.0;
	for(i=0;i<Mto_Number;i=i+1;){
		part_weight = get_2darray(Mto_Table,i,5);
		weight = weight + part_weight;
	}
	return(weight);
}

get_label_table()
{
	/*初始化标注全局数组*/
	Label_Number = Mto_Number + Connection_Label_Number;
	free_2darray(Label_Table);
	Label_Table = alloc_2darray(Label_Number,4);

	/*将零件编号标注加入到标注全局数组*/
	start = 0;
	for(i=0;i<Mto_Number;i=i+1;){
		put_2darray(Label_Table,start,0,"MTO");
		label = get_2darray(Mto_Label_Table,i,0);
		put_2darray(Label_Table,start,1,label);
		/*获取三维点的坐标*/
		x = get_2darray(Mto_Label_Table,i,1);
		y = get_2darray(Mto_Label_Table,i,2);
		z = get_2darray(Mto_Label_Table,i,3);
		/*将三维坐标转换成平面坐标*/
		view_h = A_GET(View_Handles,3);
		Translate_3D_To_2D(view_h,View_Scale,View4_X,View4_Y,x,y,z);
		put_2darray(Label_Table,start,2,x);
		put_2darray(Label_Table,start,3,y);
		start = start + 1;
	}

	/*将连接点编号标注加入到标注全局数组*/
	for(i=0;i<Connection_Label_Number;i=i+1;){
		/*for(i=0;i<2;i=i+1;){*/
		put_2darray(Label_Table,start,0,"CON");
		label = get_2darray(Connection_Label_Table,i,0);
		put_2darray(Label_Table,start,1,label);
		/*获取三维点的坐标*/
		x = get_2darray(Connection_Label_Table,i,1);
		y = get_2darray(Connection_Label_Table,i,2);
		z = get_2darray(Connection_Label_Table,i,3);
		/*将三维坐标转换成平面坐标*/
		view_h = A_GET(View_Handles,3);
		Translate_3D_To_2D(view_h,View_Scale,View4_X,View4_Y,x,y,z);
		put_2darray(Label_Table,start,2,x);
		put_2darray(Label_Table,start,3,y);
		start = start + 1;
	}
	return(0);
}

draw_label()
{
	/*计算视图每一个边最多的标注个数及间隔*/
	int label_number_per_side;
	label_number_per_side = Label_Number / 4;
	less_number = Label_Number - label_number_per_side * 4;
	if(less_number != 0){
		label_number_per_side = label_number_per_side + 1;
	}

	if(label_number_per_side < 8){
		label_number_per_side = 8;
	}

	gap = View_Size / label_number_per_side;

	/*创建一个数组，用于保存可能的标注位置*/
	temp = alloc_2darray(4*label_number_per_side,3);
	/*初始化相关变量*/
	x1 = View4_X - View_Size / 2;
	x2 = View4_X + View_Size / 2;
	y1 = View4_Y - View_Size / 2;
	y2 = View4_Y + View_Size / 2;
	position_number = 0;
	for(i=0;i<label_number_per_side;i=i+1;){
		/*视图下部*/
		x = x1 + i * gap;
		y = y1;
		put_2darray(temp,position_number,0,"YES");
		put_2darray(temp,position_number,1,x);
		put_2darray(temp,position_number,2,y);
		position_number = position_number + 1;
		/*视图右侧*/
		x = x2;
		y = y1 + i * gap;
		put_2darray(temp,position_number,0,"YES");
		put_2darray(temp,position_number,1,x);
		put_2darray(temp,position_number,2,y);
		position_number = position_number + 1;
		/*视图上部*/
		x = x2 - i * gap;
		y = y2;
		put_2darray(temp,position_number,0,"YES");
		put_2darray(temp,position_number,1,x);
		put_2darray(temp,position_number,2,y);
		position_number = position_number + 1;
		/*视图左侧*/
		x = x1;
		y = y2 - i * gap;
		put_2darray(temp,position_number,0,"YES");
		put_2darray(temp,position_number,1,x);
		put_2darray(temp,position_number,2,y);
		position_number = position_number + 1;
	}
	/*初始化标注标志*/
	label_mark = A_ALLOC(Label_Number);
	for(i=0;i<Label_Number;i=i+1;){
		A_PUT(label_mark,i,"YES");
	}

	/*循环查找距离最近的标注点和标注位置*/
	loop_mark = 1;
	while(loop_mark){
		/*循环查找离标注点最近的标注位置，并将其写在获得的标注位置上*/
		label_sequence = -1000;
		position_sequence = -1000;
		min_dis = 10000000;
		for(i=0;i<Label_Number;i=i+1;){
			check = A_GET(label_mark,i);
			if(check == "YES"){
				x0 = get_2darray(Label_Table,i,2);
				y0 = get_2darray(Label_Table,i,3);
				for(j=0;j<4*label_number_per_side;j=j+1;){
					flag = get_2darray(temp,j,0);
					if(flag == "YES"){
						x1 = get_2darray(temp,j,1);
						y1 = get_2darray(temp,j,2);
						u = x1 - x0;
						v = y1 - y0;
						distance = SQRT(u*u + v*v);
						if(distance<min_dis){
							min_dis = distance;
							label_sequence = i;
							position_sequence = j;
						}
					}
				}
			}
		}
		if(label_sequence != -1000 & position_sequence != -1000){
			/*获取标注内容、标注点位置并设置标志*/
			A_PUT(label_mark,label_sequence,"NO");
			type = get_2darray(Label_Table,label_sequence,0);
			label = get_2darray(Label_Table,label_sequence,1);
			x0 = get_2darray(Label_Table,label_sequence,2);
			y0 = get_2darray(Label_Table,label_sequence,3);

			/*获取标注位置并设置标志*/
			put_2darray(temp,position_sequence,0,"NO");
			x = get_2darray(temp,position_sequence,1);
			y = get_2darray(temp,position_sequence,2);

			/*根据不同的标准类型执行不同的标注*/
			if(type == "MTO"){
				draw_mto_label(label,x,y,x0,y0);
			}
			else if(type == "CON"){
				draw_connection_label(label,x,y,x0,y0);
			}
		}
		else{
			loop_mark=0;
		}
	}
	return(0);
}

draw_mto_label(label,x0,y0,x1,y1)
{
	r = Mto_Label_Circle_Radius;
	DW_COLOR(Mto_Label_Text_Colour);
	DW_TSIZE(Mto_Label_Text_Height);
	DW_TATTR(0.0,0.0,5);
	DW_TEXT(label,x0,y0);
	DW_COLOR(Mto_Label_Leader_Line_Colour);
	DW_LTYPE(Mto_Label_Leader_Line_Type,Mto_Label_Leader_Line_PattenLength);
	DW_ARC(x0-r,y0,x0,y0,x0-r,y0);
	x_diff = x0-x1;
	y_diff = y0-y1;
	len = SQRT(x_diff*x_diff+y_diff*y_diff);
	x2 = x0 + Mto_Label_Circle_Radius*(x1-x0)/len;
	y2 = y0 + Mto_Label_Circle_Radius*(y1-y0)/len;
	DW_POLY(x2,y2,x1,y1);
	return(0);
}

draw_connection_label(label,x0,y0,x01,y01)
{
	DW_COLOR(Connection_Label_Text_Colour);
	DW_TSIZE(Connection_Label_Text_Height);
	DW_TATTR(0.0,0.0,5);
	DW_TEXT(label,x0,y0);
	DW_COLOR(Connection_Label_Leader_Line_Colour);
	DW_LTYPE(Connection_Label_Leader_Line_Type,Connection_Label_Leader_Line_PattenLength);
	nr_char = STRLEN(label);
	length = (nr_char * Connection_Label_Text_Height)/2;
	height = Connection_Label_Text_Height;
	x1 = x0 - length - height/2;
	y1 = y0;
	x2 = x0 - length;
	y2 = y0 + height;
	x3 = x0 + length;
	y3 = y2;
	x4 = x0 + length + height/2;
	y4 = y1;
	x5 = x3;
	y5 = y0 - height;
	x6 = x2;
	y6 = y5;
	DW_POLY(x1,y1,x2,y2);
	DW_POLY(x2,y2,x3,y3);
	DW_POLY(x3,y3,x4,y4);
	DW_POLY(x4,y4,x5,y5);
	DW_POLY(x5,y5,x6,y6);
	DW_POLY(x6,y6,x1,y1);

	if(x01<x1){
		x = x1;
		y = y1;
	}
	else if(x01>x4){
		x = x4;
		y = y4;
	}
	else{
		if(y01<y0){
			x = x0;
			y = y5;
		}
		else{
			x = x0;
			y = y2;
		}
	}
	DW_POLY(x,y,x01,y01);
	return(0);
}

/*将管段视图分配到小票图中*/
assign_views_to_drawing()
{
	for(i=0;i<4;i=i+1;){
		view = A_GET(View_Names,i);
		origin_x = get_2darray(View_Positions,i,0);
		origin_y = get_2darray(View_Positions,i,1);
		PM_ASSIGN_VIEW_TO_PAGE(view,origin_x,origin_y,View_Scale);
	}
	return(0);
}

/*获取小票图名称*/
get_drawing_name()
{
	drawing_name = "";
	flag = 1;
	i = 0;
	name_length = STRLEN(Cur_Spool_Name);
	if(name_length>=25){
		spool_name = HEAD(Cur_Spool_Name,25);
	}
	else{
		spool_name = Cur_Spool_Name;
	}
	while(flag){
		drawing_name = spool_name + "-SK" + ITOASCII(i);
		doc_guid = "";
		res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);
		if(res <= 0){
			flag = 0;
		}
		i = i + 1;
	}
	return(drawing_name);
}

/*创建小票图*/
create_drawing()
{
	bom_set = PM_INIT_SET();
	header_tag_rec = DM_INIT_TAGREC();
	dname = "";
	icgd_name = Drawing_Form_Name;
	res = PM_CREATE_DRAWING(Cur_Sketch_Name, "HvacSketch", PM_DRW_CFLG_GLOBAL, bom_set, icgd_name, header_tag_rec, dname);
	DM_FREE_TAGREC(header_tag_rec);
	if(res != 0){
		return(-1);
	}

	/*将生成的小票名称写入管段的属性中*/
	Set_Attribute_Value(Current_Spool_Handle,SketchName,Cur_Sketch_Name);
	PM_SAVE(0,1,1);

	/*将生成的小票名称显示在格栅中*/
	id = find_spool_grid_id(Current_Spool_Handle);
	if(id != -1){
		W_SET_WINDOW_ARGS(DisplayGrid,W_LISTW_FINDID,id);
		row = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ROW);
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, row, W_LISTW_COLUMN, 3, W_LISTW_STRING, Cur_Sketch_Name);
	}

	/*将小票生成的日期显示到格栅中*/
	date_string = Get_Creation_Date(Cur_Sketch_Name);
	if(!ISINT(date_string)){
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, row, W_LISTW_COLUMN, 4, W_LISTW_STRING, date_string);
	}
	return(0);
}

find_spool_grid_id(handle spool_handle)
{
	for(i=0;i<Object_Number;i=i+1;){
		obj_handle = PM_GET_MEMBER_IN_SET(Object_List,i);
		if(spool_handle == obj_handle){
			return(i);
		}
	}
	return(-1);
}

/* 计算管段各个视图的相关参数并保存到全局数组中
   0.    ViewName       视图的名称后缀
   1~3.  Point          视图视点位置
   4~6.  Vdir           视图方向(应该是视向的反方向)
   7~9.  Vup            视图的向上方向
*/
get_spool_view_para()
{
	/* 获取管段所占的三维空间 */
	xmin = 0; ymin = 0; zmin = 0;xmax = 0;ymax = 0;zmax = 0;
	res = PM_GET_BBOX_OF_SET(Cur_Spool_Model_Set,xmin,xmax, ymin,ymax, zmin,zmax);
	if(res == -1){
		message = "无法计算管段:" + Cur_Spool_Name + "所占的三维空间范围";
		U_MESSAGE(message);
		return(-1);
	}

	/*为了使视图的可见性更好,特别是管段只有一个直管时，将视图范围稍为放大一点*/
	xmin=xmin-100;
	ymin=ymin-100;
	zmin=zmin-100;
	xmax=xmax+100;
	ymax=ymax+100;
	zmax=zmax+100;

	/* 计算视图比例 */
	length_x = xmax-xmin;
	length_y = ymax-ymin;
	length_z = zmax-zmin;
	xx = length_x*length_x;
	yy = length_y*length_y;
	zz = length_z*length_z;
	length = SQRT(xx+yy+zz);
	View_Scale = length/View_Size;

	free_2darray(View_Info);
	View_Info = alloc_2darray(4,15);
	/* 设置视图名称后缀 */
	view_name = "Side";
	put_2darray(View_Info,0,0,view_name);
	view_name = "Front";
	put_2darray(View_Info,1,0,view_name);
	view_name = "Top";
	put_2darray(View_Info,2,0,view_name);
	view_name = "ISO1";
	put_2darray(View_Info,3,0,view_name);
	/* 计算视图视点位置 */
	view_point_x = (xmax - xmin)/2+xmin;
	view_point_y = ymin;
	view_point_z = (zmax - zmin)/2+zmin;
	put_2darray(View_Info,0,1,view_point_x);
	put_2darray(View_Info,0,2,view_point_y);
	put_2darray(View_Info,0,3,view_point_z);
	view_point_x = xmin;
	view_point_y = (ymax - ymin)/2+ymin;
	view_point_z = (zmax - zmin)/2+zmin;
	put_2darray(View_Info,1,1,view_point_x);
	put_2darray(View_Info,1,2,view_point_y);
	put_2darray(View_Info,1,3,view_point_z);
	view_point_x = (xmax - xmin)/2+xmin;
	view_point_y = (ymax - ymin)/2+ymin;
	view_point_z = zmax;
	put_2darray(View_Info,2,1,view_point_x);
	put_2darray(View_Info,2,2,view_point_y);
	put_2darray(View_Info,2,3,view_point_z);
	/* 计算视图视向 */
	view_dir_x = 0;
	view_dir_y = -1;
	view_dir_z = 0;
	put_2darray(View_Info,0,4,view_dir_x);
	put_2darray(View_Info,0,5,view_dir_y);
	put_2darray(View_Info,0,6,view_dir_z);
	view_dir_x = -1;
	view_dir_y = 0;
	view_dir_z = 0;
	put_2darray(View_Info,1,4,view_dir_x);
	put_2darray(View_Info,1,5,view_dir_y);
	put_2darray(View_Info,1,6,view_dir_z);
	view_dir_x = 0;
	view_dir_y = 0;
	view_dir_z = 1;
	put_2darray(View_Info,2,4,view_dir_x);
	put_2darray(View_Info,2,5,view_dir_y);
	put_2darray(View_Info,2,6,view_dir_z);
	/* 计算视图向上方向 */
	view_up_dir_x = 0;
	view_up_dir_y = 0;
	view_up_dir_z = 1;
	put_2darray(View_Info,0,7,view_up_dir_x);
	put_2darray(View_Info,0,8,view_up_dir_y);
	put_2darray(View_Info,0,9,view_up_dir_z);
	view_up_dir_x = 0;
	view_up_dir_y = 0;
	view_up_dir_z = 1;
	put_2darray(View_Info,1,7,view_up_dir_x);
	put_2darray(View_Info,1,8,view_up_dir_y);
	put_2darray(View_Info,1,9,view_up_dir_z);
	view_up_dir_x = 0;
	view_up_dir_y = 1;
	view_up_dir_z = 0;
	put_2darray(View_Info,2,7,view_up_dir_x);
	put_2darray(View_Info,2,8,view_up_dir_y);
	put_2darray(View_Info,2,9,view_up_dir_z);
	/* 计算视图空间范围 */
	view_umin = -(xmax-xmin)/2;
	view_umax = (xmax-xmin)/2;
	view_vmin = -(zmax-zmin)/2;
	view_vmax = (zmax-zmin)/2;
	view_depth = ymax-ymin;
	put_2darray(View_Info,0,10,view_umin);
	put_2darray(View_Info,0,11,view_umax);
	put_2darray(View_Info,0,12,view_vmin);
	put_2darray(View_Info,0,13,view_vmax);
	put_2darray(View_Info,0,14,view_depth);
	view_umin = -(ymax-ymin)/2;
	view_umax = (ymax-ymin)/2;
	view_vmin = -(zmax-zmin)/2;
	view_vmax = (zmax-zmin)/2;
	view_depth = xmax-xmin;
	put_2darray(View_Info,1,10,view_umin);
	put_2darray(View_Info,1,11,view_umax);
	put_2darray(View_Info,1,12,view_vmin);
	put_2darray(View_Info,1,13,view_vmax);
	put_2darray(View_Info,1,14,view_depth);
	view_umin = -(xmax-xmin)/2;
	view_umax = (xmax-xmin)/2;
	view_vmin = -(ymax-ymin)/2;
	view_vmax = (ymax-ymin)/2;
	view_depth = zmax-zmin;
	put_2darray(View_Info,2,10,view_umin);
	put_2darray(View_Info,2,11,view_umax);
	put_2darray(View_Info,2,12,view_vmin);
	put_2darray(View_Info,2,13,view_vmax);
	put_2darray(View_Info,2,14,view_depth);
	/* 计算三维视图的相关参数 */
	rot = AxoRotAngle;
	slope = AxoSlopeAngle;
	vpx=0;vpy=0;vpz=0;vdx=0;vdy=0;vdz=0;udx=0;udy=0;udz=0;umin=0;vmin=0;umax=0;vmax=0;depth=0;
	compute_axo_params(rot, slope, xmin,xmax, ymin,ymax, zmin, zmax, vpx, vpy, vpz, vdx, vdy, vdz, udx, udy, udz, umin, vmin, umax, vmax, depth);
	/*三维视图的视点*/
	put_2darray(View_Info,3,1,vpx);
	put_2darray(View_Info,3,2,vpy);
	put_2darray(View_Info,3,3,vpz);
	/*三维视图的视向*/
	put_2darray(View_Info,3,4,vdx);
	put_2darray(View_Info,3,5,vdy);
	put_2darray(View_Info,3,6,vdz);
	/*三维视图的向上方向*/
	put_2darray(View_Info,3,7,udx);
	put_2darray(View_Info,3,8,udy);
	put_2darray(View_Info,3,9,udz);
	/* 三维视图的空间范围 */
	put_2darray(View_Info,3,10,umin);
	put_2darray(View_Info,3,11,umax);
	put_2darray(View_Info,3,12,vmin);
	put_2darray(View_Info,3,13,vmax);
	put_2darray(View_Info,3,14,depth);
}

/*
	Compute axo view params.
	The code is borrowed from DefViews.mac

	Input args; rot, slope, xmin,xmax, ymin,ymax, zmin, zmax
	Output args: vpx, vpy, vpz, vdx, vdy, vdz, umin, vmin, umax, vmax, depth
*/

compute_axo_params(rot, slope, xmin,xmax, ymin,ymax, zmin, zmax,
	vpx, vpy, vpz, vdx, vdy, vdz, udx, udy, udz, umin, vmin, umax, vmax, depth  )
{
	xxmin = xmin;
	xxmax= xmax;
	yymin= ymin;
	yymax= ymax;
	zzmin= zmin;
	zzmax= zmax;

	set_m_x = (xxmin+xxmax)/2;
	set_m_y = (yymin+yymax)/2;
	set_m_z = (zzmin+zzmax)/2;

	xx2=(xxmax - xxmin)*(xxmax - xxmin);
	yy2=(yymax - yymin)*(yymax - yymin);
	zz2=(zzmax - zzmin)*(zzmax - zzmin);

	mbb_diag = SQRT( xx2+ yy2+ zz2);

    vdx = COS(rot)*COS(slope);
    vdy = SIN(rot)*COS(slope);
    vdz = SIN(slope);

    udx = COS(rot)*COS(slope+90);
    udy = SIN(rot)*COS(slope+90);
    udz = SIN(slope+90);

    /*
    if( DEBUG )U_MESSAGE("rot "+FTOASCII(rot)+" slope "+FTOASCII(slope)+"vd "
    	+FTOASCII(vdx)+", "+FTOASCII(vdy)+", "+FTOASCII(vdz));
    	*/

	/*
		Position view point on the surface of a sphere with radius long enough so that
		the front plane does not clip objects in the active set.
	*/

	vpx = set_m_x + vdx*(mbb_diag/2 + 100);
	vpy = set_m_y + vdy*(mbb_diag/2 + 100);
	vpz = set_m_z + vdz*(mbb_diag/2 + 100);

	d = mbb_diag/2 + 100;

	/* Use default limits for axo view */
	umin = -d; umax = d; vmin = -d; vmax = d; depth = mbb_diag + 200;

	return(0);
}

/*创建管段视图*/
create_view()
{
	get_spool_view_para();
	View_Handles = A_ALLOC(4);
	View_Names = A_ALLOC(4);
	for(i=0;i<4;i=i+1;){
		view_name = get_2darray(View_Info,i,0);
		A_PUT(View_Names,i,view_name);
		screen = "";
		display = "";
		in_drawing = 1;
		view_handle = PM_CREATE_VIEW(view_name,in_drawing, screen, display);
		set_view_parameter(view_handle,i);
		PM_VISUALIZE_SET_TO_VIEW(Cur_Spool_Model_Set,view_handle);
		A_PUT(View_Handles,i,view_handle);
	}
	return(0);
}

/*设置管段视图的参数*/
set_view_parameter(handle view_handle,int i)
{
	/* 设置视点 */
	view_point_x = get_2darray(View_Info,i,1);
	view_point_y = get_2darray(View_Info,i,2);
	view_point_z = get_2darray(View_Info,i,3);
	PM_SET_VIEW_PARAMETERS(view_handle, "POINT", view_point_x,view_point_y,view_point_z);
	/* 设置视向 */
	view_dir_x = get_2darray(View_Info,i,4);
	view_dir_y = get_2darray(View_Info,i,5);
	view_dir_z = get_2darray(View_Info,i,6);
	PM_SET_VIEW_PARAMETERS(view_handle, "VDIR", view_dir_x,view_dir_y,view_dir_z);
	/* 设置视向上方向 */
	view_up_dir_x = get_2darray(View_Info,i,7);
	view_up_dir_y = get_2darray(View_Info,i,8);
	view_up_dir_z = get_2darray(View_Info,i,9);
	PM_SET_VIEW_PARAMETERS(view_handle, "VUP", view_up_dir_x,view_up_dir_y,view_up_dir_z);
	/* 设置视向上方向 */
	umin = get_2darray(View_Info,i,10);
	umax = get_2darray(View_Info,i,11);
	vmin = get_2darray(View_Info,i,12);
	vmax = get_2darray(View_Info,i,13);
	depth = get_2darray(View_Info,i,14);
	PM_SET_VIEW_PARAMETERS(view_handle, "LIMITS", umin, umax, vmin, vmax, depth);
	/*设置视图中是否显示隔热层*/
	PM_SET_VIEW_PARAMETERS(view_handle, "SHOW_INSULATION", 0);

	return(0);
}

sort_parts()
{
	parts = PM_GET_OBJECTS_IN_GROUP(Current_Spool_Handle);
	if(!ISINT(parts)){
		part_number = PM_NR_MEMBERS_IN_SET(parts);
		Spool_Part_Number = part_number;
		Spool_Parts = alloc_2darray(Max_Spool_Parts_Number,10);
		for(i=0;i<Spool_Part_Number;i=i+1){
			/*0. MTO序号，初始化为10000*/
			put_2darray(Spool_Parts,i,0,10000);
			/*1. 零件类型，COMP为风管零件，FLANGE为风管法兰*/
			part = PM_GET_MEMBER_IN_SET(parts,i);
			part_type = PM_GET_OBJDATA(part,0,MMT_TAG_OBJTYPE);
			if(part_type == "5"){
				put_2darray(Spool_Parts,i,1,"FLANGE");
			}
			else{
				put_2darray(Spool_Parts,i,1,"COMP");
			}
			/*2. 零件的HANDLE*/
			put_2darray(Spool_Parts,i,2,part);
			/*3. 零件的PART ID*/
			part_id = PM_GET_OBJDATA(part,0,MMT_TAG_PARTID);
			put_2darray(Spool_Parts,i,3,part_id);
			/*4,5,6 法兰型材的起始点坐标或者风管零件的重心*/
			if(part_type == "5"){
				x1 = String_To_Float(PM_GET_OBJDATA(part,0,MMT_TAG_ORIG_X));
				y1 = String_To_Float(PM_GET_OBJDATA(part,0,MMT_TAG_ORIG_Y));
				z1 = String_To_Float(PM_GET_OBJDATA(part,0,MMT_TAG_ORIG_Z));
				length = String_To_Float(PM_GET_OBJDATA(part,0,MMT_TAG_AXIS_LEN));
				axis_rotate = String_To_Float(PM_GET_OBJDATA(part,0,MMT_TAG_AXIS_ROT_ANGLE));
				axis_slope = String_To_Float(PM_GET_OBJDATA(part,0,MMT_TAG_AXIS_SLP_ANGLE));
				dx = COS(axis_slope)*COS(axis_rotate);
				dy = COS(axis_slope)*SIN(axis_rotate);
				dz = SIN(axis_slope);
				x2 = x1 + length * dx;
				y2 = y1 + length * dy;
				z2 = z1 + length * dz;
				put_2darray(Spool_Parts,i,4,x1);
				put_2darray(Spool_Parts,i,5,y1);
				put_2darray(Spool_Parts,i,6,z1);
				put_2darray(Spool_Parts,i,7,x2);
				put_2darray(Spool_Parts,i,8,y2);
				put_2darray(Spool_Parts,i,9,z2);
			}
			else{
				x1 = String_To_Float(PM_GET_OBJDATA(part,0,MMT_TAG_COGX));
				y1 = String_To_Float(PM_GET_OBJDATA(part,0,MMT_TAG_COGY));
				z1 = String_To_Float(PM_GET_OBJDATA(part,0,MMT_TAG_COGZ));
				put_2darray(Spool_Parts,i,4,x1);
				put_2darray(Spool_Parts,i,5,y1);
				put_2darray(Spool_Parts,i,6,z1);
				put_2darray(Spool_Parts,i,7,0);
				put_2darray(Spool_Parts,i,8,0);
				put_2darray(Spool_Parts,i,9,0);
			}
		}
	}
	else{
		return(-1);
	}
	return(0);
}

numbering_part()
{
	mto_number = 1;
	comp_mto_number = 0;
	for(i=0;i<Spool_Part_Number;i=i+1;){
		part_type = get_2darray(Spool_Parts,i,1);
		/*处理风管零件*/
		if(part_type == "COMP"){
			if(comp_mto_number == 0){
				comp_mto_number = mto_number;
				mto_number = mto_number + 1;
				put_2darray(Spool_Parts,i,0,comp_mto_number);
			}
			else{
				put_2darray(Spool_Parts,i,0,comp_mto_number);
			}
		}
		/*处理法兰零件*/
		else{
			find_flange_mto_number(i,mto_number);
		}
	}
	Mto_Number = mto_number - 1;
	return(0);
}

print_part_info()
{
	if(Debug){
		U_MESSAGE("零件信息");
		for(i=0;i<Spool_Part_Number;i=i+1;){
			s1 = ITOASCII(get_2darray(Spool_Parts,i,0));
			s2 = get_2darray(Spool_Parts,i,1);
			info = ITOASCII(i) + ":" + s1 + "-" + s2;
			U_MESSAGE(info);
		}
	}
	return(0);
}

find_flange_mto_number(i,mto_number)
{
   x1 = get_2darray(Spool_Parts,i,4);
   y1 = get_2darray(Spool_Parts,i,5);
   z1 = get_2darray(Spool_Parts,i,6);
   x2 = get_2darray(Spool_Parts,i,7);
   y2 = get_2darray(Spool_Parts,i,8);
   z2 = get_2darray(Spool_Parts,i,9);
   dis = get_check_distance(i);
   find_mto = 0;
   for(k=0;k<Spool_Part_Number;k=k+1;){
      if(!find_mto){
         if(k != i){
            part_type = get_2darray(Spool_Parts,k,1);
            if(part_type == "FLANGE"){
               x3 = get_2darray(Spool_Parts,k,4);
               y3 = get_2darray(Spool_Parts,k,5);
               z3 = get_2darray(Spool_Parts,k,6);
               x4 = get_2darray(Spool_Parts,k,7);
               y4 = get_2darray(Spool_Parts,k,8);
               z4 = get_2darray(Spool_Parts,k,9);
               dis1_3 = Get_Point_Distance(x1,y1,z1,x3,y3,z3);
               dis1_4 = Get_Point_Distance(x1,y1,z1,x4,y4,z4);
               dis2_3 = Get_Point_Distance(x2,y2,z2,x3,y3,z3);
               dis2_4 = Get_Point_Distance(x2,y2,z2,x4,y4,z4);
               if(dis1_3 < dis | dis1_4 < dis | dis2_3 < dis | dis2_4 < dis){
                  mto =  get_2darray(Spool_Parts,k,0);
                  if(mto != 10000){
                     find_mto = 1;
                  }
               }
            }
         }
      }
   }
   if(find_mto){
      put_2darray(Spool_Parts,i,0,mto);
   }
   else{
      mto = mto_number;
      put_2darray(Spool_Parts,i,0,mto);
      mto_number = mto_number + 1;
   }
   for(k=0;k<Spool_Part_Number;k=k+1;){
      if(k != i){
         part_type = get_2darray(Spool_Parts,k,1);
         if(part_type == "FLANGE"){
            x3 = get_2darray(Spool_Parts,k,4);
            y3 = get_2darray(Spool_Parts,k,5);
            z3 = get_2darray(Spool_Parts,k,6);
            x4 = get_2darray(Spool_Parts,k,7);
            y4 = get_2darray(Spool_Parts,k,8);
            z4 = get_2darray(Spool_Parts,k,9);
            dis1_3 = Get_Point_Distance(x1,y1,z1,x3,y3,z3);
            dis1_4 = Get_Point_Distance(x1,y1,z1,x4,y4,z4);
            dis2_3 = Get_Point_Distance(x2,y2,z2,x3,y3,z3);
            dis2_4 = Get_Point_Distance(x2,y2,z2,x4,y4,z4);
            if(dis1_3 < dis | dis1_4 < dis | dis2_3 < dis | dis2_4 < dis){
               put_2darray(Spool_Parts,k,0,mto);
            }
         }
      }
   }
   return(0);
}

get_check_distance(i)
{
   part_id = get_2darray(Spool_Parts,i,3);
   size = 1 * DM_PARTID_DATA(part_id, "D31");
   check_size = 1.5*size;
   return(check_size);
}


/*获取管段零件表信息及零件号标注相关信息*/
/*零件表内容
0 - mto number       零件编号
1 - description      零件描述   长度或者数量
2 - size             规格
3 - material         材料
4 - Length/area      长度/面积
5 - Weight           重量
*/
/*零件标注信息内容
0 - part number   零件编号
1 - anno_x        零件标注点X坐标
2 - anno_y        零件标注点Y坐标
3 - anno_z        零件标注点Z坐标
*/
get_mto_table()
{
   /*定义用于临时保存零件信息的数组*/
   free_2darray(Mto_Table);
   free_2darray(Mto_Label_Table);
   Mto_Table = alloc_2darray(Mto_Number,6);
   Mto_Label_Table = alloc_2darray(Mto_Number,4);
   for(i=0;i<Mto_Number;i=i+1;){
      get_mto = 1;
      for(k=0;k<Spool_Part_Number;k=k+1;){
         mto_number = get_2darray(Spool_Parts,k,0);
         if(mto_number == i+1){
            if(get_mto){
               get_part_information(i,k);
               get_part_label_information(i,k);
               get_mto = 0;
            }
            else{
               part = get_2darray(Spool_Parts,k,2);
               part_type = get_2darray(Spool_Parts,k,1);
               /*汇总长度或者面积*/
               if(part_type == "COMP"){
                  quan = String_To_Float(PM_GET_OBJDATA(part,0,MMT_TAG_HVAC_SURFACE_AREA));
               }
               else{
                  quan = String_To_Float(PM_GET_OBJDATA(part,0,MMT_TAG_LENGTH));
               }
               quan = get_2darray(Mto_Table,i,4) + quan;
               put_2darray(Mto_Table,i,4,quan);
               /*汇总重量*/
               weight = String_To_Float(PM_GET_OBJDATA(part,0,"MAS"));
               weight = get_2darray(Mto_Table,i,5) + weight;
               put_2darray(Mto_Table,i,5,weight);
            }
         }
      }
   }
   return(0);
}

get_part_information(i,k)
{
   put_2darray(Mto_Table,i,0,ITOASCII(i+1));

   part_id = get_2darray(Spool_Parts,k,3);
   part = get_2darray(Spool_Parts,k,2);
   /*零件描述*/
   description = DM_PARTID_DATA(part_id,"DE");
   if(!ISSTRING(description)){
      description = "Unset";
   }
   put_2darray(Mto_Table,i,1,description);

   /*零件规格*/
   size = DM_PARTID_DATA(part_id,"DD");
   if(!ISSTRING(size)){
      size = "Unset";
   }
   put_2darray(Mto_Table,i,2,size);

   /*零件材料*/
   material = DM_PARTID_DATA(part_id,"MC");
   if(!ISSTRING(material)){
      material = "Unset";
   }
   put_2darray(Mto_Table,i,3,material);

   /*零件长度或者面积*/
   part_type = get_2darray(Spool_Parts,k,1);
   if(part_type == "COMP"){
      quan = PM_GET_OBJDATA(part,0,MMT_TAG_HVAC_SURFACE_AREA);
   }
   else{
      quan = PM_GET_OBJDATA(part,0,MMT_TAG_LENGTH);
   }
   if(ISINT(quan)){
      quan = "0.0";
   }
   put_2darray(Mto_Table,i,4,String_To_Float(quan));

   /*零件重量*/
   weight = PM_GET_OBJDATA(part,0,"MAS");
   if(ISINT(weight)){
      weight = "0,0";
   }
   put_2darray(Mto_Table,i,5,String_To_Float(weight));

   return(0);
}

get_part_label_information(i,k)
{
   put_2darray(Mto_Label_Table,i,0,ITOASCII(i+1));
   put_2darray(Mto_Label_Table,i,1,get_2darray(Spool_Parts,k,4));
   put_2darray(Mto_Label_Table,i,2,get_2darray(Spool_Parts,k,5));
   put_2darray(Mto_Label_Table,i,3,get_2darray(Spool_Parts,k,6));
   return(0);
}

get_connection_table()
{
	/*
	**0   int      connection point number;
	**1   float    connection point coordinate x;
	**2   float    connection point coordinate y;
	**3   float    connection point coordinate z;
	**4   float    connection point normal vector dx;
	**5   float    connection point normal vector dy;
	**6   float    connection point normal vector dz;
	**7   string   connection name (spool name or hvac line name or equipment name);
	**8   float    connection point width vector dx;
	**9   float    connection point width vector dy;
	**10  float    connection point width vector dz;
	**11  float    connection point width;
	**12  float    connection point height;
	*/
	connect_table = alloc_2darray(Max_Spool_Connection_Points,13);
	connection_number = 0;
	for(i=0;i<Spool_Part_Number;i=i+1;){
		part_type = get_2darray(Spool_Parts,i,1);
		if(part_type == "COMP"){
			part = get_2darray(Spool_Parts,i,2);
			point_number = PM_GET_NR_OF_CONPNTS(part);
			for(j=1;j<=point_number;j=j+1;){
				node_id = 0;
				connected_obj = PM_GET_CONNECTED_OBJECT(part, j, node_id);
				if(!ISINT(connected_obj)){
					check = if_spool_part(connected_obj);
					if(!check){
					get_connection_point_data(connect_table,connection_number,part,j,connected_obj);
					}
					}
					else{
						face_type = PM_GET_CONPNT_DATA(part,j,"ft1");
						if(face_type != "Auxiliary point"){
						get_connection_point_data(connect_table,connection_number,part,j,"NULL");
					}
				}
			}
		}
	}
   if(Debug){
      print_connection_info(connect_table,connection_number);
   }

   /*save connection point data to global array*/
   free_2darray(Connection_Points);
   Connection_Points = alloc_2darray(connection_number,13);
   Connection_Number = connection_number;
   for(i=0;i<connection_number;i=i+1){
      for(k=0;k<13;k=k+1;){
         value = get_2darray(connect_table,i,k);
         put_2darray(Connection_Points,i,k,value);
      }
   }

   /*如果多于两个连接点，将主管的连接点找出存入全局变量*/
   if(connection_number > 2){
      find_main_connection_point(connect_table,connection_number);
   }
   x1 = get_2darray(connect_table,0,1);
   y1 = get_2darray(connect_table,0,2);
   z1 = get_2darray(connect_table,0,3);
   name1 = get_2darray(connect_table,0,7);
   x2 = get_2darray(connect_table,1,1);
   y2 = get_2darray(connect_table,1,2);
   z2 = get_2darray(connect_table,1,3);
   name2 = get_2darray(connect_table,1,7);
   /*连接点标注信息*/
   put_2darray(Connection_Label_Table,0,0,"C1");
   put_2darray(Connection_Label_Table,0,1,x1);
   put_2darray(Connection_Label_Table,0,2,y1);
   put_2darray(Connection_Label_Table,0,3,z1);
   put_2darray(Connection_Label_Table,1,0,"C2");
   put_2darray(Connection_Label_Table,1,1,x2);
   put_2darray(Connection_Label_Table,1,2,y2);
   put_2darray(Connection_Label_Table,1,3,z2);
   /*连接表信息*/
   x_ref="";y_ref="";z_ref="";
   get_connection_ref(x1, y1, z1, x_ref, y_ref, z_ref);
   put_2darray(Connection_Table,0,0,"C1");
   put_2darray(Connection_Table,0,1,x_ref);
   put_2darray(Connection_Table,0,2,y_ref);
   put_2darray(Connection_Table,0,3,z_ref);
   put_2darray(Connection_Table,0,4,name1);
   x_ref="";y_ref="";z_ref="";
   get_connection_ref(x2, y2, z2, x_ref, y_ref, z_ref);
   put_2darray(Connection_Table,1,0,"C2");
   put_2darray(Connection_Table,1,1,x_ref);
   put_2darray(Connection_Table,1,2,y_ref);
   put_2darray(Connection_Table,1,3,z_ref);
   put_2darray(Connection_Table,1,4,name2);
   free_2darray(connect_table);
   return(0);
}

/*adjust width direction of connection point to put overall dimension at the same side*/
adjust_connection_point_data()
{
	/*get the center point of spool*/
	spool = Current_Spool_Handle;
	x0 = String_To_Float(PM_GET_OBJDATA(spool,0,MMT_TAG_COGX));
	y0 = String_To_Float(PM_GET_OBJDATA(spool,0,MMT_TAG_COGY));
	z0 = String_To_Float(PM_GET_OBJDATA(spool,0,MMT_TAG_COGZ));

	for(i=0;i<Connection_Number;i=i+1;){
		x1 = get_2darray(Connection_Points,i,1);
		y1 = get_2darray(Connection_Points,i,2);
		z1 = get_2darray(Connection_Points,i,3);
		dx = x0 - x1;
		dy = y0 - y1;
		dz = z0 - z1;
		VEC_UNITV(dx,dy,dz);
		w_dx = get_2darray(Connection_Points,i,8);
		w_dy = get_2darray(Connection_Points,i,9);
		w_dz = get_2darray(Connection_Points,i,10);
		angle = 0;
		GU_GetAngleBetweenTwoVectors(dx,dy,dz,w_dx,w_dy,w_dz,angle);
		if((angle > 0 & angle < 90) | (angle < 0 & angle > -90)){
			w_dx = - w_dx;
			w_dy = - w_dy;
			w_dz = - w_dz;
			put_2darray(Connection_Points,i,8,w_dx);
			put_2darray(Connection_Points,i,9,w_dy);
			put_2darray(Connection_Points,i,10,w_dz);
		}
	}
	return(0);
}

find_main_connection_point(connect_table,connection_number)
{
   temp = alloc_2darray(2,8);
   point1 = 0;
   point2 = 0;
   flag = 1;
   find_point = 0;
   while(flag){
      dx1 = get_2darray(connect_table,point1,4);
      dy1 = get_2darray(connect_table,point1,5);
      dz1 = get_2darray(connect_table,point1,6);
      for(i = point1+1;i<connection_number;i=i+1;){
         if(!find_point){
            dx2 = get_2darray(connect_table,i,4);
            dy2 = get_2darray(connect_table,i,5);
            dz2 = get_2darray(connect_table,i,6);
            dx = dx1 + dx2;
            dy = dy1 + dy2;
            dz = dz1 + dz2;
            value = dx*dx + dy*dy + dz*dz;
            if(value < 0.001){
               flag = 0;
               find_point = 1;
               point2 = i;
            }
         }
      }
      if(flag){
         point1 = point1 + 1;
      }
   }
   Connection_Point1 = point1;
   Connection_Point2 = point2;
   x = get_2darray(connect_table,point1,1);
   y = get_2darray(connect_table,point1,2);
   z = get_2darray(connect_table,point1,3);
   name = get_2darray(connect_table,point1,7);
   put_2darray(temp,0,1,x);
   put_2darray(temp,0,2,y);
   put_2darray(temp,0,3,z);
   put_2darray(temp,0,7,name);
   x = get_2darray(connect_table,point2,1);
   y = get_2darray(connect_table,point2,2);
   z = get_2darray(connect_table,point2,3);
   name = get_2darray(connect_table,point2,7);
   put_2darray(temp,1,1,x);
   put_2darray(temp,1,2,y);
   put_2darray(temp,1,3,z);
   put_2darray(temp,1,7,name);
   for(i=0;i<2;i=i+1;){
      x = get_2darray(temp,i,1);
      y = get_2darray(temp,i,2);
      z = get_2darray(temp,i,3);
      name = get_2darray(temp,i,7);
      put_2darray(connect_table,i,1,x);
      put_2darray(connect_table,i,2,y);
      put_2darray(connect_table,i,3,z);
      put_2darray(connect_table,i,7,name);
   }
   free_2darray(temp);
   return(0);
}

if_spool_part(connected_obj)
{
   check = 0;
   for(i=0;i<Spool_Part_Number;i=i+1;){
      part = get_2darray(Spool_Parts,i,2);
      if(connected_obj == part){
         check = 1;
      }
   }
   return(check);
}

get_connection_point_data(connect_table,connection_number,part,node_id,connected_obj)
{
	node_name = "";
	if(!ISSTRING(connected_obj)){
		node_name = get_connection_name(connected_obj);
		x = String_To_Float(PM_GET_CONPNT_DATA(part,node_id,"x"));
		y = String_To_Float(PM_GET_CONPNT_DATA(part,node_id,"y"));
		z = String_To_Float(PM_GET_CONPNT_DATA(part,node_id,"z"));
		fnr = String_To_Float(PM_GET_CONPNT_DATA(part,node_id,"fnr"));
		fns = String_To_Float(PM_GET_CONPNT_DATA(part,node_id,"fns"));
		dx = COS(fns)*COS(fnr);
		dy = COS(fns)*SIN(fnr);
		dz = SIN(fns);
		wxr = String_To_Float(PM_GET_CONPNT_DATA(part,node_id,"wxr"));
		wxs = String_To_Float(PM_GET_CONPNT_DATA(part,node_id,"wxs"));
		wdx = COS(wxs)*COS(wxr);
		wdy = COS(wxs)*SIN(wxr);
		wdz = SIN(wxs);
		adw_s = PM_GET_CONPNT_DATA(part,node_id,"adw");
		if(ISSTRING(adw_s)){
			adw = String_To_Float(adw_s);
		}
		else{
			adw = 0;
		}
		adh_s = PM_GET_CONPNT_DATA(part,node_id,"adh");
		if(ISSTRING(adh_s)){
			adh = String_To_Float(adh_s);
		}
		else{
			adh = 0;
		}
		put_2darray(connect_table,connection_number,0,connection_number);
		put_2darray(connect_table,connection_number,1,x);
		put_2darray(connect_table,connection_number,2,y);
		put_2darray(connect_table,connection_number,3,z);
		put_2darray(connect_table,connection_number,4,dx);
		put_2darray(connect_table,connection_number,5,dy);
		put_2darray(connect_table,connection_number,6,dz);
		put_2darray(connect_table,connection_number,7,node_name);
		put_2darray(connect_table,connection_number,8,wdx);
		put_2darray(connect_table,connection_number,9,wdy);
		put_2darray(connect_table,connection_number,10,wdz);
		put_2darray(connect_table,connection_number,11,adw);
		put_2darray(connect_table,connection_number,12,adh);
	}
	else{
		x = String_To_Float(PM_GET_CONPNT_DATA(part,node_id,"x"));
		y = String_To_Float(PM_GET_CONPNT_DATA(part,node_id,"y"));
		z = String_To_Float(PM_GET_CONPNT_DATA(part,node_id,"z"));
		fnr = String_To_Float(PM_GET_CONPNT_DATA(part,node_id,"fnr"));
		fns = String_To_Float(PM_GET_CONPNT_DATA(part,node_id,"fns"));
		dx = COS(fns)*COS(fnr);
		dy = COS(fns)*SIN(fnr);
		dz = SIN(fns);
		wxr = String_To_Float(PM_GET_CONPNT_DATA(part,node_id,"wxr"));
		wxs = String_To_Float(PM_GET_CONPNT_DATA(part,node_id,"wxs"));
		wdx = COS(wxs)*COS(wxr);
		wdy = COS(wxs)*SIN(wxr);
		wdz = SIN(wxs);
		adw_s = PM_GET_CONPNT_DATA(part,node_id,"adw");
		if(ISSTRING(adw_s)){
			adw = String_To_Float(adw_s);
		}
		else{
			adw = 0;
		}
		adh_s = PM_GET_CONPNT_DATA(part,node_id,"adh");
		if(ISSTRING(adh_s)){
			adh = String_To_Float(adh_s);
		}
		else{
			adh = 0;
		}
		put_2darray(connect_table,connection_number,0,connection_number);
		put_2darray(connect_table,connection_number,1,x);
		put_2darray(connect_table,connection_number,2,y);
		put_2darray(connect_table,connection_number,3,z);
		put_2darray(connect_table,connection_number,4,dx);
		put_2darray(connect_table,connection_number,5,dy);
		put_2darray(connect_table,connection_number,6,dz);
		put_2darray(connect_table,connection_number,7,node_name);
		put_2darray(connect_table,connection_number,8,wdx);
		put_2darray(connect_table,connection_number,9,wdy);
		put_2darray(connect_table,connection_number,10,wdz);
		put_2darray(connect_table,connection_number,11,adw);
		put_2darray(connect_table,connection_number,12,adh);
	}
	connection_number = connection_number + 1;
	return(0);
}

print_connection_info(connect_table,connection_number)
{
   U_MESSAGE("管端连接信息:");
   for(i=0;i<connection_number;i=i+1;){
      s1 = ITOASCII(get_2darray(connect_table,i,0));
      s2 = FTOASCII(get_2darray(connect_table,i,1));
      s3 = FTOASCII(get_2darray(connect_table,i,2));
      s4 = FTOASCII(get_2darray(connect_table,i,3));
      s9 = get_2darray(connect_table,i,7);
      if(ISINT(s9)){
         s9 = ITOASCII(s9);
      }
      info = s1 + ":x=" + s2 + ";y=" + s3 + ";z=" + s4 + ";name=" + s9;
      U_MESSAGE(info);
   }
}

get_connection_name(conn_obj)
{
	type = PM_GET_OBJDATA(conn_obj, 0, MMT_TAG_OBJTYPE);
	/*连接设备*/
	if(type == "1"){
	   /*获取设备的ID*/
	   nam = PM_GET_OBJDATA(conn_obj, 0, ".n5");
   	if(ISSTRING(nam)){
   		return("设备:" + nam);
   	}
   	else{
   	   /*获取设备模型的名字*/
   	   nam = PM_GET_OBJDATA(conn_obj, 0, "nam");
      	if(ISSTRING(nam)){
      		return("设备:" + nam);
      	}
      	else{
   	      return("设备:未命名");
   	   }
   	}
	}
	/*连接标准零件*/
	else if(type == "2"){
		vpo = PM_GET_OBJDATA(conn_obj, 0, "vpo");
		if(ISSTRING(vpo)){
			return("阀件:" + vpo);
		}
		else {
			ipo = PM_GET_OBJDATA(conn_obj, 0, "ipo");
			if(ISSTRING(ipo)){
				return("仪表:" + ipo);
			}
			else{
			      return("");
			}
		}
	}
	/*连接风管零件*/
	else if(type == "6"){
	   spool_number = PM_GET_OBJDATA(conn_obj, 0, MMT_COSA_SPOOL_NAME);
	   doc_name = PM_GET_OBJDATA(conn_obj, 0, DocName);
	   line = PM_GET_OBJDATA(conn_obj,0,MMT_TAG_DUCT_LINE_NAME);
	   if(ISSTRING(spool_number) & ISSTRING(doc_name) & ISSTRING(line)){
	      res = doc_name + "-" + line + "-" + spool_number;
	      return(res);
	   }
	   else if(ISSTRING(line)){
	      return(line);
	   }
	   else{
	      return("");
	   }
	}
	/*连接其它对象*/
	else{
	   nam = PM_GET_OBJDATA(conn_obj, 0, "nam");
   	if(ISSTRING(nam)){
   		return(nam);
   	}
   	else{
   	   return("");
   	}
   }
   return("");
}

get_connection_ref(int x0, int y0, int z0, string x_ref, string y_ref, string z_ref)
{
   int x_off,y_off,z_off;
   x_off = 0;y_off = 0;z_off = 0;
   GetReferenceCoords(x0, y0, z0, x_ref, x_off, y_ref, y_off, z_ref, z_off);
   if(x_off > 0){
      x_ref = x_ref + "+" + ITOASCII(x_off);
   }
   else if(x_off < 0){
      x_ref = x_ref + ITOASCII(x_off);
   }
   if(y_off > 0){
      y_ref = y_ref + "+" + ITOASCII(y_off);
   }
   else if(y_off < 0){
      y_ref = y_ref + ITOASCII(y_off);
   }
   if(z_off > 0){
      z_ref = z_ref + "+" + ITOASCII(z_off);
   }
   else if(z_off < 0){
      z_ref = z_ref + ITOASCII(z_off);
   }
   return(0);
}

/*获取零件的描述信息*/
/*type参数暂时不用，将来可能用于区分不同类型的零件需要不同的描述信息*/
get_part_description(pipe,nth_part,type)
{
   part_id = PM_GET_OBJDATA(pipe,nth_part,MMT_TAG_PARTID);
   chinese_description = DM_PARTID_DATA(part_id,"CHN");
   default_description = DM_PARTID_DATA(part_id,"DE");
   size_description = DM_PARTID_DATA(part_id,"DD");
   description = "";
   if(chinese_description != ""){
      description = chinese_description + " " + size_description;
   }
   else{
      description = default_description + " " + size_description;
   }
   description = TRANS(description,"\u00F8","D");

   /*添加预制弯头的角度*/
   if(type == "ELBOW"){
      degree = String_To_Float(PM_GET_OBJDATA(pipe,nth_part,MMT_TAG_CRVANGLE));
      degree_s = "";
      S_PRINTF(degree_s, "%.0f", degree);
      description = description + " " + degree_s + "度";
   }


   return(description);
}

draw_mto_table()
{
   if(Mto_Number == 0){
      return(0);
   }


	DW_COLOR(Mto_Table_Line_Colour);
	DW_LTYPE(Mto_Table_Line_Type,Mto_Table_Pattern_Length);

	/*绘制横线*/
	line_number = Mto_Number;
   for(i=0;i<line_number;i=i+1;){
      x1 = Mto_Table_Orign_X;
      x2 = Mto_Table_Orign_X + Mto_Table_W;
      y1 = Mto_Table_Orign_Y - (i + 1) * Mto_Table_H;
      y2 = y1;
      DW_POLY(x1,y1,x2,y2);
   }

	/*绘制竖线*/
	h1 = line_number * Mto_Table_H;
   x1 = Mto_Table_Orign_X;
   y1 = Mto_Table_Orign_Y;
   x2 = x1;
   y2 = y1 - h1;
   DW_POLY(x1,y1,x2,y2);
   x1 = x1 + Mto_Table_Column1_W;
   x2 = x1;
   DW_POLY(x1,y1,x2,y2);
   x1 = x1 + Mto_Table_Column2_W;
   x2 = x1;
   DW_POLY(x1,y1,x2,y2);
   x1 = x1 + Mto_Table_Column3_W;
   x2 = x1;
   DW_POLY(x1,y1,x2,y2);
   x1 = x1 + Mto_Table_Column4_W;
   x2 = x1;
   DW_POLY(x1,y1,x2,y2);
   x1 = x1 + Mto_Table_Column5_W;
   x2 = x1;
   DW_POLY(x1,y1,x2,y2);
   x1 = x1 + Mto_Table_Column6_W;
   x2 = x1;
   DW_POLY(x1,y1,x2,y2);

   /*写材料表内容*/
   DW_COLOR(Mto_Table_Text_Colour);
	DW_TSIZE(Mto_Table_Text_Height);
	DW_TATTR(0.0,0.0,4);
   for(i=0;i<Mto_Number;i=i+1;){
      x = Mto_Table_Orign_X + 1;
      y = Mto_Table_Orign_Y - Mto_Table_H * (i + 0.5);
      text = get_2darray(Mto_Table,i,0);
      DW_TEXT(x, y, text);

      x = x + Mto_Table_Column1_W;
      y = Mto_Table_Orign_Y - Mto_Table_H * (i + 0.5);
      text = get_2darray(Mto_Table,i,1);
      DW_TEXT(x, y, text);

      x = x + Mto_Table_Column2_W;
      y = Mto_Table_Orign_Y - Mto_Table_H * (i + 0.5);
      text = get_2darray(Mto_Table,i,2);
      DW_TEXT(x, y, text);

      x = x + Mto_Table_Column3_W;
      y = Mto_Table_Orign_Y - Mto_Table_H * (i + 0.5);
      text = get_2darray(Mto_Table,i,3);
      DW_TEXT(x, y, text);

      x = x + Mto_Table_Column4_W;
      y = Mto_Table_Orign_Y - Mto_Table_H * (i + 0.5);
      valve = get_2darray(Mto_Table,i,4);
      unit = " mm";
      if(valve > 10000){
         valve = valve / 1000000;
         unit = " m2";
         text = "";
         S_PRINTF(text, "%.2f", valve);
      }
      else{
         text = "";
         S_PRINTF(text, "%.0f", valve);
      }

      text = text + unit;
      DW_TEXT(x, y, text);

      x = x + Mto_Table_Column5_W;
      y = Mto_Table_Orign_Y - Mto_Table_H * (i + 0.5);
      valve = get_2darray(Mto_Table,i,5);
      text = "";
      S_PRINTF(text, "%.2f", valve);
      text = text + " kg";
      DW_TEXT(x, y, text);

   }
}

/*Rainbow管端连接表*/
draw_connection_table()
{
/*
	style_name = "";
	drafting_style = GetFirstDraftingStyle(style_name);
   dw = PM_START_PAGE_ANNOTATION(style_name);
   DW_ACTIVATEVIEW(dw);

   InitDrawingSettings();
*/
	DW_COLOR(Connection_Table_Text_Colour);
	DW_LTYPE(Connection_Table_Line_Type,Connection_Table_Pattern_Length);
   /*写连接表内容*/
	DW_TATTR(0.0,0.0,4);

	text = get_2darray(Connection_Table,0,1);
	x = 108;
	y = 34.5;
	DW_TEXT(x, y, text);

	text = get_2darray(Connection_Table,0,2);
	x = 128;
	y = 34.5;
	DW_TEXT(x, y, text);

	text = get_2darray(Connection_Table,0,3);
	x = 145.5;
	y = 34.5;
	DW_TEXT(x, y, text);

	text = get_2darray(Connection_Table,0,4);
	x = 167;
	y = 34.5;
	DW_TEXT(x, y, text);

	text = get_2darray(Connection_Table,1,1);
	x = 108;
	y = 29.5;
	DW_TEXT(x, y, text);

	text = get_2darray(Connection_Table,1,2);
	x = 128;
	y = 29.5;
	DW_TEXT(x, y, text);

	text = get_2darray(Connection_Table,1,3);
	x = 145.5;
	y = 29.5;
	DW_TEXT(x, y, text);

	text = get_2darray(Connection_Table,1,4);
	x = 167;
	y = 29.5;
	DW_TEXT(x, y, text);

   PM_TERMINATE_PAGE_ANNOTATION(1);
}

main()
{
   init();
	mainform  = create_top_frame();
	Panel_upperpart = create_panel_upperpart(mainform);
	DisplayGrid  = create_grid(mainform);
	command = create_command(mainform);
	set_default();

	MainWindow = mainform;

	W_MAP_FRAME(mainform);
	W_RUN_FRAME(mainform);
	W_UNMAP_FRAME(mainform);
	W_DESTROY_FRAME(mainform);
}

exit()
{
   current_drawing = PM_GET_ACTIVE_DRW_NAME();
	if(current_drawing != ""){
	   PM_SAVE_ACTIVE_DRW();
	   PM_CHECK_IN_ACTIVE_DRW();
	   PM_CLOSE_ACTIVE_DRW();
	}
	/* 将已经加亮的模型恢复原来的颜色 */
	model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
	for (i = 0 ; i < model_number; i = i + 1){
		model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
		Highlight_Object(model,FALSE);
	}
	/* 释放相关资源 */
	PM_FREE_SET(Object_List);
	PM_FREE_SET(High_Light_List);
	PM_FREE_SET(Selected_Objects);
	PM_FREE_SET(Cur_Spool_Model_Set);
	A_FREE(Sketch_Tag_Array);
	A_FREE(Column_Description_Array);
	A_FREE(View_Handles);
	A_FREE(View_Names);
	A_FREE(Duct_Parts);
	free_2darray(Object_Info);
	free_2darray(View_Info);
	free_2darray(Mto_Table);
	free_2darray(Mto_Label_Table);
	free_2darray(Label_Table);
	free_2darray(View_Positions);
	free_2darray(Connection_Label_Table);
	free_2darray(Connection_Table);
	free_2darray(Dim_Table);
	free_2darray(Spool_Parts);
	free_2darray(Connection_Points);
	free_2darray(Overall_Dims);
	free_2darray(Overall_Dim_Points);
	free_2darray(Angle_Dims);
	free_2darray(Radius_Dims);
}

page_number_handler(item, event_type, dummy)
{
   set_page_number();
   return(0);
}

set_page_number()
{
   st = 0;
   start_page = W_GET_NUMERIC_VALUE(Start_Page, st);
   if (st != 0){
      W_SET_NUMERIC_VALUE(Start_Page, 2);
      start_page = 2;
   }
   support_number = PM_NR_MEMBERS_IN_SET(Object_List);
   total_number = start_page + support_number - 1;
   for(i=0;i<Object_Number;i=i+1){
      W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, i, W_LISTW_COLUMN, 6, W_LISTW_STRING, ITOASCII(total_number));
      W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, i, W_LISTW_COLUMN, 5, W_LISTW_STRING, ITOASCII(start_page + i));
   }
   return(0);
}