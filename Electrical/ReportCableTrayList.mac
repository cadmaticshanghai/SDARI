/* $Id: ReportCableTrayList.mac,v1.0.0 2015/12/25 Wallis.liu $ */

/*
**	这个程序用于浏览及生成电缆支撑件和贯通件制作图册.
*/

#include "include/dmutil.h"
#include "include/win.h"
#include "include/win_panel.h"
#include "include/PmMgeTags.h"
#include "include/pm.h"
#include "include/pm_errors.h"
#include "include/dm_errors.h"
#include "include/pm_drawings.h"
#include "include/pm_core_tags.h"
#include "include/array.mac"
#include "include/cos.h"
#include "include/dw.h"
#include "include/pm_annot.h"
#include	"include/dm_cos_schema.h"
#include	"include/geoutils.h"
#include "include/PmPipingUtils.h"
#include "opt/pm/EloTools/include/viewutilsELO.h"
#include "include/g2d_ext2df.h"
#include	"include/quants.h"
#include "include/pi_math.mac" 
#include "include/pi.h"
#include "include/PmDirectionUtils.h"

global int  Debug = 1; 

#include "$MarineToolkit/Electrical/ElectricalRepors.h"
#include "$MarineToolkit/Include/String_Utility.h"
#include "$MarineToolkit/Include/Common_Utility.h"
#include "$MarineToolkit/Include/Math_Utility.h"

/*
**脚本语言中似乎无法直接获得一个数组的实际长度，定义一个全局变量用于保存生产信息的数量
*/

#define  Report_Column_Number 8

/*
**定义界面语言
**define interface language
*/
global handle  Block_Name,Planning_Unit,Model_Description;
global handle  DisplayGrid;
global handle  NULL_HANDLE = 0;
global int     Grid_SelectedItem = 0;
global int     Grid_SortColumn = -1;
global int     Grid_SortDirection = 1;
global handle  Object_List;          	    /*模型对象列表*/
global int     Object_Number=0;           /*模型对象数量*/
global handle  Report_Info;				/*报表信息列表*/
global handle  Report_Objects;            /*保存报表行对应的模型对象*/
global int     Report_Row_Number = 0;	    /*报表行数*/
global handle  High_Light_List;           /*模型加亮列表*/
global handle  Selected_Objects;
global int     Selected_Objects_Number = 0;
global int     AutoScale = 0;
global int     AutoHighLight = 0;
global handle  MainWindow;
global handle  Grid_Title;
global handle  Report_Path,Report_Template;
global string   DataFileName = "C:\\TEMP\\cable_tray_report.txt";

/*零件表相关设置*/
global float Table_Orign_X = 22;
global float Table_Orign_Y = 252;
global float Table_W = 180;
global float Table_H = 8;
global float Table_Column1_W = 27;
global float Table_Column2_W = 63.5;
global float Table_Column3_W = 14;  
global float Table_Column4_W = 26; 
global float Table_Column5_W = 50;
global float Table_Column6_W = 20;
global float Table_Column7_W = 20; 
global float Table_Column8_W = 20;
global float Table_Column9_W = 20;
global float Table_Column10_W = 20; 
global float Table_Text_Colour = 2;
global float Table_Text_Height = 2.5;

global int  Column_Number_Per_Page = 29;                           /*每页最大行数 */
global string  Cable_Tray_List_Icgd_Name = "SDARI_E_CableList";    /*电缆支撑件和贯通件制作图册icgd */

/*获取零件表列的位置*/
/*L 左对齐，M 居中，R 右对齐*/
get_column_x_position(col_num,align_type)
{
    vector = DM_VECTOR_CREATE();
    DM_VECTOR_PUSH_BACK(vector, Table_Column1_W);
    DM_VECTOR_PUSH_BACK(vector, Table_Column2_W);
    DM_VECTOR_PUSH_BACK(vector, Table_Column3_W);
    DM_VECTOR_PUSH_BACK(vector, Table_Column4_W);
    DM_VECTOR_PUSH_BACK(vector, Table_Column5_W);
    DM_VECTOR_PUSH_BACK(vector, Table_Column6_W);
    DM_VECTOR_PUSH_BACK(vector, Table_Column7_W);
    DM_VECTOR_PUSH_BACK(vector, Table_Column8_W);
    DM_VECTOR_PUSH_BACK(vector, Table_Column9_W);
    DM_VECTOR_PUSH_BACK(vector, Table_Column10_W);
    
    posx = Table_Orign_X;
    if(col_num<DM_VECTOR_SIZE(vector)){
        for (i=0;i<col_num;i=i+1){
            posx = posx + DM_VECTOR_GET(vector,i);
        }
        posx = posx - 0.5*DM_VECTOR_GET(vector,col_num-1);
    }
    
    /*默认为居中对齐*/
    DW_TATTR(0.0,0.0,5);
    if(align_type=="L"){
        posx = posx - 0.5*DM_VECTOR_GET(vector,col_num-1)+0.5;
        DW_TATTR(0.0,0.0,4);  
    }
    else if(align_type=="R"){
        posx = posx + 0.5*DM_VECTOR_GET(vector,col_num-1)-0.5;
        DW_TATTR(0.0,0.0,6);
    }
    DM_VECTOR_DELETE(vector); 
    return(posx);
}

/*
**初始化相关对象
*/
init()
{	
	Report_Info = alloc_2darray(1,1);
	Report_Objects = A_ALLOC(1);

	/*初始化模型集合*/
	Object_List = PM_INIT_SET();
	/*初始化加亮模型集合*/
	High_Light_List = PM_INIT_SET();
	/*初始化选中的模型集合*/
	Selected_Objects = PM_INIT_SET();
	
	W_SET_PANELITEM_ARGS(Report_Path, W_PANEL_VALUE, "C:/TEMP/");
	W_SET_PANELITEM_ARGS(Report_Template, W_PANEL_VALUE, "P:/报表模板/电气支撑件和贯通件制作图册.xlsx");
}

init0()
{	
	Grid_Title = A_ALLOC(Report_Column_Number, "STRING");
	A_PUT(Grid_Title,0,"分段");
	A_PUT(Grid_Title,1,"托盘");
	A_PUT(Grid_Title,2,"序号");
	A_PUT(Grid_Title,3,"底座号");
	A_PUT(Grid_Title,4,"名称");
	A_PUT(Grid_Title,5,"数量");
	A_PUT(Grid_Title,6,"重量");
	A_PUT(Grid_Title,7,"备注");
}

/*
**Get the selected objects in grid
*/
get_selected_items(handle wobj)
{
	PM_SETOP_SUB(Selected_Objects, Selected_Objects);
	selected_rows = W_GET_WINDOW_ARG(wobj, W_LISTW_MSVALUE);
	total_lines = STRLEN(selected_rows);
	k = 0;
	for (i = 0; i < total_lines; i = i + 1){
		temp_string = SUBSTRING(selected_rows,i);
		flag = HEAD(temp_string,1);
		if (flag == "1"){
			W_SET_WINDOW_ARGS(wobj, W_LISTW_ROW, i);
			selected_row = W_GET_WINDOW_ARG(wobj, W_LISTW_ITEMID);	
			/* model_handle = A_GET(Report_Objects, selected_row);	 */
			/* PM_ADD_OBJECT_TO_SET(model_handle,Selected_Objects); */
			k = k + 1;
		}
	}
	Selected_Objects_Number = k;
	return (0);
}

model_list_mode(item, event_type, selection)
{
	if (selection == 0){
		Model_Add_Mode = 0;
	}
	else{
		Model_Add_Mode = 1;
	}
	return(0);
}

get_summation_info(report)
{
    /*汇总 判断相同的列*/
    judgecols = A_ALLOC(3, "INT");
	A_PUT(judgecols,0,0);
    A_PUT(judgecols,1,1);
	A_PUT(judgecols,2,4);
    /*汇总 需要汇总的列*/
    sumcols = A_ALLOC(2, "INT");
	A_PUT(sumcols,0,5);
	A_PUT(sumcols,1,6);
    
    report = summation(report, judgecols, sumcols, 0);
    
    A_FREE(judgecols);
    A_FREE(sumcols);
    return(0);
}

/*
**获取全局变量Object_List中保存的对象的信息，并将相关信息保存到全局变量ReportInfo中；
*/
get_report_info()
{
    /*define a temperary array for report information*/
	report = alloc_2darray(3000,Report_Column_Number);
	parts = A_ALLOC(3000);
	row_number = 0;
	for (i = 0; i < Object_Number; i = i + 1;){
		object = PM_GET_MEMBER_IN_SET(Object_List, i);	
		/* get part information and save to local array */
		get_object_info(object, report, row_number, parts);
	}	
    
    /*判断相同的列 数量重量汇总*/
    get_summation_info(report);
    
	/*save report information to global array*/
	Report_Row_Number = nrows_2darray(report);
    free_2darray(Report_Info);    
    Report_Info = alloc_2darray(Report_Row_Number,Report_Column_Number);
	for(i=0;i<Report_Row_Number;i=i+1;){
        for(j=0;j<Report_Column_Number;j=j+1;){
	      value = get_2darray(report,i,j);
	      put_2darray(Report_Info, i, j, value);	
        }
	}
	A_FREE(parts);
	free_2darray(report);	
	return(0);
}

/*获取指定模型的信息*/
get_object_info(object,report,row_number,parts)
{
	/*分段编号*/
	block = get_block_name(object);
	put_2darray(report,row_number,0,block); 
   
	/*托盘编号*/
	planning_unit = get_planning_unit(object);
	put_2darray(report,row_number,1,planning_unit);  
                
	/*序号*/          
	put_2darray(report,row_number,2,ITOASCII(row_number+1)); 
    
	/*底座号*/ 
	put_2darray(report,row_number,3,""); 
   
	/*名称*/ 
    descr = get_object_description(object);
    put_2darray(report,row_number,4,descr);
   
    /*数量*/  
    put_2darray(report,row_number,5,"1");
   
    /*重量*/
	weight = get_weight_info(object);
	put_2darray(report,row_number,6,weight);
   
	/*备注*/ 
	remark = get_remark_info(object);
	put_2darray(report,row_number,7,remark);
    
    A_PUT(parts,row_number,object);
    row_number = row_number + 1; 
}

/*获取指定模型的重量*/
get_weight_info(object)
{
    weight = "";
    res = is_cabletray_part(object);
	if(res>0){
        mass = 0;
        tray_weight = PM_GET_OBJDATA(object,0, MMT_TAG_MASS);
        tray_mass = String_To_Float(tray_weight);
        tray_type = PM_GET_OBJDATA(object,0, Tag_Tray_Type);
        if(tray_type>0){
            mass = tray_mass * tray_type;
        }
        supp_group = PM_GET_OBJDATA(object,0, Tag_Tray_Group);
        if(ISSTRING(supp_group)){
            group_handle = PM_FIND_BY_NAME(supp_group);
            supp_weight = PM_GET_OBJDATA(group_handle,0, MMT_TAG_MASS);
            supp_mass = String_To_Float(supp_weight);
            mass = mass + supp_mass;
        }
	}
    else{
        weight = PM_GET_OBJDATA(object,0, MMT_TAG_MASS);
        mass = String_To_Float(weight);
    }
    S_PRINTF(weight,"%.2f",mass);
	return(weight);
}

/*获取指定模型的备注信息*/
get_remark_info(object)
{
    remark_info = "";
    value = PM_GET_OBJDATA(object,0, Tag_Tray_Remark);
    if(ISSTRING(value)){
        remark_info = value;
    }
	return(remark_info);
}

/*获取指定模型的分段*/
get_block_name(object)
{
    block_name = "Unset";
    /*测试发现需要将语句执行2次才能提取到数据*/
    value = PM_GET_OBJDATA(object,0,MMT_TAG_OBJECT_IN_BLOCK);
    value = PM_GET_OBJDATA(object,0,MMT_TAG_OBJECT_IN_BLOCK);
    if(ISSTRING(value)){
        block_name = value;
    }
    return(block_name);
}

/*获取指定模型的托盘*/
get_planning_unit(object)
{
    planning_unit = get_block_name(object);
    if(planning_unit!="Unset"){
        Set_Attribute_Value(object,Tag_PlanningUnit,planning_unit);
    }
	return(planning_unit);
}

/*获取指定模型的托盘*/
get_planning_unit_old(object)
{
    planning_unit = "Unset";
    value = PM_GET_OBJDATA(object,0,Tag_PlanningUnit);
    if(ISSTRING(value)){
        planning_unit = value;
    }
    else{
        planning_unit = get_block_name(object);
        if(planning_unit!="Unset"){
            Set_Attribute_Value(object,Tag_PlanningUnit,planning_unit);
        }
    }
	return(planning_unit);
}

/*获取指定模型的描述*/
get_object_description(object)
{
    descr = "未定义";
	part_type = PM_GET_OBJDATA(object,0, MMT_TAG_OBJTYPE);
	part_id   = PM_GET_OBJDATA(object,0, MMT_TAG_PARTID);
    
	/* 1.电缆托架 */
    res = is_cabletray_part(object);
	if(res==1){
		des = PM_GET_OBJDATA(object,0, Tag_Description);
		if(ISSTRING(des)) descr = des + "  (托架)";
	}
    else if(res==2){
		des = PM_GET_OBJDATA(object,0, Tag_Description);
		if(ISSTRING(des)) descr = des + "  (不锈钢托架)";
    }
	/* 2.贯通件 */
	else if(is_penetration_part(object)){
		des = PM_GET_OBJDATA(object,0, ".dG");
		if(ISSTRING(des)){
            des = get_string_split(des," ",1);
            descr = des + "  (贯通件)";
		}
	}
	/* 3.扁钢 */
	else if(is_flatbar_part(object)){
		pid = PM_GET_OBJDATA(object,0, "pid");
		if(ISSTRING(pid)){
            des = DM_PARTID_DATA(pid,"DD");
            if(ISSTRING(des)){
                descr = des + "  (扁钢)";
            }
		}
	}
	/* 3.电缆管 */
	else if(is_cabletube_part(object)){
		des = PM_GET_OBJDATA(object,0, ".dG");
		if(ISSTRING(des)){
            des = get_string_split(des," ",1);
            descr = des + "  (电缆管)";
		}
	}
	/* 4.填料函 */
	else if(is_stuffing_part(object)){
		des = PM_GET_OBJDATA(object,0, ".dG");
		if(ISSTRING(des)){
            des = get_string_split(des," ",1);
            descr = des + "  (填料函)";
		}
	}
    else{
        U_MESSAGE("未定义的零件类型+part_type");
    }
    return(descr);
}

/*
**将全局变量object_prod_info中保存的生产信息显示到列表中；
**根据全局变量Grid_SortColumn，Grid_SortDirection保存的信息对显示列表进行排序；
*/
publish_model_info()
{
	/* 将报表信息显示到窗口中 */	
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_DELETEROWS, -1); 
	for (i = 0; i < Report_Row_Number; i = i + 1;){
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_INSERTROWS, 1);
		for ( j = 0; j < Report_Column_Number; j = j + 1;){
			value = get_2darray(Report_Info,i,j);
			if (ISSTRING(value)){
				W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0, W_LISTW_COLUMN, j, W_LISTW_STRING, value);
			}
		}		
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ITEMID, i);		
	}
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 1);
	
	/* 自动调整列宽度 Adjust the width of column automatically*/
	for (i=0; i < Report_Column_Number; i = i + 1;){
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_COLUMN, i, W_LISTW_COLUMNWIDTH, -1);
	}
	/* 对生产信息列表进行排序 */
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_COLUMN, Grid_SortColumn, W_LISTW_SORT, Grid_SortDirection);
}

/* 创建顶层窗体 */
create_top_frame()
{
	mainform = W_INIT_FRAME();
	W_REALIZE_WINDOW(mainform,  W_FRAME_TITLE, "电缆支撑件和贯通件制作图册(托盘表)" );	
	return(mainform);
}

/* 创建显示报表内容的格栅 */
create_grid(main_form)
{
	wobj = W_ADD_WINDOW(main_form, W_MULTISELECT, "DisplayGrid"); 
	W_REALIZE_WINDOW(wobj,  W_FRAME_RIGHT_OF,    "Block_Name",
                            W_FRAME_BELOW,       "panel_upperpart",
                            W_LISTW_COLUMNS,     Report_Column_Number,
                            W_FRAME_SCROLLBAR,   W_SCROLLBAR_RIGHTEDGE,
                            W_LISTW_HEADER_MODE, W_LISTW_HEADER_BUTTONS,
                            W_LISTW_MODE_REPORT, 0,
                            W_FRAME_COLS,        73, 
                            W_FRAME_ROWS,        17,
                            W_LISTW_CALLBACK,    1);						   
	W_SET_WINDOW_HANDLER(wobj, "grid_handler");
	
	/*设置列标题*/	
	set_column_title(wobj, Grid_Title, Report_Column_Number);				
	return(wobj);
}

quit_handler(item, event_type, button_value)
{
	exit();
	U_MESSAGE("退出电缆托架托盘表窗口");
	return(99);
}

grid_handler(window, event_type, row, column, item_id)
{  	
	if (event_type == W_EVENT_ITEM_SELECTED) {
		/* 处理格栅的排序 */
		if (row < 0 & column >= 0) {
			sort_grid(column,window);
			auto_number();
		}
		else if(row >= 0 & column == 0){		
			/* 获取选中的模型 */				
			get_selected_items(DisplayGrid);			
			auto_highlight();
			auto_scale_model();			
		}
	}
	/* 处理双击数据行的事件 */
	else if (event_type == W_EVENT_ITEM_DOUBLECLICKED) {	
		/* 获取选中的模型 */			
		get_selected_items(DisplayGrid);			
		auto_highlight();
		auto_scale_model();			
	}
	return(0);
}

auto_highlight()
{
	/* 处理模型加亮 */
	if (AutoHighLight == 1){
		/* 将已经加亮的模型恢复原来的颜色 */
		model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			PM_HIGHLIGHT_OBJECT(model,0,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);
		PM_FREE_SET(temp);
		
		/* 加亮选中的模型 */
		model_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
		for (i = 0; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
			PM_HIGHLIGHT_OBJECT(model,0,TRUE);
			PM_ADD_OBJECT_TO_SET(model,High_Light_List);			
		}
	}
}

auto_scale_model()
{
	/* 处理模型自动缩放 */
	if (AutoScale == 1){				
        model_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
        if (model_number == 1){
            model_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,0);
            Auto_Scale(model_handle);
        }
	}
}

sort_grid(column,window)
{
	/* A column header was clicked; sort the items */
	if (Grid_SortColumn == column) {
		if (Grid_SortDirection == 0) {
			Grid_SortDirection = 1;
		}
		else {
			Grid_SortDirection = 0;
		}
	}
	else {
		Grid_SortDirection = 1;
	}
	Grid_SortColumn = column;
	W_SET_WINDOW_ARGS(window, W_LISTW_COLUMN, column, W_LISTW_SORT, Grid_SortDirection);
}

model_browsing_handler(item, event_type, button_value)
{
	W_UNMAP_FRAME(MainWindow);	
	selected_model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
	if (selected_model_number > 0){
		current_model = PM_GET_MEMBER_IN_SET(High_Light_List, 0);
		parts = PM_GET_OBJECTS_IN_GROUP(current_model);
		part = PM_GET_MEMBER_IN_SET( parts, 0);
		x0 = PM_GET_OBJDATA(part, 0, MMT_TAG_COGX);
		y0 = PM_GET_OBJDATA(part, 0, MMT_TAG_COGY);
		z0 = PM_GET_OBJDATA(part, 0, MMT_TAG_COGZ);
		x = SCAN_QUANT(1,x0);
		y = SCAN_QUANT(1,y0);
		z = SCAN_QUANT(1,z0);
		PM_SET_CURRENT_LOC(x, y, z);	
	}
	nth_part = 0;
	PM_PICK_OBJECT("浏览模型",nth_part);
	W_MAP_FRAME(MainWindow);
}

search_objects(item, event_type, button_value)
{   
    query = PM_INIT_QUERY("CABLETRAY", "EQUIPMENT");
	parts = PM_EXECUTE_QUERY(query);
	part_number = PM_NR_MEMBERS_IN_SET(parts);
	if (part_number <= 0){
		return 0;
	}

	filter_model(parts);
		
	/* 将获得的模型添加到全局变量Object_List中 */
    PM_FREE_SET(Object_List);
    Object_List = PM_INIT_SET();		
	Object_List = PM_COPY_SET(parts); 	
	Object_Number = PM_NR_MEMBERS_IN_SET(Object_List);
    
    get_report_info();
    publish_model_info(); 
    if(Object_Number > 0){
        auto_number();   
    }
    else{
        U_MESSAGE("没有符合条件的模型");
    }
}

filter_model_by_type(part)
{
    if(is_cabletray_part(part))    return(1);   /*电缆托架*/
    if(is_penetration_part(part))  return(1);   /*贯通件*/
    if(is_flatbar_part(part))      return(1);   /*扁铁*/
    if(is_cabletube_part(part))    return(1);   /*电缆管*/
    if(is_stuffing_part(part))     return(1);   /*填料函*/
    return(0);
}

filter_model(models)
{
	/* 获取过滤条件 Get filter conditions*/
	block_name    = W_GET_PANELITEM_ARG(Block_Name,W_PANEL_VALUE);
	planning_unit = W_GET_PANELITEM_ARG(Planning_Unit,W_PANEL_VALUE);	
    description   = W_GET_PANELITEM_ARG(Model_Description,W_PANEL_VALUE);
	temp = PM_INIT_SET();
	
	/* 过滤掉不符合条件的模型 */
	part_number = PM_NR_MEMBERS_IN_SET(models);	
	for (i = 0; i < part_number; i = i + 1;){	
        part = PM_GET_MEMBER_IN_SET(models,i);
        /* type = PM_GET_OBJDATA(part, 0, MMT_TAG_OBJTYPE); */
        if(filter_model_by_type(part)){
            /*个别零件有可能会因为位置的关系而没有这个属性值*/
            model_block_name = PM_GET_OBJDATA(part,0,MMT_TAG_OBJECT_IN_BLOCK);
            if(ISINT(model_block_name)){
                model_block_name = "Unset";
            }                                
            model_planning_unit = PM_GET_OBJDATA(part,0,Tag_PlanningUnit);
            if(ISINT(model_planning_unit)){
                model_planning_unit = "Unset";
            }
            model_descr = get_object_description(part);

            check_block =  PATTERN_MATCH(model_block_name,block_name);
            check_planning = PATTERN_MATCH(model_planning_unit,planning_unit);	
            check_descr = PATTERN_MATCH(model_descr,description);	
            if(check_block & check_planning & check_descr){		
                PM_ADD_OBJECT_TO_SET(part,temp);
            }
        }
	}
	PM_SETOP_SUB(models,models);
	PM_SETOP_OR(models,temp);
	PM_FREE_SET(temp);
	return(0);
}

/* 生成序号 */
auto_number()
{
    for(i=0;i<Report_Row_Number;i=i+1){
        W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, i, W_LISTW_COLUMN, 2, W_LISTW_STRING, ITOASCII(i+1));
    }
    return(0);
}

options_selected(item, event_type, dummy)
{
	s = W_GET_PANELITEM_ARG(item, W_PANEL_VALUE);
	if ( s == "00" ){
		AutoHighLight = 0;
		AutoScale = 0;	
		/* 将已经加亮的模型恢复原来的颜色 */
		model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			PM_HIGHLIGHT_OBJECT(model,0,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);	
		PM_FREE_SET(temp);		
	}
	else if( s == "10"){
		AutoHighLight = 1;
		AutoScale = 0;	
	}
	else if( s == "11"){
		AutoHighLight = 1;
		AutoScale = 1;	
	}
	else if( s == "01"){
		AutoHighLight = 0;
		AutoScale = 1;
		/* 将已经加亮的模型恢复原来的颜色 */
		model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			PM_HIGHLIGHT_OBJECT(model,0,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);
		PM_FREE_SET(temp);
	}		
	return(0);
}

create_panel_upperpart(mainform)
{
	panel_upperpart = W_ADD_WINDOW(mainform, W_PANEL, "panel_upperpart");
	W_REALIZE_WINDOW(panel_upperpart, W_FRAME_X,    0,
                                      W_FRAME_Y,    0,
                                      W_FRAME_ROWS, 2,
                                      W_FRAME_COLS, 70);
							          
	Block_Name = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Block_Name");
	W_REALIZE_PANELITEM(Block_Name, W_PANEL_ROW,      0, 
	                                W_PANEL_COL,      0,
                                    W_PANEL_LABEL,    "分段名称:      ",
                                    W_PANEL_LENGTH,   15,
                                    W_PANEL_VALUE,    "*",
                                    W_PANEL_CALLBACK, 1);
							        
	Planning_Unit = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Planning_Unit");
	W_REALIZE_PANELITEM(Planning_Unit,  W_PANEL_ROW,        0, 
	                                    W_PANEL_COL,        28,
                                        W_PANEL_LABEL,      "托盘代号:   ",
                                        W_PANEL_LENGTH,     15,
                                        W_PANEL_VALUE,      "*",
                                        W_PANEL_SENSITIVITY,1,
                                        W_PANEL_CALLBACK,   1);
                                        
	Model_Description = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Model_Description");
	W_REALIZE_PANELITEM(Model_Description,  W_PANEL_ROW,        1, 
                                            W_PANEL_COL,        0,
                                            W_PANEL_LABEL,      "描述名称:      ",
                                            W_PANEL_LENGTH,     15,
                                            W_PANEL_VALUE,      "*",
                                            W_PANEL_SENSITIVITY,1,
                                            W_PANEL_CALLBACK,   1);
                                        
	search_object = W_ADD_PANELITEM(panel_upperpart, W_PANEL_BUTTON, "search_object");
	W_REALIZE_PANELITEM(search_object,  W_PANEL_ROW, 	     0, 
	                                    W_PANEL_COL,         55,
                                        W_PANEL_BUTTONIMAGE, "查找模型", 
                                        W_PANEL_WIDTH,       15,
                                        W_PANEL_BUTTONVALUE, 210,
                                        W_PANEL_CALLBACK,    1,
                                        W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);
							            
	pick_object = W_ADD_PANELITEM(panel_upperpart, W_PANEL_BUTTON, "pick_object");						                  
	W_REALIZE_PANELITEM(pick_object,  W_PANEL_ROW, 	       1, 
	                                  W_PANEL_COL,         55,
                                      W_PANEL_BUTTONIMAGE, "选择模型", 
                                      W_PANEL_WIDTH,       15,
                                      W_PANEL_BUTTONVALUE, 210,
                                      W_PANEL_CALLBACK,    1,
                                      W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);							                  
							 		
	Options = W_ADD_PANELITEM(panel_upperpart, W_PANEL_TOGGLE, "options");
	W_REALIZE_PANELITEM(Options, W_PANEL_ROW,         1, 
                                 W_PANEL_COL,         28,
                                 W_PANEL_LABEL,       "",
                                 W_PANEL_CHOICESTRING,"自动加亮    ",
                                 W_PANEL_CHOICESTRING,"自动缩放    ",
                                 W_PANEL_VALUE,       "00",
                                 W_PANEL_SENSITIVITY, 0,
                                 W_PANEL_CHOICESTYLE, W_STYLE_PUSHBUTTONS,
                                 W_PANEL_CALLBACK,    1);			
					 			
	W_SET_PANELITEM_HANDLER(search_object, "search_objects");
	W_SET_PANELITEM_HANDLER(pick_object, "pick_objects");
	W_SET_PANELITEM_HANDLER(Options, "options_selected");
	return(panel_upperpart);
}

pick_objects(item, event_type, dummy)
{
    objects = PM_DEFINE_SET("请选择模型");
    if(!ISINT(objects)){
        /* 过滤掉不符合条件的模型 */
        temp = PM_INIT_SET();
        part_number = PM_NR_MEMBERS_IN_SET(objects);	
        for (i = 0; i < part_number; i = i + 1;){	
            part = PM_GET_MEMBER_IN_SET(objects,i);
            if(filter_model_by_type(part)){
                PM_ADD_OBJECT_TO_SET(part,temp);
            }
        }
        PM_FREE_SET(objects);
        
        /* 将获得的模型添加到全局变量Object_List中 */
        PM_FREE_SET(Object_List);
        Object_List = PM_INIT_SET();		
        Object_List = PM_COPY_SET(temp); 	
        Object_Number = PM_NR_MEMBERS_IN_SET(Object_List);
        
        get_report_info();
        publish_model_info(); 
        if(Object_Number > 0){
            auto_number();   
        }
        else{
            U_MESSAGE("没有符合条件的模型");
        }
        PM_FREE_SET(temp);    
    }
}

create_panel_underpart(mainform)
{	
	panel_underpart = W_ADD_WINDOW(mainform, W_PANEL, "panel_underpart");
	W_REALIZE_WINDOW(panel_underpart,   W_FRAME_X, 0,
							            W_FRAME_Y, 0);

	Report_Template = W_ADD_PANELITEM(panel_underpart, W_PANEL_FILL, "Report_Template");
	W_REALIZE_PANELITEM(Report_Template,   W_PANEL_ROW, 20, 
	                                       W_PANEL_COL, 0,
                                           W_PANEL_LABEL, "报表模板:     ",
                                           W_PANEL_LENGTH, 50,
                                           W_PANEL_VALUE, "*",
                                           W_PANEL_SENSITIVITY, 0,
                                           W_PANEL_CALLBACK, 1);

	select_template = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "select_template");
	W_REALIZE_PANELITEM(select_template,   W_PANEL_ROW, 	      20, 
	                                       W_PANEL_COL,         61,
                                           W_PANEL_BUTTONIMAGE, "选择模板", 
                                           W_PANEL_WIDTH,       10,
                                           W_PANEL_BUTTONVALUE, 202,
                                           W_PANEL_CALLBACK,    1,
                                           W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);							                     

	Report_Path = W_ADD_PANELITEM(panel_underpart, W_PANEL_FILL, "Report_Path");
	W_REALIZE_PANELITEM(Report_Path, W_PANEL_ROW,         21, 
	                                 W_PANEL_COL,         0,
                                     W_PANEL_LABEL,       "保存路径:     ",
                                     W_PANEL_LENGTH,      50,
                                     W_PANEL_VALUE,       "*",
                                     W_PANEL_SENSITIVITY, 0,
                                     W_PANEL_CALLBACK,    1);	
							                     
	select_path = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "select_path");
	W_REALIZE_PANELITEM(select_path, W_PANEL_ROW, 	      21, 
	                                 W_PANEL_COL,         61,
                                     W_PANEL_BUTTONIMAGE, "选择路径", 
                                     W_PANEL_WIDTH,       10,
                                     W_PANEL_BUTTONVALUE, 202,
                                     W_PANEL_CALLBACK,    1,
                                     W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);						                     
							                  
	export_report = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "export_report");
	W_REALIZE_PANELITEM(export_report,  W_PANEL_ROW, 	     22, 
	                                    W_PANEL_COL,         0,
                                        W_PANEL_BUTTONIMAGE, "导出Excel", 
                                        W_PANEL_WIDTH,       10,
                                        W_PANEL_BUTTONVALUE, 202,
                                        W_PANEL_CALLBACK,    1,
                                        W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);	
							                  
	create_report = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "create_report");
	W_REALIZE_PANELITEM(create_report,  W_PANEL_ROW, 	     22, 
	                                    W_PANEL_COL,         11,
                                        W_PANEL_BUTTONIMAGE, "生成报表", 
                                        W_PANEL_WIDTH,       10,
                                        W_PANEL_BUTTONVALUE, 202,
                                        W_PANEL_CALLBACK,    1,
                                        W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);							                  						    
														 							 
	model_browsing = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "model_browsing");
	W_REALIZE_PANELITEM(model_browsing, W_PANEL_ROW, 	     22, 
	                                    W_PANEL_COL,         49,
                                        W_PANEL_BUTTONIMAGE, "模型浏览", 
                                        W_PANEL_WIDTH,       10,
                                        W_PANEL_BUTTONVALUE, 202,
                                        W_PANEL_CALLBACK,    1,
                                        W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);
							 						 							 							 
	quit = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "quit");
	W_REALIZE_PANELITEM(quit,   W_PANEL_ROW, 	     22, 
	                            W_PANEL_COL,         61,
                                W_PANEL_BUTTONIMAGE, "退出", 
                                W_PANEL_WIDTH,       10,
                                W_PANEL_BUTTONVALUE, 207,
                                W_PANEL_CALLBACK,    1,
                                W_PANEL_CLOSEBUTTON, 1,
                                W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);	
							 
	W_SET_PANELITEM_HANDLER(quit, "quit_handler");
	W_SET_PANELITEM_HANDLER(model_browsing, "model_browsing_handler");
	W_SET_PANELITEM_HANDLER(export_report, "export_to_excel");
	W_SET_PANELITEM_HANDLER(create_report, "export_to_drawing");
	W_SET_PANELITEM_HANDLER(select_path, "select_path_handler");
	W_SET_PANELITEM_HANDLER(select_template, "select_template_handler");
	
	return(panel_underpart);
}

select_path_handler(item, event_type, dummy)
{
    path = U_GET_DIRECTORY("选择报表保存路径","C:/TEMP/","",0);
    if(ISSTRING(path)){
        W_SET_PANELITEM_ARGS(Report_Path,W_PANEL_VALUE,path+"/");
    }
}

select_template_handler(item, event_type, dummy)
{
    flag = 0;
    template = U_GET_FILENAME("请选择模板文件", "P:\\报表模板\\","电气支撑件和贯通件制作图册.xlsx", "Excel File(*.xlsx)\nExcel File(*.xlsx)\nAll Files(*.*)",2 ,flag);
    if(ISSTRING(template)){
        W_SET_PANELITEM_ARGS(Report_Template,W_PANEL_VALUE,template);
    }
}

export_to_excel(item, event_type, dummy)
{
    random_string = get_random_string();
    DataFileName = "C:\\TEMP\\cable_tray_report"+random_string+".txt";
	if ( F_EXIST(DataFileName) ){
		check = F_DELETE_FILE(DataFileName);
		if (check == -1){
			U_MESSAGEBOX("请先关闭文件" + DataFileName, U_MB_ERROR, U_MB_OK, U_MB_OK);
			return(-1);
		}
	}
	flag = F_CREATE_FILE(DataFileName);
	if (flag == -1){
		U_CONFIRM("用户对文件:" + DataFileName + "所在路径没有写权限" );
		return(-1);
	}

	file = F_OPEN_FILE(DataFileName,"w");
	
    /* 获取模板文件 */
    unix_tmp_path = W_GET_PANELITEM_ARG(Report_Template,W_PANEL_VALUE);
	if(!F_EXIST(unix_tmp_path)){
		msg = "模板文件 <" + unix_tmp_path + "> 不存在";
		U_CONFIRM(msg);
		return(-1);
	}	
    /* 模板文件后缀名 */
    unix_tmp_suffix = SEARCH(unix_tmp_path, ".");
	
	/* 获取.NET程序路径 */
	unix_exe_path = SYS_GETENV("MarineToolkit") + "\\NET_Programs\\SDARI_Elec_Report.exe";

	/*获取报表文件(excel)名称*/
	U_INIT_DIALOG("请输入报表文件名称");
	name_f = U_SET_STR("Excel文件名:", "", 20);
	if(U_DIALOG() < 0){
		return(0);
	}
	doc_name = U_GET_STR(name_f);
	if(doc_name == ""){
		msg = "文件名不能为空";
		U_MESSAGEBOX(msg, U_MB_WARNING, U_MB_OK, U_OK);
		return(0);
	}
	
	/*获取报表文件的保存路径*/
	unix_rep_path = W_GET_PANELITEM_ARG(Report_Path,W_PANEL_VALUE);
	if(!F_EXIST(unix_rep_path)){
		msg = "路径 <" + unix_rep_path + "> 不存在";
		U_MESSAGEBOX(msg, U_MB_ERROR, U_MB_OK, U_OK);
		return(-1);
	}	
    
	unix_rep_file = unix_rep_path + doc_name + unix_tmp_suffix;
	win_tmp_path = S_REPLACE(unix_tmp_path, "/", "\\");
	win_exe_path = S_REPLACE(unix_exe_path, "/", "\\");
	win_rep_file = S_REPLACE(unix_rep_file, "/", "\\");
	write_to_temp_file(file);
	F_CLOSE_FILE(file);

	cmd = win_exe_path + " " + win_tmp_path + " " + DataFileName + " " + win_rep_file;
	SYS_EXEC_CMND(cmd);	
	return(0);
}

export_to_drawing(item, event_type, dummy)
{
	flag = 1;
	while(flag){
	    U_INIT_DIALOG("请输入报表的图形名称");
		drawing_name = ""; 
 		i_m = U_SET_STR("ElectricalReport",drawing_name,30); 
 		if( U_DIALOG() >= 0 ){
            drawing_name = U_GET_STR(i_m);	   
            doc_guid = "";
            res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);	
            if(res <= 0){
                flag = 0;
            }
            else{
                U_CONFIRM("该图名已存在！");
            }
 		}
        else{
            return(-1);
        }
	}
    
    /*生成图纸*/   
    dname = "";
    bom_set = PM_INIT_SET();
	header_tag_rec = DM_INIT_TAGREC();
	icgd_name = Cable_Tray_List_Icgd_Name;
	res = PM_CREATE_DRAWING(drawing_name, "ElectricalReport", PM_DRW_CFLG_GLOBAL, bom_set, icgd_name, header_tag_rec, dname);
	DM_FREE_TAGREC(header_tag_rec);
	if(res != 0){
		return(-1);
	}  
      
	res = PM_OPEN_DRAWING(drawing_name,PM_DRW_OFLG_EDIT,"","");
	if(res != 0){
		U_MESSAGE("无法打开图形:" + drawing_name);
		return(-1);
	}
    write_data_to_drawing();
   
    W_UNMAP_FRAME(MainWindow);
	st = PM_EDIT_ACTIVE_DRW(0);
	W_MAP_FRAME(MainWindow);
    return(0);      
}

write_data_to_drawing()
{
	/*计算页数*/ 
	page_number = Report_Row_Number / Column_Number_Per_Page;
	page_number = String_To_Int(STRINGTERM(FTOASCII(page_number),"."));
	if(page_number*Column_Number_Per_Page != Report_Row_Number){
		page_number = page_number + 1;
	}
	icgd_name = Cable_Tray_List_Icgd_Name;
	for(i=1;i<page_number;i=i+1;){
		res = PM_ADD_PAGE_TO_DRW(icgd_name, 0);
		if(res == -1){
			U_CONFIRM("fail");
		}
	} 
    
    /*汇总重量位置*/
    tot_weight_x = 140;
    tot_weight_y = 15;
    /*汇总数量位置*/
    tot_count_x = 120;
    tot_count_y = 15;
    
	y_offset = 0.5;   
	for(i=1;i<=page_number;i=i+1;){
		res = PM_ACTIVATE_PAGE_IN_DRW(i);
		style_name = "";
		drafting_style = get_first_drafting_style(style_name); 
		dw = PM_START_PAGE_ANNOTATION(style_name);
		DW_ACTIVATEVIEW(dw); 
		DW_COLOR(Table_Text_Colour);
		DW_TSIZE(Table_Text_Height);
		for(j=0;j<Column_Number_Per_Page;j=j+1;){
			row_number = (i-1)*Column_Number_Per_Page + j; 
			if(row_number >= Report_Row_Number){
                DW_TATTR(0.0,0.0,5);
                total_count = get_total_count();
				DW_TEXT(tot_count_x, tot_count_y, total_count); 
				total_weight = get_total_weight();
				DW_TEXT(tot_weight_x, tot_weight_y, total_weight);            
				PM_TERMINATE_PAGE_ANNOTATION(1);
				return(0);             
			}
            
            /*Y坐标*/
            y = Table_Orign_Y - Table_H * (j + y_offset);

			/*底座号*/      	   
			x = get_column_x_position(1,"L");
			text = get_string(row_number,3);
			DW_TEXT(x, y, text);      
         
			/*名称*/
			x = get_column_x_position(2,"L");
			text = get_string(row_number,4);
			DW_TEXT(x, y, text);
			
			/*数量*/
			x = get_column_x_position(3,"M");
			text = get_string(row_number,5);
			DW_TEXT(x, y, text);  	
			
			/*重量*/
			x = get_column_x_position(4,"M");
			text = get_string(row_number,6);
			DW_TEXT(x, y, text);
			
			/*备注*/
			x = get_column_x_position(5,"L");
			text = get_string(row_number,7);
			DW_TEXT(x, y, text);                                              
		}
        DW_TATTR(0.0,0.0,5);
        total_count = get_total_count();
        DW_TEXT(tot_count_x, tot_count_y, total_count);
		total_weight = get_total_weight();
		DW_TEXT(tot_weight_x, tot_weight_y, total_weight);
		PM_TERMINATE_PAGE_ANNOTATION(1);          
	}
	return(0);   
}

/*总数量 汇总在最后一页*/
get_total_count()
{
    count = 0;
    for(i=0;i<Report_Row_Number;i=i+1;){
        part_count = String_To_Float(get_2darray(Report_Info,i,5));
        count = count + part_count;
    }
    value = "";
    S_PRINTF(value ,"%.0f",count);
    return(value);
}

/*总重量 汇总在最后一页*/
get_total_weight()
{
    weight = 0;
    for(i=0;i<Report_Row_Number;i=i+1;){
        part_weight = String_To_Float(get_2darray(Report_Info,i,6));
        weight = weight + part_weight;
    }
    value = "";
    S_PRINTF(value ,"%.2f",weight);
    return(value);
}

get_string(row_number,order)
{
	W_SET_WINDOW_ARGS(DisplayGrid,W_LISTW_ROW,row_number);
	item_id = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ITEMID);   
	valve = get_2darray(Report_Info,item_id,order);
	return(valve);
}

write_to_temp_file(file)
{   
	/*图名图号信息*/
	U_INIT_DIALOG("请输入图号信息");
    s_f1 = U_SET_STR("图  名:", "XXXXX分段电缆支撑件和贯通件制作图册", 30);
    s_f2 = U_SET_STR("图  号:", "", 30);
    if(U_DIALOG()<0){
        U_MESSAGE("用户取消操作");
        return(0);
    }
    drawing_name = U_GET_STR(s_f1);
    drawing_no   = U_GET_STR(s_f2);
	info = "电缆支撑件和贯通件制作图册" + ",#";
    F_WRITE_STR(file,info);
    F_WRITE_NEWLINE(file);
    info = "Title" + ",#" + drawing_name + ",#2,#5,#";
    F_WRITE_STR(file,info);
    F_WRITE_NEWLINE(file);
    info = "Title" + ",#" + drawing_no + ",#2,#8,#";
   	F_WRITE_STR(file,info);
   	F_WRITE_NEWLINE(file);	
    /*托盘表信息*/
    info = "Table,#电缆支撑件和贯通件制作图册" + ",#6,#3,#12";
    F_WRITE_STR(file,info);
    F_WRITE_NEWLINE(file);	
    
    for(i=0;i<Report_Row_Number;i=i+1;){   
        info = "Line,#"+ITOASCII(i+1)+",#";
        W_SET_WINDOW_ARGS(DisplayGrid,W_LISTW_ROW,i);
        item_id = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ITEMID);
        for(k=3;k<Report_Column_Number;k=k+1;){
            value = get_2darray(Report_Info,item_id,k);
            if(k == 5){
                /*在这里增加合并单元格的列*/
                info = info + value + ",# ,#";
            }
            else{
                info = info + value + ",#";	
            }
        }
        F_WRITE_STR(file,info);
        F_WRITE_NEWLINE(file);	
    }
    return(1);   
}

main()
{
    init0();
	mainform  = create_top_frame();
	Panel_upperpart = create_panel_upperpart(mainform);
	DisplayGrid = create_grid(mainform);
	Panel_underpart = create_panel_underpart(mainform);
	init();
	MainWindow = mainform;
	
	W_MAP_FRAME(mainform);
	W_RUN_FRAME(mainform);
	W_UNMAP_FRAME(mainform);
	W_DESTROY_FRAME(mainform);
}

exit()
{
	/* 将已经加亮的模型恢复原来的颜色 */
	model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
	for (i = 0 ; i < model_number; i = i + 1){
		model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
		PM_HIGHLIGHT_OBJECT(model,0,FALSE);
	}
	PM_FREE_SET(Object_List);
	PM_FREE_SET(High_Light_List);
	PM_FREE_SET(Selected_Objects);
}
