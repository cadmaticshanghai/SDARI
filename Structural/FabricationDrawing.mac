/* $Id: FabricationDrawing.mac,v1.0.0 2018/11/03 Wallis.liu $ */

/*
**	This script use to generate fabrication drawing of general structural unit 
*/

#include "include/dmutil.h"
#include "include/win.h"
#include "include/win_panel.h"
#include "include/PmMgeTags.h"
#include "include/pm.h"
#include "include/pm_errors.h"
#include "include/dm_errors.h"
#include "include/pm_drawings.h"
#include "include/pm_core_tags.h"
#include "include/array.mac"
#include "include/cos.h"
#include "include/dw.h"
#include "include/pm_annot.h"
#include	"include/dm_cos_schema.h"
#include	"include/geoutils.h"
#include "include/PmPipingUtils.h"
#include "opt/pm/EloTools/include/viewutilsELO.h"
#include "include/g2d_ext2df.h"
#include	"include/quants.h"
#include "include/pi_math.mac" 
#include "include/pi.h"

global int  Debug = 1; 

#include "$MarineToolkit/Structural/ProductionInformation.h"
#include "$MarineToolkit/Structural/FabricationDrawing.h"
#include "$MarineToolkit/include/Common_Utility.h"
#include "$MarineToolkit/include/String_Utility.h"
#include "$MarineToolkit/Include/Math_Utility.h"
#include "$MarineToolkit/Include/Drawing_Utility.h"
#include "$MarineToolkit/Include/Structural_Utility.h"


/*
--脚本语言中似乎无法直接获得一个数组的实际长度，定义一个全局变量用于保存 管支架信息的数量;
--It seem that there is no method to get the size of a array, define a global var to store the number of pipe support information;
*/
global   handle	BlockName,PlanningUnit,ProNumber,DrawingNumber,StartPage;
global   handle	DisplayGrid;
global   handle	NULL_HANDLE = 0;
global   int		Grid_SelectedItem = 0;
global   int		Grid_SortColumn = -1;
global   int		Grid_SortDirection = 1;
global   handle	Object_List;          							/* 舾装件handle列表*/
global   handle	Drawing_Tag_Array, Column_Description_Array;
global   handle	Object_Info;				   					/* 舾装件信息列表*/
global   int		Object_Number = 0;	      						/* 舾装件数量*/
global   int		Model_Add_Mode = 0;        						/*查找模式0 - 替换，1 - 追加*/
global   handle	High_Light_List;           						/*模型加亮列表*/
global   handle	Selected_Objects;
global   int		Selected_Objects_Number = 0;
global   int		AutoScale = 0;
global   int		AutoHighLight = 0;
global   handle	MainWindow;
global   int		Maximum_Object_Number = 1000;
                  
global   handle	Process, Current_Drawing;
global   string	Current_Structural_Unit_Name = "",Current_Drawing_Name = "";
global   handle	Drawing_Form, Select_Form;
global   string	Drawing_Form_Name = "";
global   handle	Sketch,Sketch_View_Top,Sketch_View_AFT,Sketch_View_SB,Sketch_View_ISO;
global   handle	Open_Next,Open_Previous;

global   int		Reference_Point_Label_Number = 0;
global   handle	Reference_Point_Label_Table;
global   int		Structural_Unit_Part_Number = 0;
global   handle	Structural_Unit_Parts;
global	string	Drawing_Size = "A4H";

/*
**初始化相关对象
*/
init()
{
	Drawing_Tag_Array = A_ALLOC(Column_Number, "STRING");
	A_PUT(Drawing_Tag_Array,0,Structural_Unit_Name);
	A_PUT(Drawing_Tag_Array,1,DrawingStatus);
	A_PUT(Drawing_Tag_Array,2,DrawingName);
	A_PUT(Drawing_Tag_Array,3,CreationTime);
	A_PUT(Drawing_Tag_Array,4,"");
	A_PUT(Drawing_Tag_Array,5,"");
	
	Column_Description_Array = A_ALLOC(Column_Number, "STRING");
	A_PUT(Column_Description_Array,0,"舾装件名称");
	A_PUT(Column_Description_Array,1,"工艺状态");
	A_PUT(Column_Description_Array,2,"制作图名称");
	A_PUT(Column_Description_Array,3,"生成日期");
	A_PUT(Column_Description_Array,4,"页码");
	A_PUT(Column_Description_Array,5,"总页数");

	Object_Info = alloc_2darray(1,1);		
	View_Info = alloc_2darray(1,1);
	View_Positions = alloc_2darray(1,1);		
	View_Handles = A_ALLOC(1);
	View_Names = A_ALLOC(1);         	
	View_Positions = alloc_2darray(4,2);
	put_2darray(View_Positions,0,0,View1_X);
	put_2darray(View_Positions,0,1,View1_Y);
	put_2darray(View_Positions,1,0,View2_X);
	put_2darray(View_Positions,1,1,View2_Y);	
	put_2darray(View_Positions,2,0,View3_X);
	put_2darray(View_Positions,2,1,View3_Y);	
	put_2darray(View_Positions,3,0,View4_X);
	put_2darray(View_Positions,3,1,View4_Y);
		
	Mto_Table = alloc_2darray(1,1);	
	Mto_Label_Table = alloc_2darray(1,1);	
	Label_Table = alloc_2darray(1,1);
	Structural_Unit_Model_Set = PM_INIT_SET();
	Reference_Point_Label_Table = alloc_2darray(1,1);
	Reference_Point_Table = alloc_2darray(1,1);
	Dim_Table = alloc_2darray(1,1);
	Structural_Unit_Parts = alloc_2darray(1,1);
}

set_default()
{
	/*initialize object list*/
	Object_List = PM_INIT_SET();

	/*initialize highlighted object list*/
	High_Light_List = PM_INIT_SET();	
	
	/*initialize selected object list*/
	Selected_Objects = PM_INIT_SET();
	
	drawing_form = "";
	
	st = GET_STRING_DEFAULT("FabricationDrawing", "Drawing_Form", drawing_form);	
	if(st == 0){
		W_SET_PANELITEM_ARGS(Drawing_Form, W_PANEL_VALUE, drawing_form);	  
		Drawing_Form_Name = drawing_form;
	}   
}

/*
**Get the selected objects in grid
*/
get_selected_items(handle wobj)
{
	PM_SETOP_SUB(Selected_Objects, Selected_Objects);
	selected_rows = W_GET_WINDOW_ARG( wobj, W_LISTW_MSVALUE );
	total_lines = STRLEN(selected_rows);
	k = 0;
	for (i = 0; i < total_lines; i = i + 1){
		temp_string = SUBSTRING(selected_rows,i);
		flag = HEAD(temp_string,1);
		if (flag == "1"){
			res = W_SET_WINDOW_ARGS( wobj, W_LISTW_ROW, i);
			selected_row = W_GET_WINDOW_ARG( wobj, W_LISTW_ITEMID );	
			model_handle = PM_GET_MEMBER_IN_SET(Object_List, selected_row);	
			PM_ADD_OBJECT_TO_SET(model_handle,Selected_Objects);
			k = k + 1;
		}
	}
	Selected_Objects_Number = k;
	return (0);
}

model_list_mode(item, event_type, selection)
{
	if (selection == 0){
		Model_Add_Mode = 0;
	}
	else{
		Model_Add_Mode = 1;
	}
	return(0);
}

/*
**获取全局变量Object_List中保存的模型的生产信息，并将生产信息保存到全局变量ProdInfo中；
*/
get_structural_unit_info()
{	
	/* 给保存舾装件信息的全局数组分配存储空间 */
	A_FREE(Object_Info);
	Object_Info = alloc_2darray(Object_Number,Column_Number);
	/* 获取舾装件的信息并保存到全局数组 */	
	for (i = 0; i < Object_Number; i = i + 1;){		
		object_handle = PM_GET_MEMBER_IN_SET(Object_List, i);	
		/*获取舾装件名称*/	
		structural_unit_name = PM_GET_OBJDATA(object_handle,0,Structural_Unit_Name);
		put_2darray(Object_Info,i,0,structural_unit_name);
		/*获取舾装件工艺状态*/
		sketch_status = Get_Attribute_Value(object_handle, DrawingStatus);
		if(sketch_status != -1){
		   put_2darray(Object_Info,i,1,sketch_status);
		}
		else{
		   put_2darray(Object_Info,i,1,"未检查");
		}		
		/*获取制造图名称及生成日期*/
		sketch_name = Get_Attribute_Value(object_handle, DrawingName);
		if(!ISINT(sketch_name)){
		   put_2darray(Object_Info,i,2,sketch_name);
		   date_string = Get_Creation_Date(sketch_name);
		   if(!ISINT(date_string)){
		      put_2darray(Object_Info,i,3,date_string);
		   }
		   else{
		      put_2darray(Object_Info,i,3,"0000-00-00");
		   }		   
		}
		else{
		   put_2darray(Object_Info,i,2,"未生成");
		   put_2darray(Object_Info,i,3,"0000-00-00");
		}
	}	
	return 0;
}

/*
**display informations stored in global array 'object_info' in grid；
**sort grid according to the value of global argue Grid_SortColumn，Grid_SortDirection；
*/
publish_model_info()
{
	/* display informations of structural unit in grid */	
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_DELETEROWS, -1); 
	for (i = 0; i < Object_Number; i = i + 1;){
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_INSERTROWS, 1);
		for ( j = 0; j < Column_Number; j = j + 1;){
			Value = get_2darray(Object_Info,i,j);
			if (ISSTRING(Value)){
				W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0, W_LISTW_COLUMN, j, W_LISTW_STRING, Value);
			}
		}
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ITEMID, i);
	}
	
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 1);
	
	/* 自动调整列宽度 Adjust the width of column automatically*/
	for (i=0; i < Column_Number; i = i + 1;){
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_COLUMN, i, W_LISTW_COLUMNWIDTH, -1);
	}
	
	/* 对生产信息列表进行排序 Sort grid */
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_COLUMN, Grid_SortColumn, W_LISTW_SORT, Grid_SortDirection);
}
/*
**创建顶层窗体
**Create Top frame
*/
create_top_frame()
{
	mainform = W_INIT_FRAME();
	W_REALIZE_WINDOW(mainform,  W_FRAME_TITLE, "舾装件制造图生成工具" );	
	return(mainform);
}

/*
**创建显示舾装件信息的格栅
*/
create_grid(main_form)
{
	wobj = W_ADD_WINDOW(main_form, W_MULTISELECT, "DisplayGrid");
						   
	W_REALIZE_WINDOW(wobj,	W_FRAME_RIGHT_OF,    	"Block_Name",
							W_FRAME_BELOW,       	"panel_upperpart",
							W_LISTW_COLUMNS,		Column_Number,
							W_FRAME_SCROLLBAR,		W_SCROLLBAR_RIGHTEDGE,
							W_LISTW_HEADER_MODE,	W_LISTW_HEADER_BUTTONS,
							W_LISTW_MODE_REPORT,	0,
							W_FRAME_COLS,        	60, 
							W_FRAME_ROWS,        	17,
							W_LISTW_CALLBACK,    	1);
						   
	W_SET_WINDOW_HANDLER(wobj, "grid_handler");
	
	/*
	**设置格栅的列标题
	**set the column title of grid
	*/	
	set_column_title(wobj, Column_Description_Array, Column_Number);
		
	return(wobj);
}


quit_handler(item, event_type, button_value)
{
	exit();
	U_MESSAGE("退出舾装件制造图生成工具");
	return(99);
}


grid_handler(window, event_type, row, column, item_id)
{  	
	if (event_type == W_EVENT_ITEM_SELECTED) {
		/* handle sort of grid */
		if (row < 0 & column >= 0) {
			sort_grid(column,window);
		}		
		else if(row >= 0 & column == 0){		
			/* get selected objects in grid */				
			get_selected_items(DisplayGrid);			
			auto_highlight();
			auto_scale_model();			
		}		
	}	
	/* handle double click event */
	else if (event_type == W_EVENT_ITEM_DOUBLECLICKED) {	
		/* get selected objects in grid */			
		get_selected_items(DisplayGrid);			
		auto_highlight();
		auto_scale_model();			
	}
	set_page_number();
	return(0);
}

assign_views_to_drawing()
{   
	for(i=0;i<4;i=i+1;){
		view = A_GET(View_Names,i);
		origin_x = get_2darray(View_Positions,i,0);
		origin_y = get_2darray(View_Positions,i,1);
		PM_ASSIGN_VIEW_TO_PAGE(view,origin_x,origin_y,View_Scale);
	}
	return(0);
}

auto_highlight()
{
	/* 处理模型加亮 */
	if (AutoHighLight == 1){
		/* 将已经加亮的模型恢复原来的颜色 */
		model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			Highlight_Object(model,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);
		PM_FREE_SET(temp);

		/* 加亮选中的模型 */
		model_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
		for (i = 0; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
			Highlight_Object(model,TRUE);
			PM_ADD_OBJECT_TO_SET(model,High_Light_List);			
		}
	}
}

auto_scale_model()
{
	/* 处理模型自动缩放 */
	if (AutoScale == 1){				
		model_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
		if (model_number == 1){
			model_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,0);
			Auto_Scale(model_handle);
		}
	}
}

sort_grid(column,window)
{
	/* A column header was clicked; sort the items */
	if (Grid_SortColumn == column) {
		if (Grid_SortDirection == 0) {
			Grid_SortDirection = 1;
		}
		else {
			Grid_SortDirection = 0;
		}
	}
	else {
		Grid_SortDirection = 1;
	}
	Grid_SortColumn = column;
	W_SET_WINDOW_ARGS(window, W_LISTW_COLUMN, column, W_LISTW_SORT, Grid_SortDirection);
}

model_browsing_handler(item, event_type, button_value)
{
	W_UNMAP_FRAME(MainWindow);	
	selected_model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
	if (selected_model_number > 0){
		current_model = PM_GET_MEMBER_IN_SET(High_Light_List, 0);
		parts = PM_GET_OBJECTS_IN_GROUP(current_model);
		part = PM_GET_MEMBER_IN_SET( parts, 0);
		x0 = PM_GET_OBJDATA(part, 0, MMT_TAG_COGX);
		y0 = PM_GET_OBJDATA(part, 0, MMT_TAG_COGY);
		z0 = PM_GET_OBJDATA(part, 0, MMT_TAG_COGZ);
		x = SCAN_QUANT(1,x0);
		y = SCAN_QUANT(1,y0);
		z = SCAN_QUANT(1,z0);
		PM_SET_CURRENT_LOC(x, y, z);	
	}
	nth_part = 0;
	PM_PICK_OBJECT("浏览模型",nth_part);
	W_MAP_FRAME(MainWindow);
}


search_objects(item, event_type, button_value)
{   
	/* 查询所有的模型组 query all model groups*/
	query = PM_INIT_QUERY("GROUP");
	groups = PM_EXECUTE_QUERY(query);
		
	/* 获取舾装件模型 Get Structural Unit group */
	temp_list = PM_INIT_SET();
	
	if (!ISINT(groups)){
		group_number = PM_NR_MEMBERS_IN_SET(groups);
		for (i = 0; i < group_number; i = i + 1;){
			group_handle = PM_GET_MEMBER_IN_SET(groups, i);
			group_type = PM_GET_OBJDATA(group_handle, 0, MMT_TAG_GROUPTYPE);
			/* 过滤其它类型的组 Get rid of other type group*/
 			if (group_type == Group_Type_S){
				/* 过滤掉不包含零件的组Get rid of group that content nothing */	
				parts = PM_GET_OBJECTS_IN_GROUP(group_handle);
				if (parts != 0){
					part_number = PM_NR_MEMBERS_IN_SET(parts);
					if (part_number !=0){
						result = PM_ADD_OBJECT_TO_SET(group_handle,temp_list);
					}
				}
			}			
		}
	}
	
	model_number = PM_NR_MEMBERS_IN_SET(temp_list);
	if (model_number <= 0){
		return 0;
	}
	
	filter_model(temp_list);
		
	/* 根据当前模型查找模式将获得的模型添加到全局变量Object_List中 */
	if (Model_Add_Mode == 0){
		PM_SETOP_OR(Object_List,temp_list);
	}	
	
	if (Model_Add_Mode == 1){
		PM_FREE_SET(Object_List);
		Object_List = PM_INIT_SET();		
		Object_List = PM_COPY_SET(temp_list); 
	}	
	
	Object_Number = PM_NR_MEMBERS_IN_SET(Object_List);
	
	if (Object_Number <= 0){
		PM_FREE_SET(temp_list);
		return 0;
	}
	
	PM_FREE_SET(temp_list);
	/* 获取并发布生产信息 */
	get_structural_unit_info();
	publish_model_info();
	set_page_number();
}

filter_model( models )
{
	/* 获取过滤条件 Get filter conditions*/
	block_name = W_GET_PANELITEM_ARG(BlockName,W_PANEL_VALUE);
	planning_unit = W_GET_PANELITEM_ARG(PlanningUnit,W_PANEL_VALUE);	
	
	temp = PM_INIT_SET();
	
	/* 过滤掉不符合条件的模型 */
	group_number = PM_NR_MEMBERS_IN_SET(models);	
	for (i = 0; i < group_number; i = i + 1;){
		group_handle = PM_GET_MEMBER_IN_SET(models, i);	
		parts = PM_GET_OBJECTS_IN_GROUP(group_handle);
		part = PM_GET_MEMBER_IN_SET(parts,0);		
		model_block_name = PM_GET_OBJDATA(part,0,MMT_TAG_OBJECT_IN_BLOCK);
		if(ISINT(model_block_name)){
			model_block_name = "Unset";
		}		
		model_planning_unit = PM_GET_OBJDATA(part,0,Tag_PlanningUnit);
		if(ISINT(model_planning_unit)){
			model_planning_unit = "Unset";
		}		
		
		check_block = PATTERN_MATCH(model_block_name,block_name);
		check_planning_unit = PATTERN_MATCH(model_planning_unit,planning_unit);
		if(check_block & check_planning_unit){		
			PM_ADD_OBJECT_TO_SET(group_handle,temp);
		}			
	}
	PM_SETOP_SUB(models,models);
	PM_SETOP_OR(models,temp);
	PM_FREE_SET(temp);
	return(0);
}

get_structural_unit_handle(part)
{	
	structural_unit_handle = PM_GET_OBJECT_GROUP(part,Group_Type_I);
	if(ISINT(structural_unit_handle)){
		U_CONFIRM("此零件不属于任何舾装件");
		return(-1);	      
	}   	
	return(structural_unit_handle);	
}


pick_objects(item, event_type, button_value)
{
 	tmp = 0;
	flag = TRUE;
	temp = PM_INIT_SET();
	while(flag){	
		pick_part = PM_PICK_OBJECT("请选择舾装件", tmp, "BEAM","STRUCTCMP","STANDCMP" );
		if (!ISINT(pick_part)){
			groups_handle = get_structural_unit_handle(pick_part);
			if (!ISINT(groups_handle)){
				PM_ADD_OBJECT_TO_SET(groups_handle,temp);
				Highlight_Object(groups_handle,TRUE);
			}
			else{
				PM_RM_OBJECT_FROM_SET(groups_handle,temp);
				Highlight_Object(groups_handle,FALSE);			
			}	
		}	
		else{
			flag = FALSE;		
		}
	}
	
	if (Model_Add_Mode == 0){
		PM_SETOP_OR(Object_List,temp);
	}	
	
	if (Model_Add_Mode == 1){
		PM_SETOP_SUB(Object_List,Object_List);
		Object_List = PM_COPY_SET(temp); 
	}	
	
	Object_Number = PM_NR_MEMBERS_IN_SET(Object_List);	
	if (Object_Number <= 0){
		return 0;
	}
	
	/* 获取并发布生产信息 */
	get_structural_unit_info();
	publish_model_info();
	
	for (i = 0; i < Object_Number; i = i + 1;){
		group = PM_GET_MEMBER_IN_SET(Object_List, i);		
		Highlight_Object(group,FALSE);			
	}	
	
	return(0);
}

options_selected(item, event_type, dummy)
{
	s = W_GET_PANELITEM_ARG(item, W_PANEL_VALUE);
	if ( s == "00" ){
		AutoHighLight = 0;
		AutoScale = 0;	
		/* 将已经加亮的模型恢复原来的颜色 */
		model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			Highlight_Object(model,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);	
		PM_FREE_SET(temp);		
	}
	else if( s == "10"){
		AutoHighLight = 1;
		AutoScale = 0;	
	}
	else if( s == "11"){
		AutoHighLight = 1;
		AutoScale = 1;	
	}
	else if( s == "01"){
		AutoHighLight = 0;
		AutoScale = 1;
		/* 将已经加亮的模型恢复原来的颜色 */
		model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			Highlight_Object(model,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);
		PM_FREE_SET(temp);
	}		
	return(0);
}

create_panel_upperpart(mainform)
{
	panel_upperpart = W_ADD_WINDOW(mainform, W_PANEL, "panel_upperpart");
	W_REALIZE_WINDOW(panel_upperpart,	W_FRAME_X,		0,
										W_FRAME_Y,		0,
										W_FRAME_ROWS,	2,
										W_FRAME_COLS,	70);
						
	Block_Name = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Block_Name");
	W_REALIZE_PANELITEM(Block_Name,	W_PANEL_ROW,		0, 
									W_PANEL_COL, 		0,
									W_PANEL_LABEL,		"分段名称:     ",
									W_PANEL_TIP,		"Block Name",
									W_PANEL_LENGTH,		15,
									W_PANEL_VALUE,		"*",
									W_PANEL_CALLBACK,	1);
      
	search_stru = W_ADD_PANELITEM(panel_upperpart, W_PANEL_BUTTON, "search_stru");
	W_REALIZE_PANELITEM(search_stru,	W_PANEL_ROW,			0, 
										W_PANEL_COL, 			60,
										W_PANEL_BUTTONIMAGE,	"查找",
										W_PANEL_WIDTH, 			10,
										W_PANEL_BUTTONVALUE, 	210,
										W_PANEL_CALLBACK, 		1,
										W_PANEL_LAYOUT, 		W_LAYOUT_HORIZONTAL);
   
	PlanningUnit = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "PlanningUnit");
	W_REALIZE_PANELITEM(PlanningUnit,	W_PANEL_ROW,		0, 
										W_PANEL_COL,		30,
										W_PANEL_LABEL,		"托盘名称:     ",
										W_PANEL_LENGTH,		15,
										W_PANEL_VALUE,		"*",
										W_PANEL_CALLBACK,	3);
   
	ProNumber = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "ProNumber");
	W_REALIZE_PANELITEM(ProNumber,	W_PANEL_ROW,		1, 
									W_PANEL_COL, 		0,
									W_PANEL_LABEL,		"工程号:      ",
									W_PANEL_LENGTH,		15,
									W_PANEL_VALUE,		"",
									W_PANEL_CALLBACK,	3);
   
	DrawingNumber = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "DrawingNumber");
	W_REALIZE_PANELITEM(DrawingNumber,	W_PANEL_ROW,		1, 
										W_PANEL_COL,		30,
										W_PANEL_LABEL,		"图号:       ",
										W_PANEL_LENGTH,		15,
										W_PANEL_VALUE,		"*",
										W_PANEL_CALLBACK,	3);  
   
	Start_Page = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Start_Page");    
	W_REALIZE_PANELITEM(Start_Page,	W_PANEL_ROW,		2, 
									W_PANEL_COL,		0,
									W_PANEL_LABEL,		"起始页码:     ",
									W_PANEL_LENGTH,		15,
									W_PANEL_CALLBACK,	4);
	W_CONFIG_NUMERIC_PANELITEM(Start_Page, W_NUMERIC_INT, 1, 1000);
	W_SET_PANELITEM_HANDLER(Start_Page, "page_number_handler");
	W_SET_NUMERIC_VALUE(Start_Page, 2);   
   
	pick_stru = W_ADD_PANELITEM(panel_upperpart, W_PANEL_BUTTON, "pick_stru");
	W_REALIZE_PANELITEM(pick_stru,	W_PANEL_ROW,			1, 
									W_PANEL_COL, 			60,
									W_PANEL_BUTTONIMAGE,	"点选",
									W_PANEL_WIDTH,          10,
									W_PANEL_BUTTONVALUE,    210,
									W_PANEL_CALLBACK,       1,
									W_PANEL_LAYOUT,         W_LAYOUT_HORIZONTAL);
   
	element_add_flag = W_ADD_PANELITEM(panel_upperpart, W_PANEL_CHOICE, "element_add_flag");
	W_REALIZE_PANELITEM(element_add_flag,	W_PANEL_ROW,			3, 
											W_PANEL_COL, 			0,
											W_PANEL_LABEL,          "模型信息列表模式:        ",
											W_PANEL_CHOICESTRING,   "追加  ",
											W_PANEL_CHOICESTRING,   "替换  ",
											W_PANEL_ORDINALVALUE,   0,
											W_PANEL_CHOICESTYLE,	W_STYLE_PUSHBUTTONS,
											W_PANEL_CALLBACK,       1);
   
	Options = W_ADD_PANELITEM(panel_upperpart, W_PANEL_TOGGLE, "options");
	W_REALIZE_PANELITEM(Options,	W_PANEL_ROW,			3, 
									W_PANEL_COL, 			50,
									W_PANEL_LABEL,          "",
									W_PANEL_CHOICESTRING,   "自动加亮    ",
									W_PANEL_CHOICESTRING,   "自动缩放    ",
									W_PANEL_VALUE,          "00",
									W_PANEL_CHOICESTYLE,	W_STYLE_PUSHBUTTONS,
									W_PANEL_CALLBACK,       1);
					 							 
	W_SET_PANELITEM_HANDLER(search_stru, "search_objects");
	W_SET_PANELITEM_HANDLER(pick_stru, "pick_objects");
	W_SET_PANELITEM_HANDLER(element_add_flag, "model_list_mode");
	W_SET_PANELITEM_HANDLER(Options, "options_selected");
	
	return(panel_upperpart);
}

create_command(mainform)
{	
	command = W_ADD_WINDOW(mainform, W_PANEL, "command");
	W_REALIZE_WINDOW(command,	W_FRAME_X,		0,
								W_FRAME_Y,		600,
								W_FRAME_WIDTH,	300,
								W_FRAME_HEIGHT, 1);	
							         
	Drawing_Form = W_ADD_PANELITEM(command, W_PANEL_FILL, "Drawing_Form");
      
	W_REALIZE_PANELITEM(Drawing_Form,	W_PANEL_ROW, 		0, 
										W_PANEL_COL, 		0,
										W_PANEL_LABEL, 		"图框名称:     ",
										W_PANEL_TIP,		"ICGD Name",
										W_PANEL_LENGTH, 	45,
										W_PANEL_VALUE, 		"",
										W_PANEL_CALLBACK,	0);
     				                        
	Select_Form = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Select_Form");
	
	W_REALIZE_PANELITEM(Select_Form,	W_PANEL_ROW,         	0, 
										W_PANEL_COL,         	60,
										W_PANEL_BUTTONIMAGE, 	"选择图框", 
										W_PANEL_TIP,			"Select ICGD",
										W_PANEL_WIDTH,       	10,
										W_PANEL_BUTTONVALUE, 	209,
										W_PANEL_CALLBACK,    	1,
										W_PANEL_LAYOUT,      	W_LAYOUT_HORIZONTAL);     				                        
     				                        
							         						
	Create_Drawing = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Create_Drawing");		
	W_REALIZE_PANELITEM(Create_Drawing,  W_PANEL_ROW,         	1, 
	                                    W_PANEL_COL,         	0,
										W_PANEL_BUTTONIMAGE, 	"生成制造图", 
										W_PANEL_TIP,			"Create Pipe Drawing",
										W_PANEL_WIDTH,       	10,
										W_PANEL_BUTTONVALUE, 	200,
										W_PANEL_CALLBACK,    	1,
										W_PANEL_LAYOUT,      	W_LAYOUT_HORIZONTAL);
							                  
	Cur_Drawing = W_ADD_PANELITEM(command, W_PANEL_FILL, "Cur_Drawing");     
	W_REALIZE_PANELITEM(Cur_Drawing,	W_PANEL_ROW,			1, 
									W_PANEL_COL, 			12,
									W_PANEL_LABEL, 			"",
									W_PANEL_LENGTH, 		44,
									W_PANEL_VALUE, 			"正在处理 舾装件:   ",
									W_PANEL_SENSITIVITY,	0,
									W_PANEL_CALLBACK, 		0); 
     				                        
	Pro_label = W_ADD_PANELITEM(command, W_PANEL_FILL, "Pro_label");      
	W_REALIZE_PANELITEM(Pro_label,	W_PANEL_ROW,		1, 
									W_PANEL_COL,		58,
									W_PANEL_LABEL,		"进度:",
									W_PANEL_LENGTH, 	0,
									W_PANEL_VALUE,		"",
									W_PANEL_CALLBACK,	0);     				                        
     				                        
	Process = W_ADD_PANELITEM(command, W_PANEL_FILL, "Process");      
	W_REALIZE_PANELITEM(Process,	W_PANEL_ROW,			1, 
									W_PANEL_COL,			63,
									W_PANEL_LABEL,			"",
									W_PANEL_LENGTH,			7,
									W_PANEL_VALUE,			"0/0",
									W_PANEL_SENSITIVITY,	0,
									W_PANEL_CALLBACK,		0); 
     				                        
	Open_Drawing = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Open_Drawing");	
	W_REALIZE_PANELITEM(Open_Drawing,	W_PANEL_ROW,         2, 
										W_PANEL_COL,         0,
										W_PANEL_BUTTONIMAGE, "打开制造图", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 201,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);     	
							                
	Open_Previous = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Open_Previous");	
	W_REALIZE_PANELITEM(Open_Previous,  W_PANEL_ROW,         2, 
	                                    W_PANEL_COL,         12,
										W_PANEL_BUTTONIMAGE, "打开前一个", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 202,
										W_PANEL_CALLBACK,    1,
										W_PANEL_TIP, "Open Previous Pipe Drawing",
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL); 	
							                  
	Open_Next = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Open_Next");	
	W_REALIZE_PANELITEM(Open_Next,  W_PANEL_ROW,         2, 
	                                W_PANEL_COL,         24,
									W_PANEL_BUTTONIMAGE, "打开下一个", 
									W_PANEL_WIDTH,       10,
									W_PANEL_BUTTONVALUE, 203,
									W_PANEL_CALLBACK,    1,
									W_PANEL_TIP, "Open Next Pipe Drawing",
									W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL); 	
							              
	Browse_Model = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Browse_Model");	
	W_REALIZE_PANELITEM(Browse_Model,	W_PANEL_ROW,         2, 
										W_PANEL_COL,         36,
										W_PANEL_BUTTONIMAGE, "浏览模型", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 204,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);							              
							              						                  							                  						                							                			                            				                      
	Delete_Drawing = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Delete_Drawing");	
	W_REALIZE_PANELITEM(Delete_Drawing,  W_PANEL_ROW,         3, 
	                                    W_PANEL_COL,         0,
										W_PANEL_BUTTONIMAGE, "删除制造图", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 301,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);
   							               
	Print_Drawing = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Print_Drawing");	
	W_REALIZE_PANELITEM(Print_Drawing,   W_PANEL_ROW,         3, 
	                                    W_PANEL_COL,         12,
										W_PANEL_BUTTONIMAGE, "打印制造图", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 302,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);   
   							               
	Export_Dxf = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Export_Dxf");	
	W_REALIZE_PANELITEM(Export_Dxf,		W_PANEL_ROW,         3, 
										W_PANEL_COL,         24,
										W_PANEL_BUTTONIMAGE, "导出DXF", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 303,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);  
   							             
	Export_Pdf = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Export_Pdf");	
	W_REALIZE_PANELITEM(Export_Pdf,		W_PANEL_ROW,         3, 
										W_PANEL_COL,         36,
										W_PANEL_BUTTONIMAGE, "导出PDF", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 304,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);   							              							               							       
							   
	quit = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "quit");	
	W_REALIZE_PANELITEM(quit,	W_PANEL_ROW,			3, 
								W_PANEL_COL,         	60,
								W_PANEL_BUTTONIMAGE, 	"退出", 
								W_PANEL_WIDTH,       	10,
								W_PANEL_BUTTONVALUE, 	305,
								W_PANEL_CALLBACK,    	1,
								W_PANEL_CLOSEBUTTON, 	1,
								W_PANEL_LAYOUT,      	W_LAYOUT_HORIZONTAL);	
							         
	W_SET_PANELITEM_HANDLER(Select_Form, "select_form_handler");						         						 
	W_SET_PANELITEM_HANDLER(quit, "quit_handler");
	W_SET_PANELITEM_HANDLER(Create_Drawing, "create_drawing_handler");
	W_SET_PANELITEM_HANDLER(Export_Pdf, "export_pdf_handler");
	W_SET_PANELITEM_HANDLER(Export_Dxf, "export_dxf_handler");
	W_SET_PANELITEM_HANDLER(Print_Drawing, "print_sketch_handler");
	W_SET_PANELITEM_HANDLER(Delete_Drawing, "delete_drawing_handler");
	W_SET_PANELITEM_HANDLER(Open_Drawing, "open_sketch_handler");  
	W_SET_PANELITEM_HANDLER(Open_Next, "open_sketch_handler"); 
	W_SET_PANELITEM_HANDLER(Open_Previous, "open_sketch_handler"); 
	W_SET_PANELITEM_HANDLER(Browse_Model, "model_browsing_handler");
	
	return(command);
}

delete_drawing_handler(item, event_type, button_value)
{  
	/* 检查是否已经选择模型 */
	structural_units_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);	
	if (structural_units_number <= 0){
		U_CONFIRM("请先选择舾装件");
		return(0);
	}  

	sel = A_ALLOC(2);
	A_PUT(sel,0,"保留最新版本");
	A_PUT(sel,1,"删除所有版本");
	si = 1;
	res = DM_CALL_SCRIPT("macro/Select.mac","U_Select",
		"请选择删除模式",2,sel,si);
	A_FREE(sel);
   
	if(res == -1){
		return(0);      
	}
	else if(res == 0){
		/*循环处理选中的 舾装件*/
		for(i=0;i<structural_units_number;i=i+1;){   	   
			/*检查是否已经生成制造图*/
			structural_unit_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
			sketch_name = Get_Attribute_Value(structural_unit_handle,DrawingName);
			if(ISSTRING(sketch_name) & sketch_name != "Unset"){          
				current_version = String_To_Int(SUBSTRING(SEARCH(sketch_name,"-SK"),3));      	
				for(k=0;k<current_version;k=k+1;){
					drawing_name = STRINGTERM(sketch_name,"-SK") + "-SK" + ITOASCII(k);
					doc_guid = "";
					res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);
					if(doc_guid != ""){
						res = PM_DELETE_DRAWING(drawing_name);
						if(res == 0){
							mess = "制造图<" + drawing_name + ">已经被删除";
							U_MESSAGE(mess);
						}
						else{
							prompt_error(drawing_name,res);
						}      	      
					}
				} 
			}  	
		}      
	}
	else if(res == 1){  	   
		/*循环处理选中的 舾装件*/
		for(i=0;i<structural_units_number;i=i+1;){   	   
			/*检查是否已经生成制造图*/
			structural_unit_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
			sketch_name = Get_Attribute_Value(structural_unit_handle,DrawingName);
			if(ISSTRING(sketch_name) & sketch_name != "Unset"){
				current_version = String_To_Int(SUBSTRING(SEARCH(sketch_name,"-SK"),3));   	
				for(k=0;k<=current_version;k=k+1;){
					drawing_name = STRINGTERM(sketch_name,"-SK") + "-SK" + ITOASCII(k);
					doc_guid = "";
					res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);
					if(doc_guid != ""){
						res = PM_DELETE_DRAWING(drawing_name);
						if(res == 0){
							mess = "制造图<" + drawing_name + ">已经被删除";
							U_MESSAGE(mess);
						}
						else{
							prompt_error(drawing_name,res);
						}      	      
					}
				} 
			} 
			res = Set_Attribute_Value(structural_unit_handle,DrawingName,"Unset");         
			/*将生成的制造图名称显示在格栅中*/
			id = find_structural_unit_grid_id(structural_unit_handle);
			if(id != -1){
				W_SET_WINDOW_ARGS(DisplayGrid,W_LISTW_FINDID,id);
				row = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ROW);
				W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, row, W_LISTW_COLUMN, 2, W_LISTW_STRING, "Unset");
			}         
		}                
	}
	PM_SAVE(0,1,1);   
	return(0);
}

prompt_error(drawing_name,res)
{
	if(res == -1){
		mess = "制造图<" + drawing_name + ">无法删除";
		U_MESSAGE(mess);      
	}
	else if(res == MMT_E_DRW_NOTFOUND){
		mess = "制造图<" + drawing_name + ">不存在";
		U_MESSAGE(mess);
	}
	else if(res == DM_E_DOC_NOT_OWNER){
		mess = "你没有删除制造图<" + drawing_name + ">的权限";
		U_MESSAGE(mess);
	}
	else{
		mess = "制造图<" + drawing_name + ">无法删除";
		U_MESSAGE(mess);      
	}
	return(0);          
}

page_number_handler(item, event_type, dummy)
{
	set_page_number();
	return(0);
}

set_page_number()
{
	st = 0;
	start_page = W_GET_NUMERIC_VALUE(StartPage, st);
	if (st != 0){
		W_SET_NUMERIC_VALUE(StartPage, 2);
		start_page = 2;
	}
	structural_unit_number = PM_NR_MEMBERS_IN_SET(Object_List);
	total_number = start_page + structural_unit_number - 1;
	for(i=0;i<Object_Number;i=i+1){
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, i, W_LISTW_COLUMN, 5, W_LISTW_STRING, ITOASCII(total_number));
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, i, W_LISTW_COLUMN, 4, W_LISTW_STRING, ITOASCII(start_page + i));
	}
	return(0);
}

open_sketch_handler(item, event_type, button_value)
{  
	/* 检查是否已经选择模型 */
	structural_units_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);	
	if (structural_units_number <= 0){
		U_CONFIRM("请先选择 舾装件");
		return(0);
	}   
	else if(structural_units_number > 1){
		U_CONFIRM("一次只能打开一个图形");
		return(0);	   
	}
	
	if(item == Open_Next){
		row_number = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_NUMOFCHOICES); 
		current_row = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_ROW); 
		new_row = current_row + 1;
		if(new_row >= row_number){
			U_CONFIRM("当前 舾装件已经是最后一个 舾装件");
			return(0);
		}
		ms_value = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_MSVALUE);
		ms_value = "0" + HEAD(ms_value,STRLEN(ms_value)-1);
		res = W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_MSVALUE, ms_value); 
		item_id = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ITEMID);	   
		grid_handler(DisplayGrid, W_EVENT_ITEM_SELECTED, new_row, 0, item_id); 
	}
	else if(item == Open_Previous){
		row_number = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_NUMOFCHOICES); 
		current_row = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_ROW); 
		new_row = current_row - 1;
		if(new_row < 0){
			U_CONFIRM("当前 舾装件已经是第一个 舾装件");
			return(0);
		}
		ms_value = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_MSVALUE);
		ms_value =  TAIL(ms_value,STRLEN(ms_value)-1) + "0";	  
		res = W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_MSVALUE, ms_value);
		item_id = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ITEMID);
		grid_handler(DisplayGrid, W_EVENT_ITEM_SELECTED, new_row, 0, item_id); 
	}
	
	/*检查是否已经生成制造图*/
	structural_unit_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,0);
	drawing_name = Get_Attribute_Value(structural_unit_handle,DrawingName);
	if(ISINT(drawing_name)){
		U_CONFIRM("尚未生成制造图");
		return(0);
	}
	
	/*检查制造图图形是否存在（有可能被手工删除或者其它原因）*/
	doc_guid = "";
	res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);	
	if(doc_guid == ""){
		U_CONFIRM("制造图图形不存在");	   
		return(0);
	}
	
	/*检查当前是否有打开的图形*/
	current_drawing = PM_GET_ACTIVE_DRW_NAME();
	if(current_drawing != ""){
		PM_SAVE_ACTIVE_DRW();
		PM_CHECK_IN_ACTIVE_DRW();
		PM_CLOSE_ACTIVE_DRW();	   
	}
	
	PM_OPEN_DRAWING(drawing_name,PM_DRW_OFLG_EDIT,"","");
   
	W_UNMAP_FRAME(MainWindow);
	st = PM_EDIT_ACTIVE_DRW(0);
	W_MAP_FRAME(MainWindow);
	
	dwg_name = PM_GET_ACTIVE_DRW_NAME();
	if(dwg_name != ""){
		st = PM_SAVE_ACTIVE_DRW();
		if(st){
			U_CONFIRM("无法保存当前图形 <" + dwg_name + ">!");
		}
		else {
			st = PM_CHECK_IN_ACTIVE_DRW();
			if(st){
				U_CONFIRM("无法Check In当前图形 <" + dwg_name + ">!");
			}
		}
		PM_CLOSE_ACTIVE_DRW();
	}
	
	return(0);   
}

print_sketch_handler(item, event_type, button_value)
{  
	/* 检查是否已经选择模型 */
	structural_units_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);	
	if (structural_units_number <= 0){
		U_CONFIRM("请先选择 舾装件");
		return(0);
	}  
		
	/*检查 舾装件制造图是否已经生成*/
	for(i=0;i<structural_units_number;i=i+1;){	   
		/*检查是否已经生成制造图*/
		structural_unit_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
		structural_unit_name = PM_GET_OBJDATA(structural_unit_handle,0,Structural_Unit_Name);
		drawing_name = Get_Attribute_Value(structural_unit_handle,DrawingName);
		if(ISINT(drawing_name)){
			mess = " 舾装件<" + structural_unit_name + ">尚未生成制造图";
			U_MESSAGE(mess);
		}
		/*检查制造图图形是否存在（有可能被手工删除或者其它原因）*/
		doc_guid = "";
		res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);	
		if(doc_guid == ""){
			mess = "制造图<"+drawing_name+">不存在";
			U_MESSAGE(mess);	   
			return(0);
		}   	
	}
      
	/*循环打印制造图*/   
	for(i=0;i<structural_units_number;i=i+1;){
		structural_unit_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
		structural_unit_name = PM_GET_OBJDATA(structural_unit_handle,0,Structural_Unit_Name);
		drawing_name = Get_Attribute_Value(structural_unit_handle,DrawingName);
	      	   	
		/*检查当前是否有打开的图形*/
		current_drawing = PM_GET_ACTIVE_DRW_NAME();
		if(current_drawing != ""){
			PM_SAVE_ACTIVE_DRW();
			PM_CHECK_IN_ACTIVE_DRW();
			PM_CLOSE_ACTIVE_DRW();	   
		}   

		PM_OPEN_DRAWING(drawing_name,PM_DRW_OFLG_EDIT,"","");
		mess = "开始打印图形<" + drawing_name + ">";
		U_MESSAGE(mess);
		res = PM_PLOT_ACTIVE_DRW(0);
		if(res == -1){
			DM_EDIT_SHEET_PLOT_SETTINGS();
			res = PM_PLOT_ACTIVE_DRW(0);
			if(res == -1){
				mess = "图形<" + drawing_name + ">打印失败";
				U_MESSAGE(mess);
			}
		} 
		else if(res == MMT_E_DRW_NOTACTIVE){
			mess = "图形<" + drawing_name + ">无法激活，打印失败";
			U_MESSAGE(mess);	      
		}
		else{
			mess = "图形<" + drawing_name + ">打印结束";
			U_MESSAGE(mess);	      
		}
	}
	return(0);
}

export_pdf_handler(item, event_type, button_value)
{
	/* 检查是否已经选择模型 */
	structural_units_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);	
	if (structural_units_number <= 0){
		U_CONFIRM("请先选择 舾装件");
		return(0);
	} 
	
	path = U_GET_DIRECTORY("选择输PDF文件出路径", "c:\\", "", 0); 
	if(ISINT(path)){
	   return(0);
	} 
	
	/*循环输出舾装件制造图*/
	for(i=0;i<structural_units_number;i=i+1;){	   
		/*检查是否已经生成舾装件制造图*/
		structural_unit_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
		structural_unit_name = PM_GET_OBJDATA(structural_unit_handle,0,Structural_Unit_Name);
		drawing_name = Get_Attribute_Value(structural_unit_handle,DrawingName);
		if(ISINT(drawing_name)){
			mess = " 舾装件<" + structural_unit_name + ">尚未生成制造图";
			U_MESSAGE(mess);
		}
		else{   	
			/*检查舾装件制造图是否存在（有可能被手工删除或者其它原因）*/
			doc_guid = "";
			res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);	
			if(doc_guid == ""){
				mess = "舾装件制造图<"+drawing_name+">不存在";
				U_MESSAGE(mess);	   
			}	
			else{      	
				/*检查当前是否有打开的图形*/
				current_drawing = PM_GET_ACTIVE_DRW_NAME();
				if(current_drawing != ""){
					PM_SAVE_ACTIVE_DRW();
					PM_CHECK_IN_ACTIVE_DRW();
					PM_CLOSE_ACTIVE_DRW();	   
				}   
			   
				res = PM_OPEN_DRAWING(drawing_name,PM_DRW_OFLG_EDIT,"","");
				if(res == -1){
					mess = "无法打开图形<" + drawing_name + ">，输出失败";
					U_MESSAGE(mess);	     
				}
				else{
					mess = "开始输出图形<" + drawing_name + ">的PDF文件";
					U_MESSAGE(mess);
					format = G2D_EXT_FRM_PDF;
					output_dir = path;
					template_dwr = "";
					res = export_active_drw(format, template_dwr, output_dir);	
					if(res == -1){
						mess = "图形<" + drawing_name + ">输出失败";
						U_MESSAGE(mess);
					} 
					else if(res == MMT_E_DRW_NOTACTIVE){
						mess = "图形<" + drawing_name + ">无法激活，输出失败";
						U_MESSAGE(mess);	      
					}
					else{
						mess = "图形<" + drawing_name + ">输出结束";
						U_MESSAGE(mess);	      
					}
				}
			}
		}
	}
	return(0);
}

export_dxf_handler(item, event_type, button_value)
{
	/* 检查是否已经选择模型 */
	structural_units_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);	
	if (structural_units_number <= 0){
		U_CONFIRM("请先选择舾装件");
		return(0);
	} 
	
	path = U_GET_DIRECTORY("选择输DXF文件出路径", "c:\\", "", 0); 
	if(ISINT(path)){
		return(0);
	} 
	
	/*循环输出舾装件制造图*/
	for(i=0;i<structural_units_number;i=i+1;){	   
		/*检查是否已经生成舾装件制造图*/
		structural_unit_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
		structural_unit_name = PM_GET_OBJDATA(structural_unit_handle,0,Structural_Unit_Name);
		drawing_name = Get_Attribute_Value(structural_unit_handle,DrawingName);
		if(ISINT(drawing_name)){
			mess = "舾装件<" + structural_unit_name + ">尚未生成制造图";
			U_MESSAGE(mess);
		}
		else{   	
			/*检查舾装件制造图是否存在（有可能被手工删除或者其它原因）*/
			doc_guid = "";
			res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);	
			if(doc_guid == ""){
				mess = "舾装件制造图<"+drawing_name+">不存在";
				U_MESSAGE(mess);	   
			}	
			else{      	
				/*检查当前是否有打开的图形*/
				current_drawing = PM_GET_ACTIVE_DRW_NAME();
				if(current_drawing != ""){
					PM_SAVE_ACTIVE_DRW();
					PM_CHECK_IN_ACTIVE_DRW();
					PM_CLOSE_ACTIVE_DRW();	   
				}   

				res = PM_OPEN_DRAWING(drawing_name,PM_DRW_OFLG_EDIT,"","");
				if(res == -1){
					mess = "无法打开图形<" + drawing_name + ">，输出失败";
					U_MESSAGE(mess);	     
				}
				else{
					mess = "开始输出图形<" + drawing_name + ">的DXF文件";
					U_MESSAGE(mess);
					format = G2D_EXT_FRM_DXF_2000;
					output_dir = path;
					template_dwr = "";
					res = export_active_drw(format, template_dwr, output_dir);	
					if(res == -1){
						mess = "图形<" + drawing_name + ">输出失败";
						U_MESSAGE(mess);
					} 
					else if(res == MMT_E_DRW_NOTACTIVE){
						mess = "图形<" + drawing_name + ">无法激活，输出失败";
						U_MESSAGE(mess);	      
					}
					else{
						mess = "图形<" + drawing_name + ">输出结束";
						U_MESSAGE(mess);	      
					}
				}
			}
		}
	}
   return(0);
}

select_form_handler(item, event_type, button_value)
{
	drawing_form = DM_SELECT_ICGD("",2);
	if(ISSTRING(drawing_form) & drawing_form != ""){
		W_SET_PANELITEM_ARGS(Drawing_Form, W_PANEL_VALUE, drawing_form);
		SET_STRING_DEFAULT("Structural_Unit_Drawing", "Drawing_Form", drawing_form);
		Drawing_Form_Name = drawing_form;
	} 
	return(0);
}

create_drawing_handler(item, event_type, button_value)
{
	/* 检查是否已经选择模型 */
	structural_units_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);	
	if (structural_units_number <= 0){
		U_CONFIRM("请先选择舾装件");
		return(0);
	}
		
	/* 获取图框尺寸 */
	if(Drawing_Form_Name == ""){
		U_CONFIRM("请先选择图框");
		return(0);		
	}
	form_size = Get_Drawing_Form_Size_By_ICGD_Name(Drawing_Form_Name);
		
	/* 循环生成选中的舾装件的制造图 */
	x0 = 0;y0 = 0;z0 = 0;
	PM_GET_CURRENT_LOC(x0,y0,z0);
	start_time = GET_TIME(); 
	for(i=0;i<structural_units_number;i=i+1;){	   
		Structural_Unit_Handle = PM_GET_MEMBER_IN_SET(Selected_Objects, i);	
		Structural_Unit_Model_Set = PM_GET_OBJECTS_IN_GROUP(Structural_Unit_Handle);	  	   
		process_info = ITOASCII(i+1) + "/" + ITOASCII(structural_units_number);
		W_SET_PANELITEM_ARGS(Process, W_PANEL_VALUE, process_info);
		structural_unit_name = PM_GET_OBJDATA(Structural_Unit_Handle,0,Structural_Unit_Name);
		sketch_info = "正在处理舾装件：" + structural_unit_name;
		W_SET_PANELITEM_ARGS(Current_Drawing, W_PANEL_VALUE, sketch_info);
		Current_Structural_Unit_Name = structural_unit_name;
		res = generate_drawing();
		if(res == -1){
			mess = "无法生成舾装件:" + Current_Structural_Unit_Name + "的制造图";
			U_MESSAGE(mess);
		}
	}	
	end_time = GET_TIME();
	consumption = end_time - start_time;
	info = "处理完毕，共耗时" + ITOASCII(consumption) + "秒";
	W_SET_PANELITEM_ARGS(Current_Drawing, W_PANEL_VALUE, info);
	PM_SET_CURRENT_LOC(x0,y0,z0);
	return(0);	
}

generate_drawing()
{  
	Current_Drawing_Name = get_drawing_name();

	/*创建舾装件制造图*/
	res = create_drawing(); 
	if(res == -1){
		return(-1);
	}
      
	res = PM_OPEN_DRAWING(Current_Drawing_Name,PM_DRW_OFLG_EDIT,"","");
	if(res != 0){
		mess = "无法打开舾装件制造图:" + Current_Drawing_Name;
		U_MESSAGE(mess);
		return(-1);
	}
   
	/*创建舾装件制造图视图*/
	res = create_view();    
	if(res != 0){
		mess = "无法在舾装件制造图:" + Current_Drawing_Name + "中创建舾装件视图";
		U_MESSAGE(mess);
		return(-1);
	} 
   
	/*将舾装件视图分配到舾装件制造图中*/  
	res = assign_views_to_drawing();
	if(res != 0){
		mess = "无法将舾装件视图分配给舾装件制造图:" + Current_Drawing_Name;
		U_MESSAGE(mess);
		return(-1);
	}
      
	/*Get data of structural_unit part*/
	get_structural_unit_parts_information();
	if(res != 0){
		mess = "获取舾装件:" + Current_Structural_Unit_Name + "的制造图信息时出错";
		U_MESSAGE(mess);
		return(-1);
	}
            
	/* 获取舾装件材料表信息*/  
	res = get_mto_table();   
	if(res != 0){
		mess = "获取舾装件:" + Current_Structural_Unit_Name + "的材料信息时出错";
		U_MESSAGE(mess);
		return(-1);
	}
             
	/* 绘制材料表*/  
	res = draw_mto_table();
   
	get_reference_point_table();
   
	/*合并标注信息*/
	get_label_table();

	/*标注相关信息*/
	draw_label();

	/*获取尺寸标注信息*/
	get_dimension_table();

	/*标注尺寸*/
	draw_dimension();
	  
	/*设置标题信息*/
	set_header_field();
		
	/*保存舾装件制造图*/ 
	res = PM_SAVE_ACTIVE_DRW();
	if(res != 0){
		mess = "无法保存舾装件制造图:" + Current_Drawing_Name;
		U_MESSAGE(mess);
		return(-1);
	}
   
	/*CheckIn舾装件制造图*/
	res = PM_CHECK_IN_ACTIVE_DRW();
	if(res != 0){
		mess = "无法CheckIn舾装件制造图:" + Current_Drawing_Name;
		U_MESSAGE(mess);
		return(-1);
	}
   
	/*关闭舾装件制造图*/
	res = PM_CLOSE_ACTIVE_DRW();
	if(res != 0){
		mess = "无法关闭舾装件制造图:" + Current_Drawing_Name;
		U_MESSAGE(mess);
		return(-1);
	}
	return(0);
}

<<<<<<< HEAD
=======
get_reference_point_table()
{
	Reference_Point_Label_Number = 1;
	Reference_Point_Label_Table = alloc_2darray(1,4);
	label = "安装参考点";
	put_2darray(Reference_Point_Label_Table,0,0,label);
	x = get_2darray(Structural_Unit_Parts,0,3);
	y = get_2darray(Structural_Unit_Parts,0,4);
	z = get_2darray(Structural_Unit_Parts,0,5);      
	put_2darray(Reference_Point_Label_Table,0,1,x); 
	put_2darray(Reference_Point_Label_Table,0,2,y); 
	put_2darray(Reference_Point_Label_Table,0,3,z);     
}
>>>>>>> 03d2a0ef324914a1b03ea83aa183fde5444bc2cd

/* 设置标题栏中的相关信息 */
set_header_field()
{     
	return(0);   
}

get_structural_unit_weight()
{
	weight = 0;
	for(i=0;i<Structural_Unit_Part_Number;i=i+1;){
		part = PM_GET_MEMBER_IN_SET(Structural_Unit_Model_Set,i);
		mass = String_To_Float(PM_GET_OBJDATA(part,0,"MAS"));
		weight = weight + mass;
	}
	return(weight);
}

get_label_table()
{
	/*初始化标注全局数组*/
	Label_Number = Structural_Unit_Part_Number + Reference_Point_Label_Number;
	free_2darray(Label_Table);
	Label_Table = alloc_2darray(Label_Number,4);

	/*将零件编号标注加入到标注全局数组*/
	start = 0; 
	for(i=0;i<Structural_Unit_Part_Number;i=i+1;){
		put_2darray(Label_Table,start,0,"MTO");
		label = get_2darray(Mto_Label_Table,i,0);
		put_2darray(Label_Table,start,1,label);
		/*获取三维点的坐标*/     
		u = get_2darray(Mto_Label_Table,i,1); 
		v = get_2darray(Mto_Label_Table,i,2); 
		w = get_2darray(Mto_Label_Table,i,3);
		/*将三维坐标转换成平面坐标*/
		view_h = A_GET(View_Handles,3);
		Translate_3D_To_2D(view_h,View_Scale,View4_X,View4_Y,u,v,w);
		put_2darray(Label_Table,start,2,u);
		put_2darray(Label_Table,start,3,v);
		start = start + 1;      
	} 

	/*将连接点编号标注加入到标注全局数组*/
	for(i=0;i<Reference_Point_Label_Number;i=i+1;){
		/*for(i=0;i<2;i=i+1;){*/
		put_2darray(Label_Table,start,0,"CON");
		label = get_2darray(Reference_Point_Label_Table,i,0);
		put_2darray(Label_Table,start,1,label);
		/*获取三维点的坐标*/     
		x = get_2darray(Reference_Point_Label_Table,i,1); 
		y = get_2darray(Reference_Point_Label_Table,i,2); 
		z = get_2darray(Reference_Point_Label_Table,i,3);
		/*将三维坐标转换成平面坐标*/
		view_h = A_GET(View_Handles,3);
		Translate_3D_To_2D(view_h,View_Scale,View4_X,View4_Y,x,y,z);
		put_2darray(Label_Table,start,2,x);
		put_2darray(Label_Table,start,3,y);
		start = start + 1;      
	}       
   return(0);   
}

draw_label()
{
   /*计算视图每一个边最多的标注个数及间隔*/
   int label_number_per_side;
   label_number_per_side = Label_Number / 4;
   less_number = Label_Number - label_number_per_side * 4;
   if(less_number != 0){
      label_number_per_side = label_number_per_side + 1;
   }
   
   if(label_number_per_side < 8){
      label_number_per_side = 8;
   }
   
   gap = View_Size / label_number_per_side;
  
  
   /*创建一个数组，用于保存可能的标注位置*/
   temp = alloc_2darray(4*label_number_per_side,3);
   /*初始化相关变量*/
   x1 = View4_X - View_Size / 2;
   x2 = View4_X + View_Size / 2;
   y1 = View4_Y - View_Size / 2;
   y2 = View4_Y + View_Size / 2; 
   position_number = 0;
   for(i=0;i<label_number_per_side;i=i+1;){
      /*视图下部*/
      x = x1 + i * gap;
      y = y1;
      put_2darray(temp,position_number,0,"YES");
      put_2darray(temp,position_number,1,x);
      put_2darray(temp,position_number,2,y);
      position_number = position_number + 1;  
      /*视图右侧*/
      x = x2;
      y = y1 + i * gap;
      put_2darray(temp,position_number,0,"YES");
      put_2darray(temp,position_number,1,x);
      put_2darray(temp,position_number,2,y);
      position_number = position_number + 1;
      /*视图上部*/     
      x = x2 - i * gap;
      y = y2;
      put_2darray(temp,position_number,0,"YES");
      put_2darray(temp,position_number,1,x);
      put_2darray(temp,position_number,2,y);
      position_number = position_number + 1;
      /*视图左侧*/
      x = x1;
      y = y2 - i * gap;
      put_2darray(temp,position_number,0,"YES");
      put_2darray(temp,position_number,1,x);
      put_2darray(temp,position_number,2,y);
      position_number = position_number + 1;                     
   }
          
   /*开始标注*/
   style_name = "";
	drafting_style = GetFirstDraftingStyle(style_name); 
   dw = PM_START_PAGE_ANNOTATION(style_name);
   DW_ACTIVATEVIEW(dw);
      
   /*初始化标注标志*/
   label_mark = A_ALLOC(Label_Number);
   for(i=0;i<Label_Number;i=i+1;){
      A_PUT(label_mark,i,"YES");
   }
   
   /*循环查找距离最近的标注点和标注位置*/
   loop_mark = 1;
   while(loop_mark)
   {   
      /*循环查找离标注点最近的标注位置，并将其写在获得的标注位置上*/
      label_sequence = -1000;
      position_sequence = -1000;
      min_dis = 10000000;
      for(i=0;i<Label_Number;i=i+1;){          
         check = A_GET(label_mark,i);                 
         if(check == "YES"){
            x0 = get_2darray(Label_Table,i,2);
            y0 = get_2darray(Label_Table,i,3);                         
            for(j=0;j<4*label_number_per_side;j=j+1;){
               flag = get_2darray(temp,j,0);
               if(flag == "YES"){
                  x1 = get_2darray(temp,j,1);
                  y1 = get_2darray(temp,j,2);
                  u = x1 - x0;
                  v = y1 - y0;
                  distance = SQRT(u*u + v*v);
                  if(distance<min_dis){
                     min_dis = distance;
                     label_sequence = i;
                     position_sequence = j;
                  }                        
               }         
            } 
         } 
                   
      }     
      if(label_sequence != -1000 & position_sequence != -1000){
         /*获取标注内容、标注点位置并设置标志*/
         A_PUT(label_mark,label_sequence,"NO");
         type = get_2darray(Label_Table,label_sequence,0); 
         label = get_2darray(Label_Table,label_sequence,1);
         x0 = get_2darray(Label_Table,label_sequence,2);
         y0 = get_2darray(Label_Table,label_sequence,3);
         
         /*获取标注位置并设置标志*/
         put_2darray(temp,position_sequence,0,"NO");
         x = get_2darray(temp,position_sequence,1);
         y = get_2darray(temp,position_sequence,2); 
         
         /*根据不同的标准类型执行不同的标注*/
         if(type == "MTO"){
            draw_mto_label(label,x,y,x0,y0);
         }     
         else if(type == "CON"){
            draw_reference_point_label(label,x,y,x0,y0);
         }           
      }
      else{
         loop_mark=0;
      }
   }
   
   PM_TERMINATE_PAGE_ANNOTATION(1);
   return(0);
}

draw_reference_point_label(label,x0,y0,x01,y01)
{
   
   DW_COLOR(Reference_Point_Label_Text_Colour);
	DW_TSIZE(Reference_Point_Label_Text_Height);
	DW_TATTR(0.0,0.0,5);
	DW_TEXT(label,x0,y0);	      
	DW_COLOR(Reference_Point_Label_Leader_Line_Colour);
	DW_LTYPE(Reference_Point_Label_Leader_Line_Type,Reference_Point_Label_Leader_Line_PattenLength);
	nr_char = STRLEN(label)+2;
	length = (nr_char * Reference_Point_Label_Text_Height)/2;
	height = Reference_Point_Label_Text_Height;
	x1 = x0 - length - height/2;
	y1 = y0;
	x2 = x0 - length;
	y2 = y0 + height;
	x3 = x0 + length;
	y3 = y2;
	x4 = x0 + length + height/2;
	y4 = y1;
	x5 = x3;
	y5 = y0 - height;
	x6 = x2;
	y6 = y5;
	DW_POLY(x1,y1,x2,y2);
	DW_POLY(x2,y2,x3,y3);
	DW_POLY(x3,y3,x4,y4);
	DW_POLY(x4,y4,x5,y5);
	DW_POLY(x5,y5,x6,y6);
	DW_POLY(x6,y6,x1,y1);
	
	if(x01<x1){
	   x = x1;
	   y = y1;
	}
	else if(x01>x4){
	   x = x4;
	   y = y4;	   
	}
	else{
	   if(y01<y0){
   	   x = x0;
   	   y = y5;		      
	   }
	   else{
   	   x = x0;
   	   y = y2;	      
	   }	   
	}
	DW_POLY(x,y,x01,y01);
   return(0);
}

draw_mto_label(label,x0,y0,x1,y1)
{ 
   r = Mto_Label_Circle_Radius;
   DW_COLOR(Mto_Label_Text_Colour);
	DW_TSIZE(Mto_Label_Text_Height);
	DW_TATTR(0.0,0.0,5);
	DW_TEXT(label,x0,y0);	      
	DW_COLOR(Mto_Label_Leader_Line_Colour);
	DW_LTYPE(Mto_Label_Leader_Line_Type,Mto_Label_Leader_Line_PattenLength);
	DW_ARC(x0-r,y0,x0,y0,x0-r,y0);
	x_diff = x0-x1;
	y_diff = y0-y1;
	len = SQRT(x_diff*x_diff+y_diff*y_diff);
	x2 = x0 + Mto_Label_Circle_Radius*(x1-x0)/len;
	y2 = y0 + Mto_Label_Circle_Radius*(y1-y0)/len;
	DW_POLY(x2,y2,x1,y1);
	return(0);   
}

/*获取舾装件制造图名称*/
get_drawing_name()
{
   drawing_name = "";
   flag = 1;
   i = 0;
   while(flag){
      drawing_name = Current_Structural_Unit_Name + "-SK" + ITOASCII(i);
      doc_guid = "";
      res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);
      if(res <= 0){
         flag = 0;
      }     
      i = i + 1;
   }
   return(drawing_name);  
}

/*创建舾装件制造图*/
create_drawing()
{
	bom_set = PM_INIT_SET();
	header_tag_rec = DM_INIT_TAGREC();
	dname = "";
	icgd_name = Drawing_Form_Name;
	res = PM_CREATE_DRAWING(Current_Drawing_Name, "Structural_Unit_Drawing", PM_DRW_CFLG_GLOBAL, bom_set, icgd_name, header_tag_rec, dname);
	DM_FREE_TAGREC(header_tag_rec);
	if(res != 0){
		return(-1);
	}
   
	/*将生成的舾装件制造图名称写入舾装件的属性中*/
	Set_Attribute_Value(Structural_Unit_Handle,DrawingName,Current_Drawing_Name);
	PM_SAVE(0,1,1);
   
	/*将生成的舾装件制造图名称显示在格栅中*/
	id = find_structural_unit_grid_id(Structural_Unit_Handle);
	if(id != -1){
		W_SET_WINDOW_ARGS(DisplayGrid,W_LISTW_FINDID,id);
		row = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ROW);
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, row, W_LISTW_COLUMN, 2, W_LISTW_STRING, Current_Drawing_Name);
	}
   
	/*将舾装件制造图生成的日期显示到格栅中*/
	date_string = Get_Creation_Date(Current_Drawing_Name);
	if(!ISINT(date_string)){
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, row, W_LISTW_COLUMN, 3, W_LISTW_STRING, date_string);
	}   
	return(0); 
}

find_structural_unit_grid_id(handle structural_unit_handle)
{
	for(i=0;i<Object_Number;i=i+1;){
		obj_handle = PM_GET_MEMBER_IN_SET(Object_List,i);
		if(structural_unit_handle == obj_handle){
			return(i);
		}
	}
	return(-1);
}

/* 计算舾装件各个视图的相关参数并保存到全局数组中
   0.    ViewName       视图的名称后缀
   1~3.  Point          视图视点位置
   4~6.  Vdir           视图方向(应该是视向的反方向)
   7~9.  Vup            视图的向上方向
*/
get_structural_unit_view_para()
{   
	/* 获取舾装件所占的三维空间 */
	xmin = 0; ymin = 0; zmin = 0;xmax = 0;ymax = 0;zmax = 0;
	res = PM_GET_BBOX_OF_SET(Structural_Unit_Model_Set,xmin,xmax, ymin,ymax, zmin,zmax);
	if(res == -1){
		message = "无法计算舾装件:" + Current_Structural_Unit_Name + "所占的三维空间范围,无法生成舾装件";
		U_MESSAGE(message);
		return(-1);
	}
         
	/*为了使视图的可见性更好,将视图范围稍为放大一点*/
	xmin=xmin-100;
	ymin=ymin-100;
	zmin=zmin-100;
	xmax=xmax+100;
	ymax=ymax+100;
	zmax=zmax+100;

	/* 计算视图比例 */  
	length_x = xmax-xmin; 
	length_y = ymax-ymin;
	length_z = zmax-zmin;
	xx = length_x*length_x;
	yy = length_y*length_y;
	zz = length_z*length_z;
	length = SQRT(xx+yy+zz);
	View_Scale = length/View_Size;

	free_2darray(View_Info);
	View_Info = alloc_2darray(4,15);
	/* 设置视图名称后缀 */
	view_name = "Side";
	put_2darray(View_Info,0,0,view_name);
	view_name = "Front";
	put_2darray(View_Info,1,0,view_name);
	view_name = "Top";
	put_2darray(View_Info,2,0,view_name);
	view_name = "ISO1";
	put_2darray(View_Info,3,0,view_name);
	/* 计算视图视点位置 */
	view_point_x = (xmax - xmin)/2+xmin;
	view_point_y = ymin;
	view_point_z = (zmax - zmin)/2+zmin;
	put_2darray(View_Info,0,1,view_point_x);
	put_2darray(View_Info,0,2,view_point_y);
	put_2darray(View_Info,0,3,view_point_z);
	view_point_x = xmin;
	view_point_y = (ymax - ymin)/2+ymin;
	view_point_z = (zmax - zmin)/2+zmin;
	put_2darray(View_Info,1,1,view_point_x);
	put_2darray(View_Info,1,2,view_point_y);
	put_2darray(View_Info,1,3,view_point_z);   
	view_point_x = (xmax - xmin)/2+xmin;
	view_point_y = (ymax - ymin)/2+ymin;
	view_point_z = zmax;
	put_2darray(View_Info,2,1,view_point_x);
	put_2darray(View_Info,2,2,view_point_y);
	put_2darray(View_Info,2,3,view_point_z);  

	/* 计算视图视向 */
	view_dir_x = 0;
	view_dir_y = -1;
	view_dir_z = 0;
	put_2darray(View_Info,0,4,view_dir_x);
	put_2darray(View_Info,0,5,view_dir_y);
	put_2darray(View_Info,0,6,view_dir_z);   
	view_dir_x = -1;
	view_dir_y = 0;
	view_dir_z = 0;
	put_2darray(View_Info,1,4,view_dir_x);
	put_2darray(View_Info,1,5,view_dir_y);
	put_2darray(View_Info,1,6,view_dir_z);   
	view_dir_x = 0;
	view_dir_y = 0;
	view_dir_z = 1;
	put_2darray(View_Info,2,4,view_dir_x);
	put_2darray(View_Info,2,5,view_dir_y);
	put_2darray(View_Info,2,6,view_dir_z);  

	/* 计算视图向上方向 */
	view_up_dir_x = 0;
	view_up_dir_y = 0;
	view_up_dir_z = 1;
	put_2darray(View_Info,0,7,view_up_dir_x);
	put_2darray(View_Info,0,8,view_up_dir_y);
	put_2darray(View_Info,0,9,view_up_dir_z);   
	view_up_dir_x = 0;
	view_up_dir_y = 0;
	view_up_dir_z = 1;
	put_2darray(View_Info,1,7,view_up_dir_x);
	put_2darray(View_Info,1,8,view_up_dir_y);
	put_2darray(View_Info,1,9,view_up_dir_z);   
	view_up_dir_x = 0;
	view_up_dir_y = 1;
	view_up_dir_z = 0;
	put_2darray(View_Info,2,7,view_up_dir_x);
	put_2darray(View_Info,2,8,view_up_dir_y);
	put_2darray(View_Info,2,9,view_up_dir_z);

	/* 计算视图空间范围 */
	view_umin = -(xmax-xmin)/2;
	view_umax = (xmax-xmin)/2;
	view_vmin = -(zmax-zmin)/2;
	view_vmax = (zmax-zmin)/2;
	view_depth = ymax-ymin;
	put_2darray(View_Info,0,10,view_umin);
	put_2darray(View_Info,0,11,view_umax);
	put_2darray(View_Info,0,12,view_vmin); 
	put_2darray(View_Info,0,13,view_vmax);   
	put_2darray(View_Info,0,14,view_depth);
	view_umin = -(ymax-ymin)/2;
	view_umax = (ymax-ymin)/2;
	view_vmin = -(zmax-zmin)/2;
	view_vmax = (zmax-zmin)/2;
	view_depth = xmax-xmin;
	put_2darray(View_Info,1,10,view_umin);
	put_2darray(View_Info,1,11,view_umax);
	put_2darray(View_Info,1,12,view_vmin); 
	put_2darray(View_Info,1,13,view_vmax);   
	put_2darray(View_Info,1,14,view_depth);
	view_umin = -(xmax-xmin)/2;
	view_umax = (xmax-xmin)/2;
	view_vmin = -(ymax-ymin)/2;
	view_vmax = (ymax-ymin)/2;
	view_depth = zmax-zmin;
	put_2darray(View_Info,2,10,view_umin);
	put_2darray(View_Info,2,11,view_umax);
	put_2darray(View_Info,2,12,view_vmin); 
	put_2darray(View_Info,2,13,view_vmax);   
	put_2darray(View_Info,2,14,view_depth);

	/* 计算三维视图的相关参数 */
	rot = AxoRotAngle;
	slope = AxoSlopeAngle;
	vpx=0;vpy=0;vpz=0;vdx=0;vdy=0;vdz=0;udx=0;udy=0;udz=0;umin=0;vmin=0;umax=0;vmax=0;depth=0;
	compute_axo_params(rot, slope, xmin,xmax, ymin,ymax, zmin, zmax, vpx, vpy, vpz, vdx, vdy, vdz, udx, udy, udz, umin, vmin, umax, vmax, depth);   
	/*三维视图的视点*/
	put_2darray(View_Info,3,1,vpx);
	put_2darray(View_Info,3,2,vpy);
	put_2darray(View_Info,3,3,vpz);   
	/*三维视图的视向*/
	put_2darray(View_Info,3,4,vdx);
	put_2darray(View_Info,3,5,vdy);
	put_2darray(View_Info,3,6,vdz);
	/*三维视图的向上方向*/  
	put_2darray(View_Info,3,7,udx);
	put_2darray(View_Info,3,8,udy);
	put_2darray(View_Info,3,9,udz); 
	/* 三维视图的空间范围 */
	put_2darray(View_Info,3,10,umin);
	put_2darray(View_Info,3,11,umax);
	put_2darray(View_Info,3,12,vmin); 
	put_2darray(View_Info,3,13,vmax);   
	put_2darray(View_Info,3,14,depth);   
}

/*
	Compute axo view params.
	The code is borrowed from DefViews.mac
	
	Input args; rot, slope, xmin,xmax, ymin,ymax, zmin, zmax
	Output args: vpx, vpy, vpz, vdx, vdy, vdz, umin, vmin, umax, vmax, depth
*/

compute_axo_params(rot, slope, xmin,xmax, ymin,ymax, zmin, zmax, vpx, vpy, vpz, vdx, vdy, vdz, udx, udy, udz, umin, vmin, umax, vmax, depth)
{
	xxmin = xmin; 
	xxmax= xmax; 
	yymin= ymin; 
	yymax= ymax; 
	zzmin= zmin; 
	zzmax= zmax;

	set_m_x = (xxmin+xxmax)/2;
	set_m_y = (yymin+yymax)/2;
	set_m_z = (zzmin+zzmax)/2;
	
	xx2=(xxmax - xxmin)*(xxmax - xxmin);
	yy2=(yymax - yymin)*(yymax - yymin);
	zz2=(zzmax - zzmin)*(zzmax - zzmin);
	
	mbb_diag = SQRT( xx2+ yy2+ zz2);

    vdx = COS(rot)*COS(slope);
    vdy = SIN(rot)*COS(slope);
    vdz = SIN(slope);
    
    udx = COS(rot)*COS(slope+90);
    udy = SIN(rot)*COS(slope+90);
    udz = SIN(slope+90);    
    
    /*
    if( DEBUG )U_MESSAGE("rot "+FTOASCII(rot)+" slope "+FTOASCII(slope)+"vd "
    	+FTOASCII(vdx)+", "+FTOASCII(vdy)+", "+FTOASCII(vdz));
    	*/

	/*
		Position view point on the surface of a sphere with radius long enough so that
		the front plane does not clip objects in the active set.
	*/

	vpx = set_m_x + vdx*(mbb_diag/2 + 100);
	vpy = set_m_y + vdy*(mbb_diag/2 + 100);
	vpz = set_m_z + vdz*(mbb_diag/2 + 100);

	d = mbb_diag/2 + 100;

	/* Use default limits for axo view */
	umin = -d; umax = d; vmin = -d; vmax = d; depth = mbb_diag + 200;

	return(0);
}

/*创建舾装件视图*/
create_view()
{
	get_structural_unit_view_para();
	View_Handles = A_ALLOC(4);
	View_Names = A_ALLOC(4);
	for(i=0;i<4;i=i+1;){
		view_name = get_2darray(View_Info,i,0);
		A_PUT(View_Names,i,view_name);
		screen = "";
		display = "";
		in_drawing = 1;
		view_handle = PM_CREATE_VIEW(view_name,in_drawing, screen, display);
		set_view_parameter(view_handle,i);
		PM_VISUALIZE_SET_TO_VIEW(Structural_Unit_Model_Set,view_handle);
		A_PUT(View_Handles,i,view_handle);
	}
	return(0);
}

/*设置舾装件视图的参数*/
set_view_parameter(handle view_handle,int i)
{
   /* 设置视点 */
   view_point_x = get_2darray(View_Info,i,1);
   view_point_y = get_2darray(View_Info,i,2);
   view_point_z = get_2darray(View_Info,i,3);
   PM_SET_VIEW_PARAMETERS(view_handle, "POINT", view_point_x,view_point_y,view_point_z);   
   /* 设置视向 */
   view_dir_x = get_2darray(View_Info,i,4);
   view_dir_y = get_2darray(View_Info,i,5);
   view_dir_z = get_2darray(View_Info,i,6);
   PM_SET_VIEW_PARAMETERS(view_handle, "VDIR", view_dir_x,view_dir_y,view_dir_z);
   /* 设置视向上方向 */
   view_up_dir_x = get_2darray(View_Info,i,7);
   view_up_dir_y = get_2darray(View_Info,i,8);
   view_up_dir_z = get_2darray(View_Info,i,9);
   PM_SET_VIEW_PARAMETERS(view_handle, "VUP", view_up_dir_x,view_up_dir_y,view_up_dir_z);  
   /* 设置视向上方向 */
   umin = get_2darray(View_Info,i,10);
   umax = get_2darray(View_Info,i,11);
   vmin = get_2darray(View_Info,i,12);
   vmax = get_2darray(View_Info,i,13);
   depth = get_2darray(View_Info,i,14);
   PM_SET_VIEW_PARAMETERS(view_handle, "LIMITS", umin, umax, vmin, vmax, depth); 
   return(0);
}

get_structural_unit_parts_information()
{
   part_number = PM_NR_MEMBERS_IN_SET(Structural_Unit_Model_Set);
   parts = Structural_Unit_Model_Set;
   Structural_Unit_Part_Number = part_number;
   free_2darray(Structural_Unit_Parts);
   /*
   --0.  string   part number of part
   --1.  string   part description
   --2.  string   part length or quantity
   --3.  float    x postiont of part (start position of beam)
   --4.  float    y postiont of part (start position of beam)
   --5.  float    z postiont of part (start position of beam)
   --6.  float    x postiont of part (end position of beam)
   --7.  float    y postiont of part (end position of beam)
   --8.  float    z postiont of part (end position of beam)   
   */
   Structural_Unit_Parts = alloc_2darray(Structural_Unit_Part_Number,9);
   for(i=0;i<part_number;i=i+1;){
      part = PM_GET_MEMBER_IN_SET(parts,i);
      item_no = PM_GET_OBJDATA(part,i,Tag_PartNo);         
   }  
   for(i=0;i<part_number;i=i+1;){
      part = PM_GET_MEMBER_IN_SET(parts,i);
      put_2darray(Structural_Unit_Parts,i,0,ITOASCII(i+1));
      
      description = get_part_description(part);
      put_2darray(Structural_Unit_Parts,i,1,description);
      
      length = get_part_length(part);
      put_2darray(Structural_Unit_Parts,i,2,length);
      
      x1=0;y1=0;z1=0;x2=0;y2=0;z2=0;
      objgeom = PM_CREATE_PNTSET(10);
      PM_GET_OBJECT_GEOM(part, 0, objgeom);
      PM_GET_PNT(objgeom, 0, x1, y1, z1);
      PM_GET_PNT(objgeom, 1, x2, y2, z2);
      PM_FREE_PNTSET(objgeom); 
      put_2darray(Structural_Unit_Parts,i,3,x1);   
      put_2darray(Structural_Unit_Parts,i,4,y1); 
      put_2darray(Structural_Unit_Parts,i,5,z1); 
      put_2darray(Structural_Unit_Parts,i,6,x2); 
      put_2darray(Structural_Unit_Parts,i,7,y2); 
      put_2darray(Structural_Unit_Parts,i,8,z2);         
   }              
   return(0);
}

get_part_length(part)
{
   obj_type = PM_GET_OBJDATA(part,0,MMT_TAG_OBJTYPE);
   if(obj_type == "5"){
      len = String_To_Float(PM_GET_OBJDATA(part,0,MMT_TAG_LENGTH));
      length = "";
      S_PRINTF(length,"%.0f",len);
   }
   else{
      length = "1";
   }
   return(length);
}

get_part_description(part)
{
   part_id = PM_GET_OBJDATA(part,0,MMT_TAG_PARTID);
   obj_type = PM_GET_OBJDATA(part,0,MMT_TAG_OBJTYPE);
   shape = DM_PARTID_DATA(part_id,"SH");
   des = DM_PARTID_DATA(part_id,"U3f");
   if(obj_type == "4"){
      part_description = "方垫板";
   }
   /*Standard COMPONENT*/
   else if(obj_type == "2"){ 
      if(ISSTRING(des)){
         if(des == "管夹"){
            part_description = "管夹 DIN3567";
         }
         else{
            part_description = "三角垫板";
         }
      } 
      else{              
         part_description = "三角垫板";
      }
   }
   /*Beam*/
   else if(obj_type == "5"){
      if(shape == "61"){          
         part_description = "角钢";
      }
      else{
         part_description = "扁钢";
      }
   }
      
   if(obj_type == "4"){
      length_s = PM_GET_OBJDATA(part,0,MMT_TAG_PLATE_MINWIDTH);
      width_s  = PM_GET_OBJDATA(part,0,MMT_TAG_PLATE_MINHEIGHT);
      hight_s  = DM_PARTID_DATA(part_id,"D31");        
      part_size = length_s + "X" + width_s + "X" + hight_s + " R15";
   }
   else if(obj_type == "2"){
      if(part_description == "三角垫板"){       
         side_length = DM_PARTID_DATA(part_id,"D01"); 
         thickness = DM_PARTID_DATA(part_id,"D31");
         radius = DM_PARTID_DATA(part_id,"D32");         
         part_size = side_length + "X" + side_length + "X" + thickness + " R" + radius;
      }
      else{
         part_size = DM_PARTID_DATA(part_id,"DD");
         if(!ISSTRING(part_size)){
            part_size = "Unset";
         }         
      }
   }      
   else{      
      part_size = DM_PARTID_DATA(part_id,"DD");
      if(!ISSTRING(part_size)){
         part_size = "Unset";
      }
   }   
   
   description = part_description + " " + part_size;
   return(description);
}

get_mto_table()
{
   free_2darray(Mto_Table);
   free_2darray(Mto_Label_Table);
   Mto_Table = alloc_2darray(Structural_Unit_Part_Number,3);
   Mto_Label_Table = alloc_2darray(Structural_Unit_Part_Number,4);

   for(i=0;i<Structural_Unit_Part_Number;i=i+1;){
      item_no = get_2darray(Structural_Unit_Parts,i,0);
      put_2darray(Mto_Table,i,0,item_no);
      put_2darray(Mto_Label_Table,i,0,item_no);         
      
      description = get_2darray(Structural_Unit_Parts,i,1);
      put_2darray(Mto_Table,i,1,description);
      
      length = get_2darray(Structural_Unit_Parts,i,2);
      put_2darray(Mto_Table,i,2,length);
      
      if(length == "1"){            
         value = get_2darray(Structural_Unit_Parts,i,3);
         put_2darray(Mto_Label_Table,i,1,value);
         
         value = get_2darray(Structural_Unit_Parts,i,4);
         put_2darray(Mto_Label_Table,i,2,value);
         
         value = get_2darray(Structural_Unit_Parts,i,5);
         put_2darray(Mto_Label_Table,i,3,value);   
      }
      else{
         value1 = get_2darray(Structural_Unit_Parts,i,3);
         value2 = get_2darray(Structural_Unit_Parts,i,6);
         value = (value1 + value2)/2;
         put_2darray(Mto_Label_Table,i,1,value);
         
         value1 = get_2darray(Structural_Unit_Parts,i,4);
         value2 = get_2darray(Structural_Unit_Parts,i,7);
         value = (value1 + value2)/2;         
         put_2darray(Mto_Label_Table,i,2,value);
         
         value1 = get_2darray(Structural_Unit_Parts,i,5);
         value2 = get_2darray(Structural_Unit_Parts,i,8);
         value = (value1 + value2)/2;         
         put_2darray(Mto_Label_Table,i,3,value);                  
      }         
   }
   return(0);
}

/*获取舾装件尺寸标注信息*/
/* 舾装件尺寸标注表内容
1 - start_pos_x      起始标注点坐x标
2 - start_pos_y      起始标注点坐x标
3 - start_pos_z      起始标注点坐x标
4 - end_pos_x        末端标注点坐x标
5 - end_pos_y        末端标注点坐x标
6 - end_pos_z        末端标注点坐x标
7 - offset           尺寸标注的最小偏移尺寸
*/
get_dimension_table()
{
   if(Debug){
      U_MESSAGE("*************开始计算尺寸标注点*****************");
   }
   /*定义用于临时保存尺寸标注信息的数组*/  
   dim_table = alloc_2darray(100,7);  
   dim_number = 0;
   

   for(i=0;i<Structural_Unit_Part_Number;i=i+1;){
      part = PM_GET_MEMBER_IN_SET(Structural_Unit_Model_Set,i);     
      part_type = PM_GET_OBJDATA(part,0,MMT_TAG_OBJTYPE);
      if(part_type == "5"){
         part_id = PM_GET_OBJDATA(part,0,MMT_TAG_PARTID);            
         dim_offset = String_To_Float(DM_PARTID_DATA(part_id,"D32"));            
         x1 = get_2darray(Structural_Unit_Parts,i,3);
         y1 = get_2darray(Structural_Unit_Parts,i,4);
         z1 = get_2darray(Structural_Unit_Parts,i,5);            
         x2 = get_2darray(Structural_Unit_Parts,i,6);
         y2 = get_2darray(Structural_Unit_Parts,i,7);
         z2 = get_2darray(Structural_Unit_Parts,i,8);                                            
         put_2darray(dim_table,dim_number,0,x1); 
         put_2darray(dim_table,dim_number,1,y1);
         put_2darray(dim_table,dim_number,2,z1);
         put_2darray(dim_table,dim_number,3,x2);
         put_2darray(dim_table,dim_number,4,y2);
         put_2darray(dim_table,dim_number,5,z2);
         put_2darray(dim_table,dim_number,6,dim_offset);      
         dim_number = dim_number + 1;            
      }              
   }
      
   /*在命令行显示尺寸标注信息*/  
   if(Debug){
      for(i=0;i<dim_number;i=i+1;){
         node0_x = STRINGTERM(FTOASCII(get_2darray(dim_table,i,0)),".");
         node0_y = STRINGTERM(FTOASCII(get_2darray(dim_table,i,1)),".");
         node0_z = STRINGTERM(FTOASCII(get_2darray(dim_table,i,2)),".");
         node1_x = STRINGTERM(FTOASCII(get_2darray(dim_table,i,3)),".");
         node1_y = STRINGTERM(FTOASCII(get_2darray(dim_table,i,4)),".");
         node1_z = STRINGTERM(FTOASCII(get_2darray(dim_table,i,5)),".");
         offset =  STRINGTERM(FTOASCII(get_2darray(dim_table,i,6)),".");
         mess = ITOASCII(i) + ":  x1=" + node0_x + ",y1=" + node0_y + ",z1=" + node0_z + ";x2=" + node1_x + ",y2=" + node1_y + ",z2=" + node1_z;
         U_MESSAGE(mess);
      }
   }
   /*将尺寸标注信息存入全局变量*/
   Dim_Number = dim_number;
   free_2darray(Dim_Table);
   Dim_Table = alloc_2darray(Dim_Number,7);
   for(i=0;i<Dim_Number;i=i+1;){
      node0_x = get_2darray(dim_table,i,0);
      node0_y = get_2darray(dim_table,i,1);
      node0_z = get_2darray(dim_table,i,2);
      node1_x = get_2darray(dim_table,i,3);
      node1_y = get_2darray(dim_table,i,4);
      node1_z = get_2darray(dim_table,i,5);
      offset =  get_2darray(dim_table,i,6);

      put_2darray(Dim_Table,i,0,node0_x);
      put_2darray(Dim_Table,i,1,node0_y);
      put_2darray(Dim_Table,i,2,node0_z);   
      put_2darray(Dim_Table,i,3,node1_x);
      put_2darray(Dim_Table,i,4,node1_y);
      put_2darray(Dim_Table,i,5,node1_z);   
      put_2darray(Dim_Table,i,6,offset);       
   }
   free_2darray(dim_table);  
   if(Debug){
      U_MESSAGE("****************尺寸标注点计算结束**********************");
   }             
   return(0);
}

draw_mto_table()
{ 
   if(Structural_Unit_Part_Number == 0){
      return(0);
   }
	style_name = "";
	drafting_style = GetFirstDraftingStyle(style_name); 
   dw = PM_START_PAGE_ANNOTATION(style_name);
   DW_ACTIVATEVIEW(dw); 
  
   
	DW_COLOR(Mto_Table_Line_Colour);
	DW_LTYPE(Mto_Table_Line_Type,Mto_Table_Pattern_Length);  
	
	/*绘制横线*/
	line_number = Structural_Unit_Part_Number;
	if(Mto_Table_Direction == "Down" ){
	   for(i=1;i<=line_number;i=i+1;){
	      x1 = Mto_Table_Orign_X;
	      x2 = Mto_Table_Orign_X + Mto_Table_W;
	      y1 = Mto_Table_Orign_Y - i * Mto_Table_H;
	      y2 = y1;
	      DW_POLY(x1,y1,x2,y2);
	   }
   }
   else{
	   for(i=1;i<=line_number;i=i+1;){
	      x1 = Mto_Table_Orign_X;
	      x2 = Mto_Table_Orign_X + Mto_Table_W;
	      y1 = Mto_Table_Orign_Y + i * Mto_Table_H;
	      y2 = y1;
	      DW_POLY(x1,y1,x2,y2);
	   }      
   }
	/*绘制竖线*/
	line_number = Structural_Unit_Part_Number;
	h1 = line_number * Mto_Table_H;
	if(Mto_Table_Direction == "Down" ){
	   x1 = x1 + Mto_Table_Column1_W;
	   y1 = Mto_Table_Orign_Y;
	   x2 = x1;
	   y2 = y1 - h1;
	   DW_POLY(x1,y1,x2,y2);
	   x1 = x1 + Mto_Table_Column2_W;
	   y1 = Mto_Table_Orign_Y;
	   x2 = x1;
	   y2 = y1 - h1;
	   DW_POLY(x1,y1,x2,y2);	   	      	   	  
   }
   else{
	   x1 = x1 + Mto_Table_Column1_W;
	   y1 = Mto_Table_Orign_Y;
	   x2 = x1;
	   y2 = y1 + h1;
	   DW_POLY(x1,y1,x2,y2);
	   x1 = x1 + Mto_Table_Column2_W;
	   y1 = Mto_Table_Orign_Y;
	   x2 = x1;
	   y2 = y1 + h1;
	   DW_POLY(x1,y1,x2,y2);	        
   } 
   /*写材料表内容*/ 
   DW_COLOR(Mto_Table_Text_Colour);
	DW_TSIZE(Mto_Table_Text_Height);
	DW_TATTR(0.0,0.0,4);
   for(i=0;i<Structural_Unit_Part_Number;i=i+1;){
	   if(Mto_Table_Direction == "Down" ){         	   
         x = Mto_Table_Orign_X + 1;
         y = Mto_Table_Orign_Y - Mto_Table_H * (i + 0.5);
         text = get_2darray(Mto_Table,i,0);
         DW_TEXT(x, y, text);      
         
         x = x + Mto_Table_Column1_W;
         y = Mto_Table_Orign_Y - Mto_Table_H * (i + 0.5);
         text = get_2darray(Mto_Table,i,1);
         DW_TEXT(x, y, text);  
         
         x = x + Mto_Table_Column2_W;
         y = Mto_Table_Orign_Y - Mto_Table_H * (i + 0.5);
         text = get_2darray(Mto_Table,i,2);
         DW_TEXT(x, y, text);  	      
	   }
	   else{
         x = Mto_Table_Orign_X + 1;
         y = Mto_Table_Orign_Y + Mto_Table_H * (i + 0.5);
         text = get_2darray(Mto_Table,i,0);
         DW_TEXT(x, y, text);      
         
         x = x + Mto_Table_Column1_W;
         y = Mto_Table_Orign_Y + Mto_Table_H * (i + 0.5);
         text = get_2darray(Mto_Table,i,1);
         DW_TEXT(x, y, text);  
         
         x = x + Mto_Table_Column2_W;
         y = Mto_Table_Orign_Y + Mto_Table_H * (i + 0.5);
         text = get_2darray(Mto_Table,i,2);
         DW_TEXT(x, y, text);  
	   }      
   }  
  	
   PM_TERMINATE_PAGE_ANNOTATION(1);
}

draw_dimension()
{
   if(Debug){
      U_MESSAGE("**************开始标注尺寸***************");
   }
   /*开始标注*/
   style_name = "";
	drafting_style = GetFirstDraftingStyle(style_name); 
   dw = PM_START_PAGE_ANNOTATION(style_name);
   DW_ACTIVATEVIEW(dw);      
   
   for(i=0;i<Dim_Number;i=i+1;){
      /*计算标注尺寸值*/
      x0 = get_2darray(Dim_Table,i,0);
      y0 = get_2darray(Dim_Table,i,1);
      z0 = get_2darray(Dim_Table,i,2);
      x1 = get_2darray(Dim_Table,i,3);
      y1 = get_2darray(Dim_Table,i,4);
      z1 = get_2darray(Dim_Table,i,5); 
      offset = get_2darray(Dim_Table,i,6);
      x=x1-x0;y=y1-y0;z=z1-z0;     
      dim_value = SQRT(x*x+y*y+z*z);   
      for(j=0;j<3;j=j+1;){
         view = A_GET(View_Handles,j);
         draw_view_dim(j,view,x0,y0,z0,x1,y1,z1,dim_value,offset);
      }
   }
   /*结束标注*/ 
   PM_TERMINATE_PAGE_ANNOTATION(1);
   return(0); 

}

/*Add dimension to VIEW*/
draw_view_dim(int i,handle view_h,float x0,float y0,float z0,float x1,float y1,float z1,float value, float offset)
{  
   /*将坐标拷贝到本地变量，否则影响下一个视图的标注*/
   u0=x0;v0=y0;w0=z0;u1=x1;v1=y1;w1=z1;

   /*将三维坐标转换成对应的平面坐标*/
   if(i==0){
      Translate_3D_To_2D(view_h,View_Scale,View1_X,View1_Y,u0,v0,w0);
      Translate_3D_To_2D(view_h,View_Scale,View1_X,View1_Y,u1,v1,w1);
   }
   else if(i==1){
      Translate_3D_To_2D(view_h,View_Scale,View2_X,View2_Y,u0,v0,w0);
      Translate_3D_To_2D(view_h,View_Scale,View2_X,View2_Y,u1,v1,w1);
   }
   else if(i==2){
      Translate_3D_To_2D(view_h,View_Scale,View3_X,View3_Y,u0,v0,w0);
      Translate_3D_To_2D(view_h,View_Scale,View3_X,View3_Y,u1,v1,w1);
   }
   
   /*如果零件尺寸在视图上的投影长度过小，则忽略这个标注*/
   distance = SQRT((u0-u1)*(u0-u1)+(v0-v1)*(v0-v1));
   if(distance<1){
      return(0);
   } 
     
	if(ActivateDeActivate2D(view_h, 1) < 0){
		msg = "无法启动尺寸标注";
		U_MESSAGEBOX(msg, U_MB_ERROR, U_MB_OK, U_OK);
		return(-1);
	}

   /*将坐标拷贝到本地变量，否则影响下一个视图的标注*/
   u0=x0;v0=y0;w0=z0;u1=x1;v1=y1;w1=z1; 
   	
	PM_VIEW_TRANSFORMATION(view_h,1,u0,v0,w0);
	PM_VIEW_TRANSFORMATION(view_h,1,u1,v1,w1);
	
   /*计算标注值*/
   dim_text = "";
   S_PRINTF(dim_text,"%.0f",value);
    
   add_2p_dimension(view_h, 7, u0, v0, w0, u1, v1, w1, 2, offset, 2.5, 2, 2, 1, dim_text, 4);
      
   return(0);
}

main()
{	
	init();
	mainform  = create_top_frame();
	Panel_upperpart = create_panel_upperpart(mainform);
	DisplayGrid  = create_grid(mainform);
	command = create_command(mainform);
	set_default();
		
	MainWindow = mainform;
	
	W_MAP_FRAME(mainform);
	W_RUN_FRAME(mainform);
	W_UNMAP_FRAME(mainform);
	W_DESTROY_FRAME(mainform);
}

exit()
{
	current_drawing = PM_GET_ACTIVE_DRW_NAME();
	if(current_drawing != ""){
	   PM_SAVE_ACTIVE_DRW();
	   PM_CHECK_IN_ACTIVE_DRW();
	   PM_CLOSE_ACTIVE_DRW();	   
	}
	/* 将已经加亮的模型恢复原来的颜色 */
	model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
	for (i = 0 ; i < model_number; i = i + 1){
		model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
		Highlight_Object(model,FALSE);
	}	
	/* 释放相关资源 */		
	PM_FREE_SET(Object_List);
	PM_FREE_SET(High_Light_List);
	PM_FREE_SET(Selected_Objects);
	PM_FREE_SET(Structural_Unit_Model_Set);
	A_FREE(Drawing_Tag_Array);
	A_FREE(Column_Description_Array);
	A_FREE(View_Handles);
	A_FREE(View_Names);
	free_2darray(Object_Info);
	free_2darray(View_Info);
	free_2darray(Mto_Table);
	free_2darray(Mto_Label_Table);
	free_2darray(Label_Table);
	free_2darray(View_Positions);
	free_2darray(Reference_Point_Label_Table);
	free_2darray(Dim_Table);
	free_2darray(Structural_Unit_Parts);
}

set_column_title(handle wobj, column_titles, column_number)
{
	for (i = 0; i < column_number; i = i + 1;)
	{
		title = A_GET(column_titles,i);
		if (ISSTRING(title))
		{
			W_SET_WINDOW_ARGS(wobj, W_LISTW_COLUMN, i, W_LISTW_HEADER, title);
			W_SET_WINDOW_ARGS(wobj, W_LISTW_COLUMN, i, W_LISTW_COLUMNWIDTH,-1);
			W_SET_WINDOW_ARGS(wobj, W_LISTW_COLUMN, i, W_LISTW_ITEMTYPE, W_LISTW_STRING_COLUMN); 
		}
		else 
		{
			return(0);
		}
	}
	return(0);
}

/*Added by Pekka Martin April 2010*/
export_active_drw(format, template_dwr, output_dir)
{
	rec = DM_INIT_TAGREC(); 
	DM_SET_TAGVAL(rec, G2D_EXT_TAG_OUTPUT_DIR, output_dir);
	DM_SET_TAGVAL(rec, G2D_EXT_TAG_TEMPLATE_DRW, template_dwr);
	DM_SET_TAGVAL(rec, G2D_EXT_TAG_FORMAT, ITOASCII(format));
	DM_SET_TAGVAL(rec, G2D_EXT_TAG_ONE_TO_ONE_SCALING, "0");
	
	r = PM_EXPORT_ACTIVE_DRW(rec);
	
	DM_FREE_TAGREC(rec);
	
	return(r);
}

set_dimensioning_properties(float scale)
{
	DW_TSLANT(0);
	DW_TTYPE(0);
	DW_DIMFORM("%Qa");
	
	DW_LAYER(DimLineLayer);
	DW_PEN(DimLinePen);
	DW_COLOR(DimLineColor);
	DW_TSIZE(scale * DimTextHeight, scale * DimTextWidth, scale * DimTextSpc);
	DW_DIMSYMHGHT(scale * DimSymHeight);
	
	DW_DIMVALDIST(scale * 1.0);
	DW_DIMOFFSETEX(scale * 1.0);
	DW_DIMSYM(1, 1);
	DW_ZLEVEL(0);
	
	return(0);
}

add_2p_dimension(handle view_h, int dim_type, float u1, float v1, float w1, float u2, float v2, float w2, int location, float distance, float txt_h, float txt_w, float txt_s, float sym_h, string dim_text, float gap)
{
	dum = 0.0;	scale = 0.0;
	DW_GET_VIEW_PARAMS(dum, dum, dum, dum, dum, dum, scale);
	
	ddu = u2 - u1;
	ddv = v2 - v1;
	ddw = 0.0;
	
	/*如果是水平标注*/
	if(dim_type == 1){
		if(ddu < 1.0 & ddu > -1.0) return(0);
		ddv = 0.0;
	}
	/*如果是垂直标注*/
	else if(dim_type == 4){
		if(ddv < 1.0 & ddv > -1.0) return(0);
		ddu = 0.0;
	}
	
	/* dimension text */
	len = VEC_UNITV(ddu, ddv, ddw);
	dim_string = "";
	S_PRINTF(dim_string, "%.0f", len);
	nr_char = STRLEN(dim_text);
	dim_string_len = nr_char * txt_w + (nr_char - 1) * txt_s;
	text_move = scale * (sym_h + dim_string_len/2);
	set_dimensioning_properties(scale);
	level = distance + scale*gap;
	
	level = 2*level;
		
	/* the normal */
	ndu = -ddv;
	ndv = ddu;
	if(FloatsEqual(v1, v2, 0.1))
		dim_type = 1;
	else if(FloatsEqual(u1, u2, 0.1))
		dim_type = 4;
	else if(FloatsEqual(v1, v2, 1.5) & FloatsEqual(ddv/ddu, 0, 0.005))
		dim_type = 1;
	else if(FloatsEqual(u1, u2, 1.5) & FloatsEqual(ddu/ddv, 0, 0.005))
		dim_type = 4;
	DW_DIMTYPE(dim_type);
	
	if(location == 1){
		DW_DIMSYM(2, 2);
		text_u = u1 - ddu * text_move + ndu * level;
		text_v = v1 - ddv * text_move + ndv * level;
		if(dim_type == 1 & v2 > v1)
			text_v = v2 + ndv * level;
		else if(dim_type == 4 & u2 < u1)
			text_u = u2 + ndu * level;
	}
	else if(location == 2){
		text_u = (u1 + u2)/2 + ndu * level;
		text_v = (v1 + v2)/2 + ndv * level;
		if(dim_type == 1 & v2 > v1)
			text_v = v2 + ndv * level;
		else if(dim_type == 1 & v2 < v1)
			text_v = v1 + ndv * level;
		else if(dim_type == 4 & u1 > u2)
			text_u = u2 + ndu * level;
		else if(dim_type == 4 & u1 < u2)
			text_u = u1 + ndu * level;
	}
	else if(location == 3){
		DW_DIMSYM(2, 2);
		text_u = u2 + ddu * text_move + ndu * level;
		text_v = v2 + ddv * text_move + ndv * level;
		if(dim_type == 1 & v1 > v2)
			text_v = v1 + ndv * level;
		else if(dim_type == 4 & u1 < u2)
			text_u = u1 + ndu * level;
	}
	
	DW_OPNDIM();
	DW_PNT(text_u, text_v, w1);	/* dim text level		*/
	DW_PNT(u1, v1, w1);				/* first end point		*/
	DW_DIMVAL("","", dim_text);	/* dimension value		*/
	DW_DIMVALORG(text_u, text_v);	/* dim text location	   */
	DW_PNT(u2, v2, w2);				/* second end point		*/
	DW_CLSDIM();
	
	return(0);
}
