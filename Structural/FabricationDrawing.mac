/* $Id: FabricationDrawing.mac,v1.0.0 2016/06/29 Wallis.liu $ */

/*
**	This script use to generate fabrication drawing of general structural unit 
*/
#include "include/array.mac"
#include "include/cos.h"
#include "include/dw.h"
#include "include/dmutil.h"
#include "include/dm_errors.h"
#include "include/dm_cos_schema.h"
#include "include/dmrpt.h"
#include "include/geoutils.h"
#include "include/g2d_ext2df.h"


#include "include/PmMgeTags.h"
#include "include/pm.h"
#include "include/pm_errors.h"
#include "include/pm_drawings.h"
#include "include/pm_core_tags.h"
#include "include/pm_annot.h"
#include "include/PmPipingUtils.h"
#include "include/pi_math.mac" 
#include "include/pi.h"
#include "include/pm_rfh.h"
#include	"include/quants.h"
#include "include/sym.h"
#include "include/win.h"
#include "include/win_panel.h"
#include "opt/pm/EloTools/include/viewutilsELO.h"

#include "$MarineToolkit/Structural/FabricationDrawing.h"
#include "$MarineToolkit/Structural/ProductionInformation.h"
#include "$MarineToolkit/Include/Common_Utility.h"
#include "$MarineToolkit/Include/String_Utility.h"
#include "$MarineToolkit/Include/Math_Utility.h"
#include "$MarineToolkit/Include/Drawing_Utility.h"
#include "$MarineToolkit/Include/Structural_Utility.h"
#include "$MarineToolkit/Include/license.h"

global   handle	Block_Name,Planning_Unit,Pro_Number,Dra_Number,Start_Page;
global   handle	DisplayGrid;
global   handle	NULL_HANDLE = 0;
global   int		Grid_SelectedItem = 0;
global   int		Grid_SortColumn = -1;
global   int		Grid_SortDirection = 1;
global   handle	Object_List;          	
global   handle	Drawing_Tag_Array, Column_Description_Array;
global   handle	Object_Info;				   
global   int		Object_Number = 0;	      
global   int		Model_Add_Mode = 0;        
global   handle	High_Light_List;           
global   handle	Selected_Objects;
global   int		Selected_Objects_Number = 0;
global   int		AutoScale = 0;
global   int		AutoHighLight = 0;
global   handle	MainWindow;
global   int		Maximum_Object_Number = 1000;
                  
global   handle	Process, Cur_Drawing;
global   string	Cur_UnitName = "",Cur_Drawing_Name = "";
global   handle   Drawing_Form, Select_Form;
global   string	Drawing_Form_Name = "";
global   handle   Drawing,Drawing_View_Top,Drawing_View_AFT,Drawing_View_SB,Drawing_View_ISO;
global   handle	Open_Next,Open_Previous;

global   int		Reference_Point_Label_Number = 0;
global   handle	Reference_Point_Label_Table;
global   int		Model_Part_Number = 0; 		/* 舾装件零件个数	*/
global   int		Part_Label_Number = 0; 		/* 零件标注个数		*/
global   handle	Part_Label_Array;      		/* 零件标注信息数组	*/

global   handle	Model_Handle, Model_Set;
global   float		Support_Weight = 0.0;
global   string	PS_DrawingNo = "";
global   int		Debug = 1; 
global	int		Part_Label_Mode = 1;


global string   Icon_My_Check_Out =         "$MarineToolkit/ICONS/mycheckout.ico";
global string   Icon_Other_Check_Out =      "$MarineToolkit/ICONS/checkout.ico";
global string   Icon_Local_Server =         "$MarineToolkit/ICONS/local_server.ico";
global string   Icon_Replica_Check_Out =    "$MarineToolkit/ICONS/replica_checkout.ico";
global string   Icon_Replica_Server =       "$MarineToolkit/ICONS/replica.ico";
global string   Icon_Error =                "$MarineToolkit/ICONS/error.ico";
global handle   Access_List;                /*用于保存模型权限状态的数组*/

/*定义主窗口的列数*/
#define  Column_Number 8
/*
**初始化相关对象
*/
init()
{
	Drawing_Tag_Array = A_ALLOC(Column_Number, "STRING");
	A_PUT(Drawing_Tag_Array,0,Tag_Block_Number);
	A_PUT(Drawing_Tag_Array,1,Tag_PlanningUnit);
	A_PUT(Drawing_Tag_Array,2,MMT_TAG_OBJNAME);
	A_PUT(Drawing_Tag_Array,3,Tag_DrawingStatus);
	A_PUT(Drawing_Tag_Array,4,Tag_FabDrawingNo);
	A_PUT(Drawing_Tag_Array,5,Tag_CreationTime);
	A_PUT(Drawing_Tag_Array,6,"");
	A_PUT(Drawing_Tag_Array,7,"");
	
	Column_Description_Array = A_ALLOC(Column_Number, "STRING");
	A_PUT(Column_Description_Array,0,"分段名称");
	A_PUT(Column_Description_Array,1,"托盘编号");
	A_PUT(Column_Description_Array,2,"舾装件名称");
	A_PUT(Column_Description_Array,3,"工艺状态");
	A_PUT(Column_Description_Array,4,"制作图名称");
	A_PUT(Column_Description_Array,5,"生成日期");
	A_PUT(Column_Description_Array,6,"页码");
	A_PUT(Column_Description_Array,7,"总页数");

	Object_Info = alloc_2darray(1,1);	
	Mto_Table = alloc_2darray(1,1);	
	Mto_Label_Table = alloc_2darray(1,1);
	View_Info = alloc_2darray(1,1);
	View_Positions = alloc_2darray(1,1);	
	Part_Label_Array = alloc_2darray(1,1);	
	View_Handles = A_ALLOC(1);
	View_Names = A_ALLOC(1);         	
	View_Positions = alloc_2darray(4,2);
	put_2darray(View_Positions,0,0,View1_X);
	put_2darray(View_Positions,0,1,View1_Y);
	put_2darray(View_Positions,1,0,View2_X);
	put_2darray(View_Positions,1,1,View2_Y);	
	put_2darray(View_Positions,2,0,View3_X);
	put_2darray(View_Positions,2,1,View3_Y);	
	put_2darray(View_Positions,3,0,View4_X);
	put_2darray(View_Positions,3,1,View4_Y);
	Model_Set = PM_INIT_SET();
    Access_List = A_ALLOC(1);	
}

set_default()
{
	/*initialize object list*/
	Object_List = PM_INIT_SET();

	/*initialize highlighted object list*/
	High_Light_List = PM_INIT_SET();	
	
	/*initialize selected object list*/
	Selected_Objects = PM_INIT_SET();
	
	drawing_form = "";
	
	st = GET_STRING_DEFAULT("StructuralFabricationDrawing", "Drawing_Form", drawing_form);	
	if(st == 0){
		W_SET_PANELITEM_ARGS(Drawing_Form, W_PANEL_VALUE, drawing_form);	  
		Drawing_Form_Name = drawing_form;
	}
	else{
		W_SET_PANELITEM_ARGS(Drawing_Form,W_PANEL_VALUE,"SDARI_A3_OutfittingFabrication");
		Drawing_Form_Name = "SDARI_A3_OutfittingFabrication";	
	}

	pro_number = Get_Project_Attribute(Tag_Pro_ShipNumber);
	if(ISSTRING(pro_number)){
		W_SET_PANELITEM_ARGS(Pro_Number,W_PANEL_VALUE,pro_number);	
		
	}	
}

/*
**Get the selected objects in grid
*/
get_selected_items(handle wobj)
{
	PM_SETOP_SUB(Selected_Objects, Selected_Objects);
	selected_rows = W_GET_WINDOW_ARG( wobj, W_LISTW_MSVALUE );
	total_lines = STRLEN(selected_rows);
	k = 0;
	for (i = 0; i < total_lines; i = i + 1){
		temp_string = SUBSTRING(selected_rows,i);
		flag = HEAD(temp_string,1);
		if (flag == "1"){
			res = W_SET_WINDOW_ARGS( wobj, W_LISTW_ROW, i);
			selected_row = W_GET_WINDOW_ARG( wobj, W_LISTW_ITEMID );	
			model_handle = PM_GET_MEMBER_IN_SET(Object_List, selected_row);	
			PM_ADD_OBJECT_TO_SET(model_handle,Selected_Objects);
			k = k + 1;
		}
	}
	Selected_Objects_Number = k;
	return (0);
}

model_list_mode(item, event_type, selection)
{
	if (selection == 0){
		Model_Add_Mode = 0;
	}
	else{
		Model_Add_Mode = 1;
	}
	return(0);
}

part_label_mode(item, event_type, selection)
{
	if (selection == 0){
		Part_Label_Mode = 0;
	}
	else{
		Part_Label_Mode = 1;
	}
	return(0);
}

/*
**get information of objects stored in Object_List and save to ProdInfo array；
*/
get_model_info()
{	
	/* define array for information of model groups */
	A_FREE(Object_Info);
	Object_Info = alloc_2darray(Object_Number,Column_Number);
	A_FREE(Access_List);
	Access_List = A_ALLOC(Object_Number);    
	/* get information of model groups and save in array */	
	for (i = 0; i < Object_Number; i = i + 1;){		
		object_handle = PM_GET_MEMBER_IN_SET(Object_List, i);	
		parts = get_structural_unit_parts(object_handle);
		part0 = PM_GET_MEMBER_IN_SET(parts,0);
		/*get block of model group*/
		block_name = PM_GET_OBJDATA(part0,1,Tag_Block_Number);
		if(ISSTRING(block_name)){
		   put_2darray(Object_Info,i,0,block_name);
		}
		else{
		   put_2darray(Object_Info,i,0,"Undefine");
		}	
		/*get planning unit of model group*/
		planning_unit = PM_GET_OBJDATA(part0,1,Tag_PlanningUnit);
		if(ISSTRING(planning_unit)){
		   put_2darray(Object_Info,i,1,planning_unit);
		}
		else{
		   put_2darray(Object_Info,i,1,"Undefine");
		}			
		/*get name of model group*/	
		unit_name = PM_GET_OBJDATA(object_handle,0,MMT_TAG_OBJNAME);
       
		if(ISSTRING(unit_name)){
		   put_2darray(Object_Info,i,2,unit_name);
		}
		else{
		   put_2darray(Object_Info,i,2,unit_name);
		}
		/*status of model group*/
		unit_status = PM_GET_OBJDATA(object_handle,0,Tag_DrawingStatus);
		if(ISSTRING(unit_status)){
		   put_2darray(Object_Info,i,3,unit_status);
		}
		else{
		   put_2darray(Object_Info,i,3,"未检查");
		}		
		/*get drawing name and the date of creation*/
		drawing_name = PM_GET_OBJDATA(object_handle,0,Tag_FabDrawingNo);
		if(!ISINT(drawing_name)){
		   put_2darray(Object_Info,i,4,drawing_name);
		   date_string = Get_Creation_Date(drawing_name);
		   if(!ISINT(date_string)){
		      put_2darray(Object_Info,i,5,date_string);
		   }
		   else{
		      put_2darray(Object_Info,i,5,"0000-00-00");
		   }		   
		}
		else{
		   put_2darray(Object_Info,i,4,"未生成");
		   put_2darray(Object_Info,i,5,"0000-00-00");
		}
        access = Get_Object_Access_Status(object_handle);
		A_PUT(Access_List,i,access);
	}	
	return 0;
}

get_structural_unit_parts(obj_h)
{
    objects = PM_GET_OBJECTS_IN_GROUP(obj_h,1);
	obj_number = PM_NR_MEMBERS_IN_SET(objects);
	parts = PM_INIT_SET();
	for(i=0;i<obj_number;i=i+1;){
		nth = 0;
		object = PM_GET_MEMBER_IN_SET(objects,i);
		obj_type = PM_GET_OBJDATA(object,nth,MMT_TAG_OBJTYPE);
		if(obj_type == "3"){
			parts_number = PM_NR_PARTS_IN_PIPE(object);
			for(j=0;j<parts_number;j=j+1;){
				part_obj_id = PM_GET_OBJDATA(object,j+1,MMT_TAG_OBJID);
				part_handle = PM_FIND_BY_OBJID(part_obj_id);
				PM_ADD_OBJECT_TO_SET(part_handle,parts);
			}
		}	
		else{
			PM_ADD_OBJECT_TO_SET(object,parts);
		}
	}
    return(parts);
}

/*
**display informations stored in global array 'object_info' in grid；
**sort grid according to the value of global argue Grid_SortColumn，Grid_SortDirection；
*/
publish_model_info()
{
	/* display informations of structural unit in grid */	
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_DELETEROWS, -1); 
	for (i = 0; i < Object_Number; i = i + 1;){
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_INSERTROWS, 1);
		/*set access status flag of group*/
		flag = A_GET(Access_List,i);
		icon = Icon_My_Check_Out;
		if(flag == "Local"){
		   icon = Icon_Local_Server;
		}
		else if(flag == "CheckOutByMe"){
		   icon = Icon_My_Check_Out;
		}
		else if(flag == "CheckOutByOther"){
		   icon = Icon_Other_Check_Out;
		}
		else if(flag == "Replica"){
		   icon = Icon_Replica_Server;
		}
		else if(flag == "CheckOutByReplicaUser"){
		   icon = Icon_Replica_Check_Out;
		}
		else{
		   icon = Icon_Error;
		} 
        W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0, W_LISTW_COLUMN, 0, W_LISTW_ICON, icon );        
		for ( j = 0; j < Column_Number; j = j + 1;){
			Value = get_2darray(Object_Info,i,j);
			if (ISSTRING(Value)){
				W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0, W_LISTW_COLUMN, j, W_LISTW_STRING, Value);
			}
		}
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ITEMID, i);
	}
	
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 1);
	
	/* Adjust the width of column automatically*/
	for (i=0; i < Column_Number; i = i + 1;){
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_COLUMN, i, W_LISTW_COLUMNWIDTH, -1);
	}
	
	/* Sort grid */
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_COLUMN, Grid_SortColumn, W_LISTW_SORT, Grid_SortDirection);
}

/*
**Create Top frame
*/
create_top_frame()
{
	mainform = W_INIT_FRAME();
	W_REALIZE_WINDOW(mainform,  W_FRAME_TITLE, "舾装件制造图生成工具",
                                W_FRAME_RESIZABLE,  W_RESIZE_HORIZONTALLY);
	return(mainform);
}

/*
**create grid for displaying information of model group
*/
create_grid(main_form)
{
	wobj = W_ADD_WINDOW(main_form, W_MULTISELECT, "DisplayGrid");
						   
	W_REALIZE_WINDOW(wobj,  W_FRAME_RIGHT_OF,    	"Block_Name",
							W_FRAME_BELOW,       	"panel_upperpart",
							W_LISTW_COLUMNS,     	Column_Number,
							W_FRAME_SCROLLBAR,   	W_SCROLLBAR_RIGHTEDGE,
							W_LISTW_HEADER_MODE, 	W_LISTW_HEADER_BUTTONS,
                            W_FRAME_RESIZABLE,      W_RESIZE_HORIZONTALLY,
							W_LISTW_MODE_REPORT, 	0,
							W_FRAME_COLS,        	75, 
							W_FRAME_ROWS,        	17,
							W_LISTW_CALLBACK,    	1);
						   
	W_SET_WINDOW_HANDLER(wobj, "grid_handler");
	
	/*
	**set the column title of grid
	*/	
	set_column_title(wobj, Column_Description_Array, Column_Number);
		
	return(wobj);
}


quit_handler(item, event_type, button_value)
{
	exit();
	U_MESSAGE("舾装件制造图生成工具");
	return(99);
}


grid_handler(window, event_type, row, column, item_id)
{  	
	if (event_type == W_EVENT_ITEM_SELECTED) {
		/* handle sort of grid */
		if (row < 0 & column >= 0) {
			sort_grid(column,window);
		}		
		else if(row >= 0 & column == 0){		
			/* get selected objects in grid */				
			get_selected_items(DisplayGrid);			
			auto_highlight();
			auto_scale_model();			
		}		
	}	
	/* handle double click event */
	else if (event_type == W_EVENT_ITEM_DOUBLECLICKED) {	
		/* get selected objects in grid */			
		get_selected_items(DisplayGrid);			
		auto_highlight();
		auto_scale_model();			
	}
	set_page_number();
	return(0);
}

assign_views_to_drawing()
{   
   for(i=0;i<4;i=i+1;){
      view = A_GET(View_Names,i);
      origin_x = get_2darray(View_Positions,i,0);
      origin_y = get_2darray(View_Positions,i,1);
      PM_ASSIGN_VIEW_TO_PAGE(view,origin_x,origin_y,View_Scale);
   }
   return(0);
}

auto_highlight()
{
	if (AutoHighLight == 1){
		/* refresh color of model */
		model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			Highlight_Object(model,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);
		PM_FREE_SET(temp);
		
		/* high light selected model */
		model_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
		for (i = 0; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
			Highlight_Object(model,TRUE);
			PM_ADD_OBJECT_TO_SET(model,High_Light_List);			
		}
	}
}

auto_scale_model()
{
	if (AutoScale == 1){				
		model_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
		if (model_number == 1){
			model_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,0);
			Auto_Scale(model_handle);
		}
	}
}

sort_grid(column,window)
{
	/* A column header was clicked; sort the items */
	if (Grid_SortColumn == column) {
		if (Grid_SortDirection == 0) {
			Grid_SortDirection = 1;
		}
		else {
			Grid_SortDirection = 0;
		}
	}
	else {
		Grid_SortDirection = 1;
	}
	Grid_SortColumn = column;
	W_SET_WINDOW_ARGS(window, W_LISTW_COLUMN, column, W_LISTW_SORT, Grid_SortDirection);
}

model_browsing_handler(item, event_type, button_value)
{
	W_UNMAP_FRAME(MainWindow);	
	selected_model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
	if (selected_model_number > 0){
		current_model = PM_GET_MEMBER_IN_SET(High_Light_List, 0);
		parts = PM_GET_OBJECTS_IN_GROUP(current_model);
		part = PM_GET_MEMBER_IN_SET( parts, 0);
		x0 = PM_GET_OBJDATA(part, 0, MMT_TAG_COGX);
		y0 = PM_GET_OBJDATA(part, 0, MMT_TAG_COGY);
		z0 = PM_GET_OBJDATA(part, 0, MMT_TAG_COGZ);
		x = SCAN_QUANT(1,x0);
		y = SCAN_QUANT(1,y0);
		z = SCAN_QUANT(1,z0);
		PM_SET_CURRENT_LOC(x, y, z);	
	}
	nth_part = 0;
	PM_PICK_OBJECT("浏览模型",nth_part);
	W_MAP_FRAME(MainWindow);
}


search_objects(item, event_type, button_value)
{   
	/* 查询所有的模型组 query all model groups*/
	query = PM_INIT_QUERY("GROUP");	
	groups = PM_EXECUTE_QUERY(query);
		
	/* 获取 基座 Get the pipe Model group */
	temp_list = PM_INIT_SET();
	
	if (!ISINT(groups)){
		group_number = PM_NR_MEMBERS_IN_SET(groups);
		for (i = 0; i < group_number; i = i + 1;){
			group_handle = PM_GET_MEMBER_IN_SET(groups, i);
			group_type = PM_GET_OBJDATA(group_handle, 0, MMT_TAG_GROUPTYPE);
			/* 过滤其它类型的组 Get rid of other type group*/
 			if (group_type == "7"){
				/* 过滤不包含零件的组Get rid of group that content nothing */	
				parts = PM_GET_OBJECTS_IN_GROUP(group_handle);
				if (parts != 0){
					part_number = PM_NR_MEMBERS_IN_SET(parts);
					if (part_number !=0){
				      result = PM_ADD_OBJECT_TO_SET(group_handle,temp_list);
					}
				}
			}			
		}
	}
   else{
      U_CONFIRM("没有符合条件的模型");
      return(-1);
   }
	
	model_number = PM_NR_MEMBERS_IN_SET(temp_list);
	if (model_number <= 0){
		return 0;
	}
	
	filter_model(temp_list);
		
	/* 根据当前模型查找模式将获得的模型添加到全局变量Object_List中 */
	if (Model_Add_Mode == 0){
		PM_SETOP_OR(Object_List,temp_list);
	}	
	
	if (Model_Add_Mode == 1){
	   PM_FREE_SET(Object_List);
	   Object_List = PM_INIT_SET();		
		Object_List = PM_COPY_SET(temp_list); 
	}	
	
	Object_Number = PM_NR_MEMBERS_IN_SET(Object_List);
	
	if (Object_Number <= 0){
		PM_FREE_SET(temp_list);
		return 0;
	}
	
	PM_FREE_SET(temp_list);
	/* 获取并发布生产信息 */
	get_model_info();
	publish_model_info();
	set_page_number();
}

filter_model( models )
{
	/* 获取过滤条件 Get filter conditions*/
	block = W_GET_PANELITEM_ARG(Block_Name,W_PANEL_VALUE);
	planning_unit = W_GET_PANELITEM_ARG(Planning_Unit,W_PANEL_VALUE);	
	
	temp = PM_INIT_SET();
	
	/* 过滤掉不符合条件的模型 */
	group_number = PM_NR_MEMBERS_IN_SET(models);	
	for (i = 0; i < group_number; i = i + 1;){
		group_handle = PM_GET_MEMBER_IN_SET(models, i);	
		parts = PM_GET_OBJECTS_IN_GROUP(group_handle);
		part = PM_GET_MEMBER_IN_SET(parts,0);		
		model_block_name = PM_GET_OBJDATA(part,0,MMT_TAG_OBJECT_IN_BLOCK);
		if(ISINT(model_block_name)){
		   model_block_name = "Unset";
		}		
		model_bon_number = PM_GET_OBJDATA(part,0,Tag_PlanningUnit);
		if(ISINT(model_bon_number)){
		   model_bon_number = "Unset";
		}		
		
		check_block = PATTERN_MATCH(model_block_name,block);
		check_bon_number = PATTERN_MATCH(model_bon_number,planning_unit);
		if(check_block & check_bon_number){		
		   PM_ADD_OBJECT_TO_SET(group_handle,temp);
	   }			
	}
	PM_SETOP_SUB(models,models);
	PM_SETOP_OR(models,temp);
	PM_FREE_SET(temp);
	return(0);
}

get_model_handle(part)
{	
   model_handle = PM_GET_OBJECT_GROUP(part,Group_Type_I);
   if(ISINT(model_handle)){
      U_CONFIRM("此零件不属于任何基座");
      return(-1);	      
   }   	
	return(model_handle);	
}

pick_objects(item, event_type, button_value)
{
 	tmp = 0;
	flag = TRUE;
	temp = PM_INIT_SET();
	while(flag){	
		pick_part = PM_PICK_OBJECT("请选择基座", tmp, "BEAM","STRUCTCMP","STANDCMP" );
		if (!ISINT(pick_part)){
			groups_handle = get_model_handle(pick_part);
			if (!ISINT(groups_handle)){
				PM_ADD_OBJECT_TO_SET(groups_handle,temp);
				Highlight_Object(groups_handle,TRUE);
			}
			else{
				PM_RM_OBJECT_FROM_SET(groups_handle,temp);
				Highlight_Object(groups_handle,FALSE);			
			}	
		}	
		else{
			flag = FALSE;		
		}
	}
	
	if (Model_Add_Mode == 0){
		PM_SETOP_OR(Object_List,temp);
	}	
	
	if (Model_Add_Mode == 1){
		PM_SETOP_SUB(Object_List,Object_List);
		Object_List = PM_COPY_SET(temp); 
	}	
	
	Object_Number = PM_NR_MEMBERS_IN_SET(Object_List);	
	if (Object_Number <= 0){
		return 0;
	}
	
	/* 获取并发布生产信息 */
	get_model_info();
	publish_model_info();
	
	for (i = 0; i < Object_Number; i = i + 1;){
		group = PM_GET_MEMBER_IN_SET(Object_List, i);		
		Highlight_Object(group,FALSE);			
	}	
	
	return(0);
}

insert_part_no()
{
	/* Get some properties about the label definition. - 获取标注LABEL的属性 */
	target_type	 = 0;
	input_rule   = 0;
	label_type	 = 0;
	symbol_name	 = "";
	st = PM_GET_LABEL_PROPERTIES(Lbl_Name_Part_No,
		 "SYMNAME",		symbol_name,
		 "TARGET_TYPE", target_type,
		 "INPUTRULE",   input_rule,
		 "LABEL_TYPE",  label_type);
	if (st != 0) {
		U_MESSAGE("找不到零件标注的LABEL定义<" + Lbl_Name_Part_No + ">。");
		return(-1);
	}
	
	/* Determine if the label draws a reference line. - 检查标注LABEL是否带引线*/
	use_ref_line = input_rule == PM_LBL_IR_OG_RD | 
				   input_rule == PM_LBL_IR_OG_RG;

	/* Enable annotations for a view. This view should be in the active - 激活要标注的视图的2D标注模式*/
	/* drawing. */
	view_name = get_2darray(View_Info,3,0);
	view = PM_GET_HANDLE_OF_OPENED_VIEW(view_name, 1);
	if (view == 0) {
		U_MESSAGE("当前图纸不包含名字为<" + view_name + ">的视图");
		return(-1);
	}
	PM_SET_VIEW_PARAMETERS(view, "ACTIVE2D", 1);
	dw = -1;
	PM_GET_VIEW_PARAMETERS(view, "DW", dw);
	DW_ACTIVATEVIEW(dw);	

	node_id = 0;
}


/* 获取标注数组 
0 - 标注对象的handle
1 - 引线位置X坐标
2 - 引线位置Y坐标
3 - 引线位置Z坐标
4 - LABEL位置X坐标
5 - LABEL位置Y坐标
6 - LABEL位置Z坐标
7 - 标注对象的ID
*/
get_label_array()
{	
	/* 创建用于保存零件标注信息的临时数组 */
	label_number = 0;
	label_array = alloc_2darray(100,8);
	for(i=0;i<Model_Part_Number;i=i+1;){
		part = PM_GET_MEMBER_IN_SET(Model_Set,i);
		if(!Part_Label_Mode){
			add_part_label(label_number,label_array,part);		
		}
		else{
			exist = 0;
			nth = 0;
			part_no = PM_GET_OBJDATA(part,nth,Tag_PartNo);
			for(k=0;k<i;k=k+1;){
				partA = get_2darray(label_array,k,0);
				part_noA = PM_GET_OBJDATA(partA,nth,Tag_PartNo);
				if(part_no == part_noA){
					exist = 1;
				}			
			}
			/* 如果零件标注数组中不存在相同零件的标注，则将当前零件的相关信息加入标注数组 */
			if(!exist){
				add_part_label(label_number,label_array,part);			
			}
		}
	}
	return(0);
}

add_part_label(label_number,label_array,part)
{
	return(0);
}


options_selected(item, event_type, dummy)
{
	s = W_GET_PANELITEM_ARG(item, W_PANEL_VALUE);
	if ( s == "00" ){
		AutoHighLight = 0;
		AutoScale = 0;	
		/* 将已经加亮的模型恢复原来的颜色 */
		model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			Highlight_Object(model,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);	
		PM_FREE_SET(temp);		
	}
	else if( s == "10"){
		AutoHighLight = 1;
		AutoScale = 0;	
	}
	else if( s == "11"){
		AutoHighLight = 1;
		AutoScale = 1;	
	}
	else if( s == "01"){
		AutoHighLight = 0;
		AutoScale = 1;
		/* 将已经加亮的模型恢复原来的颜色 */
		model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			Highlight_Object(model,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);
		PM_FREE_SET(temp);
	}		
	return(0);
}

create_panel_upperpart(mainform)
{
	panel_upperpart = W_ADD_WINDOW(mainform, W_PANEL, "panel_upperpart");
	W_REALIZE_WINDOW(panel_upperpart,	W_FRAME_X, 		0,
										W_FRAME_Y, 		0,
										W_FRAME_ROWS, 	2,
										W_FRAME_COLS, 	60);
						
	Block_Name = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Block_Name");
	W_REALIZE_PANELITEM(Block_Name, W_PANEL_ROW,		0, 
									W_PANEL_COL,		0,
									W_PANEL_LABEL,		"分段名称:     ",
									W_PANEL_TIP,		"Block Name",
									W_PANEL_LENGTH,		14,
									W_PANEL_VALUE,		"*",
									W_PANEL_CALLBACK,	1);
      
	search_stru = W_ADD_PANELITEM(panel_upperpart, W_PANEL_BUTTON, "search_stru");	
	W_REALIZE_PANELITEM(search_stru,	W_PANEL_ROW,			0, 
										W_PANEL_COL,			52,
										W_PANEL_BUTTONIMAGE,	"查找",
										W_PANEL_WIDTH,			10,
										W_PANEL_BUTTONVALUE,	210,
										W_PANEL_CALLBACK,		1,
										W_PANEL_LAYOUT,			W_LAYOUT_HORIZONTAL);  
										
	Planning_Unit = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Planning_Unit");	
	W_REALIZE_PANELITEM(Planning_Unit,	W_PANEL_ROW,		0, 
										W_PANEL_COL,		26,
										W_PANEL_LABEL,		"托盘代号:     ",
										W_PANEL_LENGTH,		14,
										W_PANEL_VALUE,		"*",
										W_PANEL_CALLBACK,	3);
										
	seperate_line = W_ADD_PANELITEM(panel_upperpart, W_PANEL_MESSAGE, "seperate_line");	
	W_REALIZE_PANELITEM(seperate_line,  W_PANEL_ROW,		1,
										W_PANEL_COL,		0,
										W_PANEL_LABEL,		"<<图纸信息>>",
										W_PANEL_SEPARATOR,	1);   
     
	Pro_Number = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Pro_Number");
	W_REALIZE_PANELITEM(Pro_Number,	W_PANEL_ROW,         2, 
									W_PANEL_COL,         0,
									W_PANEL_LABEL,       "工程号:   ",
									W_PANEL_LENGTH,      15,
									W_PANEL_VALUE,       "",
									W_PANEL_CALLBACK,    3);
   
	Dra_Number = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Dra_Number");
	W_REALIZE_PANELITEM(Dra_Number,	W_PANEL_ROW,       2, 
                                    W_PANEL_COL,       24,
                                    W_PANEL_LABEL,     "图号:  ",
                                    W_PANEL_LENGTH,    27,
                                    W_PANEL_VALUE,     "*",
                                    W_PANEL_CALLBACK,  3);  
   
	Start_Page = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Start_Page");    
	W_REALIZE_PANELITEM(Start_Page,	W_PANEL_ROW,         2, 
                                    W_PANEL_COL,         59,
                                    W_PANEL_LABEL,       "起始页码:    ",
                                    W_PANEL_LENGTH,      5,
                                    W_PANEL_CALLBACK,    4);
	W_CONFIG_NUMERIC_PANELITEM(Start_Page, W_NUMERIC_INT, 1, 1000);
	W_SET_PANELITEM_HANDLER(Start_Page, "page_number_handler");
	W_SET_NUMERIC_VALUE(Start_Page, 2);   
   
	pick_stru = W_ADD_PANELITEM(panel_upperpart, W_PANEL_BUTTON, "pick_stru");
	W_REALIZE_PANELITEM(pick_stru,	W_PANEL_ROW, 	         0, 
                                    W_PANEL_COL,            63,
                                    W_PANEL_BUTTONIMAGE,    "点选",
                                    W_PANEL_WIDTH,          10,
                                    W_PANEL_BUTTONVALUE,    210,
                                    W_PANEL_CALLBACK,       1,
                                    W_PANEL_LAYOUT,         W_LAYOUT_HORIZONTAL);
   
	element_add_flag = W_ADD_PANELITEM(panel_upperpart, W_PANEL_CHOICE, "element_add_flag");
	W_REALIZE_PANELITEM(element_add_flag,	W_PANEL_ROW,            3, 
											W_PANEL_COL,            0,
											W_PANEL_LABEL,          "模型信息列表模式:      ",
											W_PANEL_CHOICESTRING,   "追加  ",
											W_PANEL_CHOICESTRING,   "替换  ",
											W_PANEL_ORDINALVALUE,   0,
											W_PANEL_CHOICESTYLE,	   W_STYLE_PUSHBUTTONS,
											W_PANEL_CALLBACK,       1);
   
	Options = W_ADD_PANELITEM(panel_upperpart, W_PANEL_TOGGLE, "options");
	W_REALIZE_PANELITEM(Options,	W_PANEL_ROW,            3, 
									W_PANEL_COL,            50,
									W_PANEL_LABEL,          "",
									W_PANEL_CHOICESTRING,   "自动加亮    ",
									W_PANEL_CHOICESTRING,   "自动缩放    ",
									W_PANEL_VALUE,          "00",
									W_PANEL_CHOICESTYLE,	   W_STYLE_PUSHBUTTONS,
									W_PANEL_CALLBACK,       1);



	Part_Label_Flag = W_ADD_PANELITEM(panel_upperpart, W_PANEL_CHOICE, "Part_Label_Flag");
	W_REALIZE_PANELITEM(Part_Label_Flag,	W_PANEL_ROW,            4, 
											W_PANEL_COL,            0,
											W_PANEL_LABEL,          "零件编号标注:      ",
											W_PANEL_CHOICESTRING,   "标注全部零件       ",
											W_PANEL_CHOICESTRING,   "合并标注       ",
											W_PANEL_ORDINALVALUE,   1,
											W_PANEL_CHOICESTYLE,	   W_STYLE_PUSHBUTTONS,
											W_PANEL_CALLBACK,       1);

	CheckIn = W_ADD_PANELITEM(panel_upperpart, W_PANEL_BUTTON, "CheckIn");
	W_REALIZE_PANELITEM(CheckIn,	W_PANEL_ROW, 	         4, 
                                    W_PANEL_COL,            52,
                                    W_PANEL_BUTTONIMAGE,    "CheckIn",
                                    W_PANEL_WIDTH,          10,
                                    W_PANEL_BUTTONVALUE,    210,
                                    W_PANEL_CALLBACK,       1,
                                    W_PANEL_LAYOUT,         W_LAYOUT_HORIZONTAL);

	CheckOut = W_ADD_PANELITEM(panel_upperpart, W_PANEL_BUTTON, "CheckOut");
	W_REALIZE_PANELITEM(CheckOut,	W_PANEL_ROW, 	         4, 
                                    W_PANEL_COL,            63,
                                    W_PANEL_BUTTONIMAGE,    "CheckOut",
                                    W_PANEL_WIDTH,          10,
                                    W_PANEL_BUTTONVALUE,    210,
                                    W_PANEL_CALLBACK,       1,
                                    W_PANEL_LAYOUT,         W_LAYOUT_HORIZONTAL);
                                    
	W_SET_PANELITEM_HANDLER(search_stru, "search_objects");
	W_SET_PANELITEM_HANDLER(pick_stru, "pick_objects");
	W_SET_PANELITEM_HANDLER(element_add_flag, "model_list_mode");
	W_SET_PANELITEM_HANDLER(Options, "options_selected");
	W_SET_PANELITEM_HANDLER(Part_Label_Flag, "part_label_mode");
    W_SET_PANELITEM_HANDLER(CheckIn, "checkin_model_handler");
    W_SET_PANELITEM_HANDLER(CheckOut, "checkout_model_handler");
	
	return(panel_upperpart);
}

checkout_model_handler(item, event_type, button_value)
{
	/* check if select model groups in grid */
	models_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);	
	if (models_number <= 0){
		model_h = Pick_Structural_Group("请选择要Checkout的舾装件");
        if(!ISINT(model_h)){
            res = CheckOut_Group_With_Members(model_h);
            if(res>0){
                reset_access_status(model_h,"CheckOut");
            }
        }
	}
    else{
        for(i=0;i<models_number;i=i+1;){	   
            model_h = PM_GET_MEMBER_IN_SET(Selected_Objects, i);	
            res = CheckOut_Group_With_Members(model_h);
            reset_access_status(model_h,"CheckOut");            
        } 
    }        
}

checkin_model_handler(item, event_type, button_value)
{
	/* check if select model groups in grid */
	models_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
	
	if (models_number <= 0){
		model_h = Pick_Structural_Group("请选择要Checkin的舾装件");
        if(!ISINT(model_h)){
            res = CheckIn_Group_With_Members(model_h);
            if(res>0){
                reset_access_status(model_h,"CheckIn");
            }
        }
	}
    else{
        for(i=0;i<models_number;i=i+1;){	   
            model_h = PM_GET_MEMBER_IN_SET(Selected_Objects, i);	
            res = CheckIn_Group_With_Members(model_h); 
            reset_access_status(model_h,"CheckIn");
        }     
    }  
}

reset_access_status(model_h,flag)
{
    id = find_model_grid_id(model_h);
    if(id != -1){
        W_SET_WINDOW_ARGS(DisplayGrid,W_LISTW_FINDID,id);
        row = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ROW);
		/*set access status flag of group*/
		if(flag == "CheckIn"){
		   icon = Icon_Local_Server;
		}
		else if(flag == "CheckOut"){
		   icon = Icon_My_Check_Out;
		}
		else{
		   icon = Icon_Error;
		} 
        W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, row, W_LISTW_COLUMN, 0, W_LISTW_ICON, icon );                 
    }
    return(0);
}


create_command(mainform)
{	
	command = W_ADD_WINDOW(mainform, W_PANEL, "command");
	W_REALIZE_WINDOW(command,	W_FRAME_X, 		0,
								W_FRAME_Y, 		625,
								W_FRAME_WIDTH,	300,
								W_FRAME_HEIGHT, 1);	
							         
	Drawing_Form = W_ADD_PANELITEM(command, W_PANEL_FILL, "Drawing_Form");
      
	W_REALIZE_PANELITEM(Drawing_Form,	W_PANEL_ROW, 		0, 
										W_PANEL_COL, 		0,
										W_PANEL_LABEL, 		"图框名称:     ",
										W_PANEL_TIP,		"ICGD Name",
										W_PANEL_LENGTH, 	50,
										W_PANEL_VALUE, 		"",
										W_PANEL_CALLBACK, 	0);
     				                        
	Select_Form = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Select_Form");
	
	W_REALIZE_PANELITEM(Select_Form,    W_PANEL_ROW,         	0, 
										W_PANEL_COL,         	63,
										W_PANEL_BUTTONIMAGE, 	"选择图框", 
										W_PANEL_TIP,			"Select ICGD",
										W_PANEL_WIDTH,       	10,
										W_PANEL_BUTTONVALUE, 	209,
										W_PANEL_CALLBACK,    	1,
										W_PANEL_LAYOUT,      	W_LAYOUT_HORIZONTAL);     				                        
     				                        
							         						
	Create_Drawing = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Create_Drawing");
		
	W_REALIZE_PANELITEM(Create_Drawing, W_PANEL_ROW,         	1, 
										W_PANEL_COL,         	0,
										W_PANEL_BUTTONIMAGE, 	"生成图形", 
										W_PANEL_TIP,			"Create Pipe Drawing",
										W_PANEL_WIDTH,       	10,
										W_PANEL_BUTTONVALUE, 	200,
										W_PANEL_CALLBACK,    	1,
										W_PANEL_LAYOUT,      	W_LAYOUT_HORIZONTAL);
							                  
	Cur_Drawing = W_ADD_PANELITEM(command, W_PANEL_FILL, "Cur_Drawing");
      
	W_REALIZE_PANELITEM(Cur_Drawing, 	W_PANEL_ROW,         1, 
										W_PANEL_COL,         12,
										W_PANEL_LABEL,       "",
										W_PANEL_LENGTH,      47,
										W_PANEL_VALUE,       "正在处理 基座:   ",
										W_PANEL_SENSITIVITY, 0,
										W_PANEL_CALLBACK,    0); 
     				                        
	Pro_label = W_ADD_PANELITEM(command, W_PANEL_FILL, "Pro_label");
      
	W_REALIZE_PANELITEM(Pro_label,  W_PANEL_ROW,      1, 
									W_PANEL_COL,      61,
									W_PANEL_LABEL,    "进度:",
									W_PANEL_LENGTH,   0,
									W_PANEL_VALUE,    "",
									W_PANEL_CALLBACK, 0);     				                        
     				                        
	Process = W_ADD_PANELITEM(command, W_PANEL_FILL, "Process");
      
	W_REALIZE_PANELITEM(Process,	W_PANEL_ROW,         1, 
									W_PANEL_COL,         66,
									W_PANEL_LABEL,       "",
									W_PANEL_LENGTH,      7,
									W_PANEL_VALUE,       "0/0",
									W_PANEL_SENSITIVITY, 0,
									W_PANEL_CALLBACK,    0); 
     				                        
	Open_Drawing = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Open_Drawing");
	
	W_REALIZE_PANELITEM(Open_Drawing,  	W_PANEL_ROW,         2, 
										W_PANEL_COL,         0,
										W_PANEL_BUTTONIMAGE, "打开图形", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 201,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);     	
							                
	Open_Previous = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Open_Previous");
	
	W_REALIZE_PANELITEM(Open_Previous,  W_PANEL_ROW,         	2, 
	                                    W_PANEL_COL,         	12,
										W_PANEL_BUTTONIMAGE, 	"打开前一个", 
										W_PANEL_WIDTH,       	10,
										W_PANEL_BUTTONVALUE, 	202,
										W_PANEL_CALLBACK,    	1,
										W_PANEL_TIP, 			"Open Previous Pipe Drawing",
										W_PANEL_LAYOUT,      	W_LAYOUT_HORIZONTAL); 	
							                  
	Open_Next = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Open_Next");
	
	W_REALIZE_PANELITEM(Open_Next,  W_PANEL_ROW,         	2, 
									W_PANEL_COL,         	24,
									W_PANEL_BUTTONIMAGE, 	"打开下一个", 
									W_PANEL_WIDTH,       	10,
									W_PANEL_BUTTONVALUE, 	203,
									W_PANEL_CALLBACK,    	1,
									W_PANEL_TIP, 			"Open Next Pipe Drawing",
									W_PANEL_LAYOUT,      	W_LAYOUT_HORIZONTAL); 	
							              
	Browse_Model = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Browse_Model");
	
	W_REALIZE_PANELITEM(Browse_Model,  	W_PANEL_ROW,         2, 
										W_PANEL_COL,         36,
										W_PANEL_BUTTONIMAGE, "浏览模型", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 204,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);							              
							              						                  							                  						                							                			                            				                      
	Delete_Drawing = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Delete_Drawing");
	
	W_REALIZE_PANELITEM(Delete_Drawing,  	W_PANEL_ROW,         3, 
											W_PANEL_COL,         0,
											W_PANEL_BUTTONIMAGE, "删除图形", 
											W_PANEL_WIDTH,       10,
											W_PANEL_BUTTONVALUE, 301,
											W_PANEL_CALLBACK,    1,
											W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);
   							               
	Print_Drawing = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Print_Drawing");
	
	W_REALIZE_PANELITEM(Print_Drawing,  W_PANEL_ROW,         3, 
										W_PANEL_COL,         12,
										W_PANEL_BUTTONIMAGE, "打印图形", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 302,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);   
   							               
	Export_Dxf = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Export_Dxf");
	
	W_REALIZE_PANELITEM(Export_Dxf,		W_PANEL_ROW,         2, 
										W_PANEL_COL,         48,
										W_PANEL_BUTTONIMAGE, "导出DXF", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 303,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);  
   							             
	Export_Pdf = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Export_Pdf");
	
	W_REALIZE_PANELITEM(Export_Pdf,   	W_PANEL_ROW,         2, 
										W_PANEL_COL,         60,
										W_PANEL_BUTTONIMAGE, "导出PDF", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 304,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);   							              							               							       
							   
	quit = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "quit");
	
	W_REALIZE_PANELITEM(quit,	W_PANEL_ROW, 	      3, 
								W_PANEL_COL,         60,
							    W_PANEL_BUTTONIMAGE, "退出", 
							    W_PANEL_WIDTH,       10,
							    W_PANEL_BUTTONVALUE, 305,
							    W_PANEL_CALLBACK,    1,
								W_PANEL_CLOSEBUTTON, 1,
							    W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);	
							         
	W_SET_PANELITEM_HANDLER(Select_Form, "select_drawing_form_handler");						         						 
	W_SET_PANELITEM_HANDLER(quit, "quit_handler");
	W_SET_PANELITEM_HANDLER(Create_Drawing, "create_drawing_handler");
	W_SET_PANELITEM_HANDLER(Export_Pdf, "export_pdf_handler");
	W_SET_PANELITEM_HANDLER(Export_Dxf, "export_dxf_handler");
	W_SET_PANELITEM_HANDLER(Print_Drawing, "print_drawing_handler");
	W_SET_PANELITEM_HANDLER(Delete_Drawing, "delete_drawing_handler");
	W_SET_PANELITEM_HANDLER(Open_Drawing, "open_drawing_handler");  
	W_SET_PANELITEM_HANDLER(Open_Next, "open_drawing_handler"); 
	W_SET_PANELITEM_HANDLER(Open_Previous, "open_drawing_handler"); 
	W_SET_PANELITEM_HANDLER(Browse_Model, "model_browsing_handler");
	
	return(command);
}

delete_drawing_handler(item, event_type, button_value)
{
    units_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);	
    if (units_number <= 0){
        U_CONFIRM("请先选择基座");
        return(0);
    }  

    sel = A_ALLOC(2);
    A_PUT(sel,0,"保留最新版本");
    A_PUT(sel,1,"删除所有版本");
    si = 1;
    res = DM_CALL_SCRIPT("macro/Select.mac","U_Select",
    "请选择删除模式",2,sel,si);
    A_FREE(sel);

    if(res == -1){
        return(0);      
    }
    else if(res == 0){
        for(i=0;i<units_number;i=i+1;){   	   
            unit_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
            drawing_name = Get_Attribute_Value(unit_handle,Tag_FabDrawingNo);
            if(ISSTRING(drawing_name) & drawing_name != "Unset"){          
                current_version = String_To_Int(SUBSTRING(SEARCH(drawing_name,"-V"),2));      	
                for(k=0;k<current_version;k=k+1;){
                    drawing_name = STRINGTERM(drawing_name,"-V") + "-V" + ITOASCII(k);
                    doc_guid = "";
                    res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);
                    if(doc_guid != ""){
                        res = PM_DELETE_DRAWING(drawing_name);
                        if(res == 0){
                            mess = "图形<" + drawing_name + ">已经被删除";
                            U_MESSAGE(mess);
                        }
                        else{
                            prompt_error(drawing_name,res);
                        }      	      
                    }
                } 
            }  	
        }      
    }
    else if(res == 1){  	   
        for(i=0;i<units_number;i=i+1;){   	   
            unit_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
            drawing_name = Get_Attribute_Value(unit_handle,Tag_FabDrawingNo);
            if(ISSTRING(drawing_name) & drawing_name != "Unset"){
                current_version = String_To_Int(SUBSTRING(SEARCH(drawing_name,"-V"),2));   	
                for(k=0;k<=current_version;k=k+1;){
                    drawing_name = STRINGTERM(drawing_name,"-V") + "-V" + ITOASCII(k);
                    doc_guid = "";
                    res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);
                    if(doc_guid != ""){
                        res = PM_DELETE_DRAWING(drawing_name);
                        if(res == 0){
                            mess = "图形<" + drawing_name + ">已经被删除";
                            U_MESSAGE(mess);
                        }
                        else{
                            prompt_error(drawing_name,res);
                        }      	      
                    }
                } 
            } 
            res = Set_Attribute_Value(unit_handle,Tag_FabDrawingNo,"Unset");         
            /* display drawing name in grid if it is existed*/
            id = find_model_grid_id(unit_handle);
            if(id != -1){
                W_SET_WINDOW_ARGS(DisplayGrid,W_LISTW_FINDID,id);
                row = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ROW);
                W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, row, W_LISTW_COLUMN, 4, W_LISTW_STRING, "Unset");
            }   
            
        }                
    }
    PM_SAVE(0,1,1);   
    return(0);
}

prompt_error(drawing_name,res)
{
   if(res == -1){
      mess = "图形<" + drawing_name + ">无法删除";
      U_MESSAGE(mess);      
   }
   else if(res == MMT_E_DRW_NOTFOUND){
      mess = "图形<" + drawing_name + ">不存在";
      U_MESSAGE(mess);
   }
   else if(res == DM_E_DOC_NOT_OWNER){
      mess = "你没有删除图形<" + drawing_name + ">的权限";
      U_MESSAGE(mess);
   }
   else{
      mess = "图形<" + drawing_name + ">无法删除";
      U_MESSAGE(mess);      
   }
   return(0);   
         
}

page_number_handler(item, event_type, dummy)
{
   set_page_number();
   return(0);
}

set_page_number()
{
   st = 0;
   start_page = W_GET_NUMERIC_VALUE(Start_Page, st);
   if (st != 0){
      W_SET_NUMERIC_VALUE(Start_Page, 2);
      start_page = 2;
   }
   model_number = PM_NR_MEMBERS_IN_SET(Object_List);
   total_number = start_page + model_number - 1;
   for(i=0;i<Object_Number;i=i+1){
      W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, i, W_LISTW_COLUMN, 7, W_LISTW_STRING, ITOASCII(total_number));
      W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, i, W_LISTW_COLUMN, 6, W_LISTW_STRING, ITOASCII(start_page + i));
   }
   return(0);
}

open_drawing_handler(item, event_type, button_value)
{  
	models_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);	
	if (models_number <= 0){
		U_CONFIRM("请先选择基座");
		return(0);
	}   
	else if(models_number > 1){
		U_CONFIRM("一次只能打开一个图形");
		return(0);	   
	}
	
	if(item == Open_Next){
	   row_number = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_NUMOFCHOICES); 
	   current_row = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_ROW); 
	   new_row = current_row + 1;
	   if(new_row >= row_number){
	      U_CONFIRM("当前基座已经是最后一个基座");
	      return(0);
	   }
	   ms_value = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_MSVALUE);
	   ms_value = "0" + HEAD(ms_value,STRLEN(ms_value)-1);
	   res = W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_MSVALUE, ms_value); 
	   item_id = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ITEMID);	   
	   grid_handler(DisplayGrid, W_EVENT_ITEM_SELECTED, new_row, 0, item_id); 
	}
	else if(item == Open_Previous){
	   row_number = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_NUMOFCHOICES); 
	   current_row = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_ROW); 
	   new_row = current_row - 1;
	   if(new_row < 0){
	      U_CONFIRM("当前基座已经是第一个基座");
	      return(0);
	   }
	   ms_value = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_MSVALUE);
	   ms_value =  TAIL(ms_value,STRLEN(ms_value)-1) + "0";	  
	   res = W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_MSVALUE, ms_value);
	   item_id = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ITEMID);
	   grid_handler(DisplayGrid, W_EVENT_ITEM_SELECTED, new_row, 0, item_id); 
	}
	
	model_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,0);
	drawing_name = Get_Attribute_Value(model_handle,Tag_FabDrawingNo);
	if(ISINT(drawing_name)){
	   U_CONFIRM("尚未生成图形");
	   return(0);
	}
	
	doc_guid = "";
	res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);	
	if(doc_guid == ""){
	   U_CONFIRM("图形图形不存在");	   
	   return(0);
	}
	
	current_drawing = PM_GET_ACTIVE_DRW_NAME();
	if(current_drawing != ""){
	   PM_SAVE_ACTIVE_DRW();
	   PM_CHECK_IN_ACTIVE_DRW();
	   PM_CLOSE_ACTIVE_DRW();	   
	}
	
   PM_OPEN_DRAWING(drawing_name,PM_DRW_OFLG_EDIT,"","");
   
	W_UNMAP_FRAME(MainWindow);
	st = PM_EDIT_ACTIVE_DRW(0);
	W_MAP_FRAME(MainWindow);
	
	dwg_name = PM_GET_ACTIVE_DRW_NAME();
	if(dwg_name != ""){
		st = PM_SAVE_ACTIVE_DRW();
		if(st){
			U_CONFIRM("无法保存当前图形 <" + dwg_name + ">!");
		}
		else {
			st = PM_CHECK_IN_ACTIVE_DRW();
			if(st){
				U_CONFIRM("无法Check In当前图形 <" + dwg_name + ">!");
			}
		}
		PM_CLOSE_ACTIVE_DRW();
	}
	
	return(0);   
}

print_drawing_handler(item, event_type, button_value)
{  
	models_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);	
	if (models_number <= 0){
		U_CONFIRM("请先选择基座");
		return(0);
	}  
		
	for(i=0;i<models_number;i=i+1;){
   	model_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
   	model_name = PM_GET_OBJDATA(model_handle,0,MMT_TAG_OBJNAME);
   	drawing_name = Get_Attribute_Value(model_handle,Tag_FabDrawingNo);
   	if(ISINT(drawing_name)){
   	   mess = "基座<" + model_name + ">尚未生成图形";
   	   U_MESSAGE(mess);
   	}
   	
   	doc_guid = "";
   	res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);	
   	if(doc_guid == ""){
   	   mess = "图形<"+drawing_name+">不存在";
   	   U_MESSAGE(mess);	   
   	   return(0);
   	}   	
   }
        
	for(i=0;i<models_number;i=i+1;){

   	model_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
   	model_name = PM_GET_OBJDATA(model_handle,0,MMT_TAG_OBJNAME);
   	drawing_name = Get_Attribute_Value(model_handle,Tag_FabDrawingNo);
	      	   
   	current_drawing = PM_GET_ACTIVE_DRW_NAME();
   	if(current_drawing != ""){
   	   PM_SAVE_ACTIVE_DRW();
   	   PM_CHECK_IN_ACTIVE_DRW();
   	   PM_CLOSE_ACTIVE_DRW();	   
	   }   
	   
	   PM_OPEN_DRAWING(drawing_name,PM_DRW_OFLG_EDIT,"","");
	   mess = "开始打印图形<" + drawing_name + ">";
	   U_MESSAGE(mess);
	   res = PM_PLOT_ACTIVE_DRW(0);
	   if(res == -1){
	      DM_EDIT_SHEET_PLOT_SETTINGS();
         res = PM_PLOT_ACTIVE_DRW(0);
         if(res == -1){
            mess = "图形<" + drawing_name + ">打印失败";
            U_MESSAGE(mess);
         }
	   } 
	   else if(res == MMT_E_DRW_NOTACTIVE){
   	   mess = "图形<" + drawing_name + ">无法激活，打印失败";
   	   U_MESSAGE(mess);	      
	   }
	   else{
   	   mess = "图形<" + drawing_name + ">打印结束";
   	   U_MESSAGE(mess);	      
	   }
	}
   return(0);
}

export_pdf_handler(item, event_type, button_value)
{
	/* check if select model groups in grid */
	models_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);	
	if (models_number <= 0){
		U_CONFIRM("请先选择基座");
		return(0);
	} 
	
	path = U_GET_DIRECTORY("选择输PDF文件出路径", "c:\\", "", 0); 
	if(ISINT(path)){
	   return(0);
	} 
	
	for(i=0;i<models_number;i=i+1;){
   	model_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
   	model_name = PM_GET_OBJDATA(model_handle,0,MMT_TAG_OBJNAME);
   	drawing_name = Get_Attribute_Value(model_handle,Tag_FabDrawingNo);
   	if(ISINT(drawing_name)){
   	   mess = " 基座<" + model_name + ">尚未生成图形";
   	   U_MESSAGE(mess);
   	}
   	else{   	
      	doc_guid = "";
      	res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);	
      	if(doc_guid == ""){
      	   mess = "图形<"+drawing_name+">不存在";
      	   U_MESSAGE(mess);	   
      	}	
      	else{      	
         	current_drawing = PM_GET_ACTIVE_DRW_NAME();
         	if(current_drawing != ""){
         	   PM_SAVE_ACTIVE_DRW();
         	   PM_CHECK_IN_ACTIVE_DRW();
         	   PM_CLOSE_ACTIVE_DRW();	   
      	   }   
      	   
      	   res = PM_OPEN_DRAWING(drawing_name,PM_DRW_OFLG_EDIT,"","");
      	   if(res == -1){
      	      mess = "无法打开图形<" + drawing_name + ">，输出失败";
      	      U_MESSAGE(mess);	     
      	   }
      	   else{
         	   mess = "开始输出图形<" + drawing_name + ">的PDF文件";
         	   U_MESSAGE(mess);
         	   format = G2D_EXT_FRM_PDF;
         	   output_dir = path;
         	   template_dwr = "";
         	   res = export_active_drw(format, template_dwr, output_dir);	
         	   if(res == -1){
         	      mess = "图形<" + drawing_name + ">输出失败";
         	      U_MESSAGE(mess);
         	   } 
         	   else if(res == MMT_E_DRW_NOTACTIVE){
            	   mess = "图形<" + drawing_name + ">无法激活，输出失败";
            	   U_MESSAGE(mess);	      
         	   }
         	   else{
            	   mess = "图形<" + drawing_name + ">输出结束";
            	   U_MESSAGE(mess);	      
         	   }
         	}
      	}
   	}
	}
   return(0);
}

export_dxf_handler(item, event_type, button_value)
{
	/* check if select model groups in grid */
	models_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);	
	if (models_number <= 0){
		U_CONFIRM("请先选择基座");
		return(0);
	} 
	
	path = U_GET_DIRECTORY("选择输DXF文件出路径", "c:\\", "", 0); 
	if(ISINT(path)){
	   return(0);
	} 
	
	/*export drawings*/
	for(i=0;i<models_number;i=i+1;){
   	model_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
   	model_name = PM_GET_OBJDATA(model_handle,0,MMT_TAG_OBJNAME);
   	drawing_name = Get_Attribute_Value(model_handle,Tag_FabDrawingNo);
   	if(ISINT(drawing_name)){
   	   mess = "基座<" + model_name + ">尚未生成图形";
   	   U_MESSAGE(mess);
   	}
   	else{   	
      	/* check if the drawing exist*/
      	doc_guid = "";
      	res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);	
      	if(doc_guid == ""){
      	   mess = "图形<"+drawing_name+">不存在";
      	   U_MESSAGE(mess);	   
      	}	
      	else{      	
            /*check if exist opened drawing*/
         	current_drawing = PM_GET_ACTIVE_DRW_NAME();
         	if(current_drawing != ""){
         	   PM_SAVE_ACTIVE_DRW();
         	   PM_CHECK_IN_ACTIVE_DRW();
         	   PM_CLOSE_ACTIVE_DRW();	   
      	   }   
      	   
      	   res = PM_OPEN_DRAWING(drawing_name,PM_DRW_OFLG_EDIT,"","");
      	   if(res == -1){
      	      mess = "无法打开图形<" + drawing_name + ">，输出失败";
      	      U_MESSAGE(mess);	     
      	   }
      	   else{
         	   mess = "开始输出图形<" + drawing_name + ">的DXF文件";
         	   U_MESSAGE(mess);
         	   format = G2D_EXT_FRM_DXF_2000;
         	   output_dir = path;
         	   template_dwr = "";
         	   res = export_active_drw(format, template_dwr, output_dir);	
         	   if(res == -1){
         	      mess = "图形<" + drawing_name + ">输出失败";
         	      U_MESSAGE(mess);
         	   } 
         	   else if(res == MMT_E_DRW_NOTACTIVE){
            	   mess = "图形<" + drawing_name + ">无法激活，输出失败";
            	   U_MESSAGE(mess);	      
         	   }
         	   else{
            	   mess = "图形<" + drawing_name + ">输出结束";
            	   U_MESSAGE(mess);	      
         	   }
         	}
      	}
   	}
	}
   return(0);
}

select_drawing_form_handler(item, event_type, button_value)
{
	drawing_form = DM_SELECT_ICGD("",2);
	if(ISSTRING(drawing_form) & drawing_form != ""){
		W_SET_PANELITEM_ARGS(Drawing_Form, W_PANEL_VALUE, drawing_form);
		SET_STRING_DEFAULT("StructuralFabricationDrawing", "Drawing_Form", drawing_form);
		Drawing_Form_Name = drawing_form;
	} 
	return(0);
}

create_drawing_handler(item, event_type, button_value)
{
	/* check if select model groups in grid */
	models_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
	
	if (models_number <= 0){
		U_CONFIRM("请先选择舾装件");
		return(0);
	}
			
	/* create drawing for selected model groups */
	x0 = 0;y0 = 0;z0 = 0;
	PM_GET_CURRENT_LOC(x0,y0,z0);
	start_time = GET_TIME(); 
	for(i=0;i<models_number;i=i+1;){	   
        Model_Handle = PM_GET_MEMBER_IN_SET(Selected_Objects, i);
        Model_Set = get_structural_unit_parts(Model_Handle);  	   
        process_info = ITOASCII(i+1) + "/" + ITOASCII(models_number);
        W_SET_PANELITEM_ARGS(Process, W_PANEL_VALUE, process_info);
        model_name = PM_GET_OBJDATA(Model_Handle,0,MMT_TAG_OBJNAME);
        drawing_info = "正在处理舾装件：" + model_name;
        W_SET_PANELITEM_ARGS(Cur_Drawing, W_PANEL_VALUE, drawing_info);
        Cur_UnitName = model_name;
        res = generate_drawing();
        if(res == -1){
            mess = "无法生成舾装件:" + Cur_UnitName + "的制作图";
            U_MESSAGE(mess);
        }
	}	
    end_time = GET_TIME();
    consumption = end_time - start_time;
    drawing_info = "处理完毕，共耗时" + ITOASCII(consumption) + "秒";
    W_SET_PANELITEM_ARGS(Cur_Drawing, W_PANEL_VALUE, drawing_info);
    PM_SET_CURRENT_LOC(x0,y0,z0);
    return(0);	
}

generate_drawing()
{  
	drawing_name = get_drawing_name();
	if(ISINT(drawing_name)){
		return(-1);   
	}
	
	Cur_Drawing_Name = drawing_name;
   
	/*create drawing*/
	res = create_drawing(); 
	if(res == -1){
		return(-1);
	}
      
	res = PM_OPEN_DRAWING(Cur_Drawing_Name,PM_DRW_OFLG_EDIT,"","");
	if(res != 0){
		mess = "无法打开图形:" + Cur_Drawing_Name;
		U_MESSAGE(mess);
		return(-1);
	}
   
	/*create views*/
	res = create_view();    
		if(res != 0){
		mess = "无法在图形:" + Cur_Drawing_Name + "中创建视图";
		U_MESSAGE(mess);
		return(-1);
	} 
   
	/*assign view to drawing*/  
	res = assign_views_to_drawing();
	if(res != 0){
		mess = "无法将视图分配给图形:" + Cur_Drawing_Name;
		U_MESSAGE(mess);
		return(-1);
	}

    /*生成材料表*/
	get_mto_table();
    /*绘制材料表*/
	InitDrawingSettings();
	style_name = "";
	drafting_style = GetFirstDraftingStyle(style_name);
	dw = PM_START_PAGE_ANNOTATION(style_name);
	DW_ACTIVATEVIEW(dw);
	draw_mto_table();
	PM_TERMINATE_PAGE_ANNOTATION(1);
	/*set drawing title information*/
	set_header_field();
	view_h = A_GET(View_Handles,3);
	
	/* add label */
	/*path = SYS_GETENV("PMS_HOME") + "/opt/pm/EloTools/macro/AutoLabeling.mac";
	PM_CALL_SCRIPT(path,"AutoLabeling","~P0", "舾装零件编号", "舾装零件编号", 101, 2, 7, 2.5, 0.0, 0.0, 0, 0, 1);
	*/
	/*save drawing*/ 
	res = PM_SAVE_ACTIVE_DRW();
	if(res != 0){
		mess = "无法保存图形:" + Cur_Drawing_Name;
		U_MESSAGE(mess);
		return(-1);
	}

	/*Check In drawing*/
	res = PM_CHECK_IN_ACTIVE_DRW();
	if(res != 0){
		mess = "无法CheckIn图形:" + Cur_Drawing_Name;
		U_MESSAGE(mess);
	return(-1);
	}

	/*close drawing*/
	res = PM_CLOSE_ACTIVE_DRW();
	if(res != 0){
		mess = "无法关闭图形:" + Cur_Drawing_Name;
		U_MESSAGE(mess);
		return(-1);
	}
	return(0);
}



/* 设置标题栏中的相关信息 */
set_header_field()
{ 
    page_header_rec = DM_INIT_TAGREC();
    res = PM_GET_HEADER_FROM_ACTIVE_DRW(page_header_rec);
    if(res != 0){
        U_CONFIRM("无法获取标题栏数据");
        return(0);
    }
    
    /* 项目信息 */ 	
    pro_number = W_GET_PANELITEM_ARG(Pro_Number,W_PANEL_VALUE);
    if(pro_number != ""){
        DM_SET_TAGVAL(page_header_rec,Tag_Drawing_ShipNumber,pro_number);   
    }
    
	/*图号信息*/
    drawing_number = W_GET_PANELITEM_ARG(Dra_Number,W_PANEL_VALUE);
	if(drawing_number == "*"){
		nth = 0;
		drawing_number = PM_GET_OBJDATA(Model_Handle, nth, Tag_FabDrawingNo);
	}
    if(ISSTRING(drawing_number)){
        DM_SET_TAGVAL(page_header_rec,Tag_Drawing_DrawingNumber,drawing_number);   
    }  

	/*图名信息*/
	nth = 0;
    drawing_name = PM_GET_OBJDATA(Model_Handle, nth, Tag_FabDrawingName);
    if(ISSTRING(drawing_name)){
        DM_SET_TAGVAL(page_header_rec,Tag_Drawing_ModuleName,drawing_name);   
    } 
		       
    /*页码信息*/
    id = find_model_grid_id(Model_Handle);
    if(id != -1){
        W_SET_WINDOW_ARGS(DisplayGrid,W_LISTW_FINDID,id);
        row = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ROW);
        W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, row, W_LISTW_COLUMN, 6);
        page_number = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_STRING);
        if(ISSTRING(page_number)){
            DM_SET_TAGVAL(page_header_rec,Tag_Drawing_PageNumber,page_number);
        }
        W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, row, W_LISTW_COLUMN, 7);
        total_page = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_STRING);
        if(ISSTRING(total_page)){
            DM_SET_TAGVAL(page_header_rec,Tag_Drawing_TotalPage,total_page);
        } 
    }
	
	/* 重量信息 */
    nth = 0;
    weight = 1.0 * PM_GET_OBJDATA(Model_Handle, nth, Tag_TotalWeight);
	if(weight == 0){	
		weight = get_model_weight();
	}
 	weight_s = "";
	S_PRINTF(weight_s, "%.2f", weight); 
	DM_SET_TAGVAL(page_header_rec,Tag_Drawing_TotalWeight,weight_s);
	
	
    /* 舾装件描述 */
    nth = 0;
    unit_name = PM_GET_OBJDATA(Model_Handle, nth, Tag_UnitDescription);
    if(ISSTRING(unit_name)){
        DM_SET_TAGVAL(page_header_rec,Tag_Drawing_UnitName,unit_name);
    }

    /* 油漆面积 - 表面积 */
/*     nth = 0;
    area = 1.0 * PM_GET_OBJDATA(Model_Handle, nth, Tag_SurfaceArea);
	area_s = "";
	S_PRINTF(area_s, "%.2f", area);
	DM_SET_TAGVAL(page_header_rec,Tag_Drawing_ModuleName,area_s); */
    
	/*设置标题栏信息*/
	res = PM_SET_HEADER_TO_ACTIVE_DRW(page_header_rec);
    DM_FREE_TAGREC(page_header_rec);
	return(0);        
}

get_model_weight()
{
   weight = 0;
   part_number = PM_NR_MEMBERS_IN_SET(Model_Set);
   for(i=0;i<part_number;i=i+1;){
      part = PM_GET_MEMBER_IN_SET(Model_Set,i);
      mass = String_To_Float(PM_GET_OBJDATA(part,0,"MAS"));
      weight = weight + mass;
   }
   return(weight);
}

/*get drawing name*/
get_drawing_name()
{
	nth = 0;
	drawing_name = PM_GET_OBJDATA(Model_Handle, nth, Tag_FabDrawingNo);
	/* 如果舾装件制造图号已经赋值 */
	if(ISSTRING(drawing_name)){
		doc_guid = "";
		res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);
		/* 如果不存在这个名字的图形，则直接返回这个名字 */
		if( res<= 0 ){
			return(drawing_name);
		}
		/* 如果图形已经存在，则删除图形 */
		else{
			res = PM_DELETE_DRAWING(drawing_name);
			/*删除成功*/
			if(res == 0){
				return(drawing_name);			
			}
			else{
				mess = "无法删除图形<" + drawing_name + ">";
				U_MESSAGE(mess);
				return(-1);			
			}		
		}
	}
	/* 如果舾装件制造图号未赋值 */
	else{
		mess = "舾装件<" + Cur_UnitName + ">图号未赋值";
		U_MESSAGE(mess);
		return(-1);		
	}  
}

/*create drawing*/
create_drawing()
{
	bom_set = PM_INIT_SET();
	header_tag_rec = DM_INIT_TAGREC();
	dname = "";
	icgd_name = Drawing_Form_Name;
	res = PM_CREATE_DRAWING(Cur_Drawing_Name, "PipeModelDrawing", PM_DRW_CFLG_GLOBAL, bom_set, icgd_name, header_tag_rec, dname);
	DM_FREE_TAGREC(header_tag_rec);
	if(res != 0){
	  return(-1);
	}
   
	/*save drawing name to the attribute of model group*/
	Set_Attribute_Value(Model_Handle,Tag_FabDrawingNo,Cur_Drawing_Name);
	PM_SAVE(0,1,1);

	/*display drawing name in grid*/
	id = find_model_grid_id(Model_Handle);
	if(id != -1){
		W_SET_WINDOW_ARGS(DisplayGrid,W_LISTW_FINDID,id);
		row = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ROW);
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, row, W_LISTW_COLUMN, 4, W_LISTW_STRING, Cur_Drawing_Name);
	}

	/*display date of drawing creation in grid*/
	date_string = Get_Creation_Date(Cur_Drawing_Name);
	if(!ISINT(date_string)){
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, row, W_LISTW_COLUMN, 5, W_LISTW_STRING, date_string);
	}   
	return(0); 
}

find_model_grid_id(handle model_handle)
{
   for(i=0;i<Object_Number;i=i+1;){
      obj_handle = PM_GET_MEMBER_IN_SET(Object_List,i);
      if(model_handle == obj_handle){
         return(i);
      }
   }
   return(-1);
}

/* calculate view parameters
   0.    ViewName       view name
   1~3.  Point          view point
   4~6.  Vdir           view direction
   7~9.  Vup            view up direction
*/
get_model_view_para()
{   
   /* get model group limits */
   xmin = 0; ymin = 0; zmin = 0;xmax = 0;ymax = 0;zmax = 0;
   res = PM_GET_BBOX_OF_SET(Model_Set,xmin,xmax, ymin,ymax, zmin,zmax);
   if(res == -1){
      message = "无法计算基座:" + Cur_UnitName + "所占的三维空间范围,无法生成基座制作图";
      U_MESSAGE(message);
      return(-1);
   }
         
   /* set margin of view */
   xmin=xmin-100;
   ymin=ymin-100;
   zmin=zmin-100;
   xmax=xmax+100;
   ymax=ymax+100;
   zmax=zmax+100;

   /* calculate view scale */  
   length_x = xmax-xmin; 
   length_y = ymax-ymin;
   length_z = zmax-zmin;
   xx = length_x*length_x;
   yy = length_y*length_y;
   zz = length_z*length_z;
   length = SQRT(xx+yy+zz);
   View_Scale = length/View_Size;
   Get_Drawing_View_Scale(View_Scale);
   
   free_2darray(View_Info);
   View_Info = alloc_2darray(4,15);
   /* set view name */
   view_name = "Side";
   put_2darray(View_Info,0,0,view_name);
   view_name = "Front";
   put_2darray(View_Info,1,0,view_name);
   view_name = "Top";
   put_2darray(View_Info,2,0,view_name);
   view_name = "ISO1";
   put_2darray(View_Info,3,0,view_name);
   /* calculate view point */
   view_point_x = (xmax - xmin)/2+xmin;
   view_point_y = ymin;
   view_point_z = (zmax - zmin)/2+zmin;
   put_2darray(View_Info,0,1,view_point_x);
   put_2darray(View_Info,0,2,view_point_y);
   put_2darray(View_Info,0,3,view_point_z);
   view_point_x = xmin;
   view_point_y = (ymax - ymin)/2+ymin;
   view_point_z = (zmax - zmin)/2+zmin;
   put_2darray(View_Info,1,1,view_point_x);
   put_2darray(View_Info,1,2,view_point_y);
   put_2darray(View_Info,1,3,view_point_z);   
   view_point_x = (xmax - xmin)/2+xmin;
   view_point_y = (ymax - ymin)/2+ymin;
   view_point_z = zmax;
   put_2darray(View_Info,2,1,view_point_x);
   put_2darray(View_Info,2,2,view_point_y);
   put_2darray(View_Info,2,3,view_point_z);  
    
   /* calculate view direction */
   view_dir_x = 0;
   view_dir_y = -1;
   view_dir_z = 0;
   put_2darray(View_Info,0,4,view_dir_x);
   put_2darray(View_Info,0,5,view_dir_y);
   put_2darray(View_Info,0,6,view_dir_z);   
   view_dir_x = -1;
   view_dir_y = 0;
   view_dir_z = 0;
   put_2darray(View_Info,1,4,view_dir_x);
   put_2darray(View_Info,1,5,view_dir_y);
   put_2darray(View_Info,1,6,view_dir_z);   
   view_dir_x = 0;
   view_dir_y = 0;
   view_dir_z = 1;
   put_2darray(View_Info,2,4,view_dir_x);
   put_2darray(View_Info,2,5,view_dir_y);
   put_2darray(View_Info,2,6,view_dir_z);  
    
   /* calculate view up direction */
   view_up_dir_x = 0;
   view_up_dir_y = 0;
   view_up_dir_z = 1;
   put_2darray(View_Info,0,7,view_up_dir_x);
   put_2darray(View_Info,0,8,view_up_dir_y);
   put_2darray(View_Info,0,9,view_up_dir_z);   
   view_up_dir_x = 0;
   view_up_dir_y = 0;
   view_up_dir_z = 1;
   put_2darray(View_Info,1,7,view_up_dir_x);
   put_2darray(View_Info,1,8,view_up_dir_y);
   put_2darray(View_Info,1,9,view_up_dir_z);   
   view_up_dir_x = 0;
   view_up_dir_y = 1;
   view_up_dir_z = 0;
   put_2darray(View_Info,2,7,view_up_dir_x);
   put_2darray(View_Info,2,8,view_up_dir_y);
   put_2darray(View_Info,2,9,view_up_dir_z);
    
   /* calculate view limits */
   view_umin = -(xmax-xmin)/2;
   view_umax = (xmax-xmin)/2;
   view_vmin = -(zmax-zmin)/2;
   view_vmax = (zmax-zmin)/2;
   view_depth = ymax-ymin;
   put_2darray(View_Info,0,10,view_umin);
   put_2darray(View_Info,0,11,view_umax);
   put_2darray(View_Info,0,12,view_vmin); 
   put_2darray(View_Info,0,13,view_vmax);   
   put_2darray(View_Info,0,14,view_depth);
   view_umin = -(ymax-ymin)/2;
   view_umax = (ymax-ymin)/2;
   view_vmin = -(zmax-zmin)/2;
   view_vmax = (zmax-zmin)/2;
   view_depth = xmax-xmin;
   put_2darray(View_Info,1,10,view_umin);
   put_2darray(View_Info,1,11,view_umax);
   put_2darray(View_Info,1,12,view_vmin); 
   put_2darray(View_Info,1,13,view_vmax);   
   put_2darray(View_Info,1,14,view_depth);
   view_umin = -(xmax-xmin)/2;
   view_umax = (xmax-xmin)/2;
   view_vmin = -(ymax-ymin)/2;
   view_vmax = (ymax-ymin)/2;
   view_depth = zmax-zmin;
   put_2darray(View_Info,2,10,view_umin);
   put_2darray(View_Info,2,11,view_umax);
   put_2darray(View_Info,2,12,view_vmin); 
   put_2darray(View_Info,2,13,view_vmax);   
   put_2darray(View_Info,2,14,view_depth);
   
   /* calculate view parameters of ISO view */
   rot = AxoRotAngle;
   slope = AxoSlopeAngle;
   vpx=0;vpy=0;vpz=0;vdx=0;vdy=0;vdz=0;udx=0;udy=0;udz=0;umin=0;vmin=0;umax=0;vmax=0;depth=0;
   compute_axo_params(rot, slope, xmin,xmax, ymin,ymax, zmin, zmax, vpx, vpy, vpz, vdx, vdy, vdz, udx, udy, udz, umin, vmin, umax, vmax, depth);   
   /*ISO view point*/
   put_2darray(View_Info,3,1,vpx);
   put_2darray(View_Info,3,2,vpy);
   put_2darray(View_Info,3,3,vpz);   
   /*ISO view direction*/
   put_2darray(View_Info,3,4,vdx);
   put_2darray(View_Info,3,5,vdy);
   put_2darray(View_Info,3,6,vdz);
   /*ISO view up direction*/  
   put_2darray(View_Info,3,7,udx);
   put_2darray(View_Info,3,8,udy);
   put_2darray(View_Info,3,9,udz); 
   /* ISO view limits */
   put_2darray(View_Info,3,10,umin);
   put_2darray(View_Info,3,11,umax);
   put_2darray(View_Info,3,12,vmin); 
   put_2darray(View_Info,3,13,vmax);   
   put_2darray(View_Info,3,14,depth);   
}

/*
	Compute axo view params.
	The code is borrowed from DefViews.mac
	
	Input args; rot, slope, xmin,xmax, ymin,ymax, zmin, zmax
	Output args: vpx, vpy, vpz, vdx, vdy, vdz, umin, vmin, umax, vmax, depth
*/

compute_axo_params(rot, slope, xmin,xmax, ymin,ymax, zmin, zmax, vpx, vpy, vpz, vdx, vdy, vdz, udx, udy, udz, umin, vmin, umax, vmax, depth)
{
	xxmin = xmin; 
	xxmax= xmax; 
	yymin= ymin; 
	yymax= ymax; 
	zzmin= zmin; 
	zzmax= zmax;

	set_m_x = (xxmin+xxmax)/2;
	set_m_y = (yymin+yymax)/2;
	set_m_z = (zzmin+zzmax)/2;
	
	xx2=(xxmax - xxmin)*(xxmax - xxmin);
	yy2=(yymax - yymin)*(yymax - yymin);
	zz2=(zzmax - zzmin)*(zzmax - zzmin);
	
	mbb_diag = SQRT( xx2+ yy2+ zz2);

    vdx = COS(rot)*COS(slope);
    vdy = SIN(rot)*COS(slope);
    vdz = SIN(slope);
    
    udx = COS(rot)*COS(slope+90);
    udy = SIN(rot)*COS(slope+90);
    udz = SIN(slope+90);    
    
    /*
    if( DEBUG )U_MESSAGE("rot "+FTOASCII(rot)+" slope "+FTOASCII(slope)+"vd "
    	+FTOASCII(vdx)+", "+FTOASCII(vdy)+", "+FTOASCII(vdz));
    	*/

	/*
		Position view point on the surface of a sphere with radius long enough so that
		the front plane does not clip objects in the active set.
	*/

	vpx = set_m_x + vdx*(mbb_diag/2 + 100);
	vpy = set_m_y + vdy*(mbb_diag/2 + 100);
	vpz = set_m_z + vdz*(mbb_diag/2 + 100);

	d = mbb_diag/2 + 100;

	/* Use default limits for axo view */
	umin = -d; umax = d; vmin = -d; vmax = d; depth = mbb_diag + 200;

	return(0);
}

/*创建基座视图*/
create_view()
{
   get_model_view_para();
   View_Handles = A_ALLOC(4);
   View_Names = A_ALLOC(4);
   for(i=0;i<4;i=i+1;){
      view_name = get_2darray(View_Info,i,0);
      A_PUT(View_Names,i,view_name);
      screen = "";
      display = "";
      in_drawing = 1;
      view_handle = PM_CREATE_VIEW(view_name,in_drawing, screen, display);
      set_view_parameter(view_handle,i);
      PM_VISUALIZE_SET_TO_VIEW(Model_Set,view_handle);
      A_PUT(View_Handles,i,view_handle);
   }
   return(0);
}

/*set model view parameters*/
set_view_parameter(handle view_handle,int i)
{
   /* set view point */
   view_point_x = get_2darray(View_Info,i,1);
   view_point_y = get_2darray(View_Info,i,2);
   view_point_z = get_2darray(View_Info,i,3);
   PM_SET_VIEW_PARAMETERS(view_handle, "POINT", view_point_x,view_point_y,view_point_z);   
   /* set view direction */
   view_dir_x = get_2darray(View_Info,i,4);
   view_dir_y = get_2darray(View_Info,i,5);
   view_dir_z = get_2darray(View_Info,i,6);
   PM_SET_VIEW_PARAMETERS(view_handle, "VDIR", view_dir_x,view_dir_y,view_dir_z);
   /* set view up direction */
   view_up_dir_x = get_2darray(View_Info,i,7);
   view_up_dir_y = get_2darray(View_Info,i,8);
   view_up_dir_z = get_2darray(View_Info,i,9);
   PM_SET_VIEW_PARAMETERS(view_handle, "VUP", view_up_dir_x,view_up_dir_y,view_up_dir_z);  
   /* set view limits */
   umin = get_2darray(View_Info,i,10);
   umax = get_2darray(View_Info,i,11);
   vmin = get_2darray(View_Info,i,12);
   vmax = get_2darray(View_Info,i,13);
   depth = get_2darray(View_Info,i,14);
   PM_SET_VIEW_PARAMETERS(view_handle, "LIMITS", umin, umax, vmin, vmax, depth); 
   return(0);
}

main()
{	
	init();
	mainform  = create_top_frame();
	Panel_upperpart = create_panel_upperpart(mainform);
	DisplayGrid  = create_grid(mainform);
	command = create_command(mainform);
	set_default();
		
	MainWindow = mainform;
	
	W_MAP_FRAME(mainform);
	W_RUN_FRAME(mainform);
	W_UNMAP_FRAME(mainform);
	W_DESTROY_FRAME(mainform);
}

exit()
{
   current_drawing = PM_GET_ACTIVE_DRW_NAME();
	if(current_drawing != ""){
	   PM_SAVE_ACTIVE_DRW();
	   PM_CHECK_IN_ACTIVE_DRW();
	   PM_CLOSE_ACTIVE_DRW();	   
	}
	/* 将已经加亮的模型恢复原来的颜色 */
	model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
	for (i = 0 ; i < model_number; i = i + 1){
		model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
		Highlight_Object(model,FALSE);
	}	
	/* release resource */		
	PM_FREE_SET(Object_List);
	PM_FREE_SET(High_Light_List);
	PM_FREE_SET(Selected_Objects);
	PM_FREE_SET(Model_Set);
	A_FREE(Drawing_Tag_Array);
	A_FREE(Column_Description_Array);
	A_FREE(View_Handles);
	A_FREE(View_Names);
	free_2darray(Object_Info);
	free_2darray(View_Info);
	free_2darray(View_Positions);
	free_2darray(Part_Label_Array);
	free_2darray(Mto_Label_Table);
    A_FREE(Access_List);
}

/*Added by Pekka Martin April 2010*/
export_active_drw(format, template_dwr, output_dir)
{
	rec = DM_INIT_TAGREC(); 
	DM_SET_TAGVAL(rec, G2D_EXT_TAG_OUTPUT_DIR, output_dir);
	DM_SET_TAGVAL(rec, G2D_EXT_TAG_TEMPLATE_DRW, template_dwr);
	DM_SET_TAGVAL(rec, G2D_EXT_TAG_FORMAT, ITOASCII(format));
	DM_SET_TAGVAL(rec, G2D_EXT_TAG_ONE_TO_ONE_SCALING, "0");
	
	r = PM_EXPORT_ACTIVE_DRW(rec);
	
	DM_FREE_TAGREC(rec);
	
	return(r);
}

/*获取舾装件零件表信息及零件号标注相关信息*/
/*零件表内容
1 - mto number      零件编号
2 - description     零件描述
3 - material        零件描述
4 - quantity        长度或者数量
5 - Weight/unit     单位重量
6 - Weight          重量
7 - remark          备注
*/

/*零件标注信息内容
1 - part number   零件编号
2 - anno_x        零件标注点X坐标
3 - anno_y        零件标注点Y坐标
4 - anno_z        零件标注点Z坐标
*/
get_mto_table()
{
	/*定义用于临时保存零件信息的数组*/
	temp_mto = alloc_2darray(Max_Parts_Number,Mto_Column_Number + 2);
    for(i=0;i<Max_Parts_Number;i=i+1;){
        put_2darray(temp_mto,i,0,"NOPART");    
    }
	temp_anno = alloc_2darray(Max_Parts_Number,4);
    part_number = PM_NR_MEMBERS_IN_SET(Model_Set);
    mto_number = 0;
	/*处理零件信息*/
	for(i=0;i<part_number;i=i+1;){
        part = PM_GET_MEMBER_IN_SET(Model_Set,i);
        nth = 0;
        part_no = PM_GET_OBJDATA(part,nth,Tag_PartNo);
        /*零件未编号*/
        if(ISINT(part_no)){
            U_CONFIRM("舾装件中包含未编号的零件，零件表无法生成");
            return(-1);       
        }
        /*零件已经编号*/
        else{
            get_part_info(part,part_no,temp_mto,mto_number);        
        }        
	}

	/*初始化材料表全局数组*/
	free_2darray(Mto_Table);
	Mto_Table = alloc_2darray(mto_number - 1,Mto_Column_Number + 2);
	Mto_Number = mto_number - 1;

	/*将材料表信息从临时数组拷贝到全局数组*/
	for (n = 0; n < mto_number - 1; n = n + 1;){
		for(m = 0; m < Mto_Column_Number + 2; m = m + 1){
			info = get_2darray(temp_mto,n,m);
			put_2darray(Mto_Table, n, m, info);
		}
	}

	if(Debug){
		U_MESSAGE("*****************材料表内容****************************");
		for(i=0;i<Mto_Number;i=i+1;){
			s1 = get_2darray(Mto_Table,i,0);
			s2 = get_2darray(Mto_Table,i,1);
			s3 = get_2darray(Mto_Table,i,2);
			s4 = get_2darray(Mto_Table,i,3);
			s5 = FTOASCII(get_2darray(Mto_Table,i,4));
			s6 = FTOASCII(get_2darray(Mto_Table,i,5));
			s7 = FTOASCII(get_2darray(Mto_Table,i,6));
			s8 = get_2darray(Mto_Table,i,7);
			mess = s1 + ";" + s2 + ";" + s3 + ";" + s4 + ";" + s5 + ";" + s6 + ";" + s7;
			U_MESSAGE(mess);
		}
	}

	/*初始化材料表标注信息全局数组*/
	free_2darray(Mto_Label_Table);
	Mto_Label_Table = alloc_2darray(Mto_Number,4);

	/*将材料表标注信息从临时数组拷贝到全局数组*/
	for (n = 0; n < Mto_Number; n = n + 1;){
		for(m = 0; m < 4; m = m + 1){
			info = get_2darray(temp_anno,n,m);
			put_2darray(Mto_Label_Table, n, m, info);
		}
	}

	/*释放临时数组的资源*/
	free_2darray(temp_mto);
	free_2darray(temp_anno);
	return(0);
}

get_part_info(part,part_no,temp_mto,mto_number)
{
    nth = 0;
    type = PM_GET_OBJDATA(part,nth,MMT_TAG_OBJTYPE);
    if(type == "1"){        /*设备*/
        get_equipment_info(part,part_no,temp_mto,mto_number);
    }
    else if(type == "2"){    /*标准件*/   
        get_standard_part_info(part,part_no,temp_mto,mto_number);
    }
    else if(type == "4"){    /*标准舾装件及板材*/ 
        qty = PM_GET_OBJDATA(part,nth,MMT_TAG_BOM_QUANTITY);
        if(ISSTRING(qty)){  /*标准舾装件*/
            get_std_structural_comp_info(part,part_no,temp_mto,mto_number);
        }
        else{               /*板材*/
            get_steel_plate_info(part,part_no,temp_mto,mto_number);        
        }        
    }
    else if(type == "5"){    /*型材*/   
        get_beam_info(part,part_no,temp_mto,mto_number);
    }  
    else if(type == "3"){    /*管路零件*/  
        qty = PM_GET_OBJDATA(part,nth,MMT_TAG_BOM_QUANTITY);
        if(ISSTRING(qty)){  /*管件*/
            get_standard_part_info(part,part_no,temp_mto,mto_number);
        }
        else{               /*管材*/
            get_beam_info(part,part_no,temp_mto,mto_number);        
        } 
    } 	
}

get_equipment_info(part,part_no,temp_mto,mto_number)
{
    part_index = String_To_Int(part_no) - 1;
    part_no_init = get_2darray(temp_mto,part_index,0);
    nth = 0;
    part_id = PM_GET_OBJDATA(part,nth,MMT_TAG_PARTID);
    if(part_no_init == "NOPART"){
		mto_number = mto_number + 1;
        /*1. 零件编号*/
        put_2darray(temp_mto,part_index,0,part_no);
        /*2. 零件名称*/           
		description = "";
		des = PM_GET_OBJDATA(part,nth,Tag_StructuralComponent_Description);		
		if(ISSTRING(des)){
			description = des;
		}
		put_2darray(temp_mto,part_index,1,description);
        /*3. 零件规格*/          
		size = "";
		value = PM_GET_OBJDATA(part,nth,Tag_StructuralComponent_TypeSize);		
		if(ISSTRING(value)){
			size = value;
		}
        put_2darray(temp_mto,part_index,2,size);
		
        /*4. 材料*/
		material = "钢";
		value = PM_GET_OBJDATA(part,nth,Tag_StructuralComponent_Material);		
		if(ISSTRING(value)){
			material = value;
		}		
        put_2darray(temp_mto,part_index,3,material);
		
        /*5. 辅数量*/
        put_2darray(temp_mto,part_index,4,1);   

        /*6. 数量*/
        put_2darray(temp_mto,part_index,5,1);
		
        /*5. 单重*/
/*         weight = 1.0 * PM_GET_OBJDATA(part,nth,MMT_TAG_MASS);
		if(weight > 0){
			put_2darray(temp_mto,part_index,4,weight);
		}
        else{
			put_2darray(temp_mto,part_index,4,0);
		} */
		
        /*7. 总重*/
		weight = 1.0 * PM_GET_OBJDATA(part,nth,MMT_TAG_MASS);
		if(weight > 0){
			put_2darray(temp_mto,part_index,6,weight);
		}
        else{
			put_2darray(temp_mto,part_index,6,0);
		}
		
        /*8. 备注*/ 
        remark = PM_GET_OBJDATA(part,nth,Tag_Remark);
        if(ISSTRING(remark)){
            put_2darray(temp_mto,part_index,7,remark);
        }
        else{
            put_2darray(temp_mto,part_index,7,"");   
        }          
    }
    else{
        /*5. 辅数量*/
        part_number = get_2darray(temp_mto,part_index,4) + 1;
        put_2darray(temp_mto,part_index,4,part_number);
        /*6. 数量*/
        part_number = get_2darray(temp_mto,part_index,5) + 1;
        put_2darray(temp_mto,part_index,5,part_number); 
        /*7. 总重*/ 
        weight = part_number * PM_GET_OBJDATA(part,nth,MMT_TAG_MASS);
        put_2darray(temp_mto,part_index,6,weight);    
    }
	put_2darray(temp_mto,part_index,8,"个");
	put_2darray(temp_mto,part_index,9,"个");
}

get_standard_part_info(part,part_no,temp_mto,mto_number)
{
    part_index = String_To_Int(part_no) - 1;
    part_no_init = get_2darray(temp_mto,part_index,0);
    nth = 0;
    part_id = PM_GET_OBJDATA(part,nth,MMT_TAG_PARTID);
    if(part_no_init == "NOPART"){
		mto_number = mto_number + 1;
        /*1. 零件编号*/
        put_2darray(temp_mto,part_index,0,part_no);
        /*2. 零件名称*/        
        description = "";
		des = DM_PARTID_DATA(part_id,"DE");
        if(ISSTRING(des)){
            description = des;
        }
		put_2darray(temp_mto,part_index,1,description);
		
		/*3. 零件规格*/ 
		size = "";
        value = DM_PARTID_DATA(part_id,"DD");
        if(ISSTRING(value)){
            size = value;
        }
		put_2darray(temp_mto,part_index,2,size);
	        
        /*4. 材料*/
        materail = DM_PARTID_DATA(part_id,"MC");
        if(ISSTRING(materail)){
            put_2darray(temp_mto,part_index,3,materail);        
        }
        else{
            put_2darray(temp_mto,part_index,3,"钢");
        } 
		
        /*5. 辅数量*/
        put_2darray(temp_mto,part_index,4,1);
		
        /*6. 数量*/
        put_2darray(temp_mto,part_index,5,1);        
        /*5. 单重*/
/*         weight = 1.0 * PM_GET_OBJDATA(part,nth,MMT_TAG_MASS);
		if(weight > 0){
			put_2darray(temp_mto,part_index,4,weight);
		}
		else{
			put_2darray(temp_mto,part_index,4,0);
		}
        put_2darray(temp_mto,part_index,4,weight); */
		
        /*7. 总重*/  
		weight = 1.0 * PM_GET_OBJDATA(part,nth,MMT_TAG_MASS);		
		if(weight > 0){
			put_2darray(temp_mto,part_index,6,weight);
		}
		else{
			put_2darray(temp_mto,part_index,6,0);
		}  
		
        /*8. 备注*/ 
        remark = PM_GET_OBJDATA(part,nth,Tag_Remark);
        if(ISSTRING(remark)){
            put_2darray(temp_mto,part_index,7,remark);
        }
        else{
            put_2darray(temp_mto,part_index,7,"");   
        }          
    }
    else{
        /*5. 辅数量*/
        part_number = get_2darray(temp_mto,part_index,4) + 1;
        put_2darray(temp_mto,part_index,4,part_number); 
        /*6. 数量*/
        part_number = get_2darray(temp_mto,part_index,5) + 1;
        put_2darray(temp_mto,part_index,5,part_number); 		
        /*7. 总重*/ 
        weight = part_number * PM_GET_OBJDATA(part,nth,MMT_TAG_MASS);
        put_2darray(temp_mto,part_index,6,weight);    
    }
	put_2darray(temp_mto,part_index,8,"个");
	put_2darray(temp_mto,part_index,9,"个");	
}

get_std_structural_comp_info(part,part_no,temp_mto,mto_number)
{
    part_index = String_To_Int(part_no) - 1;
    part_no_init = get_2darray(temp_mto,part_index,0);
    nth = 0;
    part_id = PM_GET_OBJDATA(part,nth,MMT_TAG_PARTID);
    if(part_no_init == "NOPART"){
		mto_number = mto_number + 1;
        /*1. 零件编号*/
        put_2darray(temp_mto,part_index,0,part_no);
		
        /*2. 零件名称*/        
        description = ""; 
		des = PM_GET_OBJDATA(part,nth,Tag_StructuralComponent_Description);
        if(ISSTRING(des)){
            description = des;
        }               
        put_2darray(temp_mto,part_index,1,description);
		
		/*3. 零件规格*/
		size = "";
        value = PM_GET_OBJDATA(part,nth,Tag_StructuralComponent_TypeSize); 		
        if(ISSTRING(value)){
            size = value;
        }
		put_2darray(temp_mto,part_index,2,size);
		
        /*4. 材料*/
		materail = PM_GET_OBJDATA(part,nth,Tag_StructuralComponent_Material);
        if(ISSTRING(materail)){
            put_2darray(temp_mto,part_index,3,materail);        
        }
        else{
            put_2darray(temp_mto,part_index,3,"钢");
        }

        /*5. 辅数量*/
        put_2darray(temp_mto,part_index,4,1);
		
        /*6. 数量*/
        put_2darray(temp_mto,part_index,5,1); 
		
		/*7. 总重*/
        weight = 1.0 * PM_GET_OBJDATA(part,nth,MMT_TAG_MASS);
		if(weight > 0){
			put_2darray(temp_mto,part_index,6,weight);
		}
		else{
			put_2darray(temp_mto,part_index,6,0);
		}
		
        /*8. 备注*/ 
        remark = PM_GET_OBJDATA(part,nth,Tag_Remark);
        if(ISSTRING(remark)){
            put_2darray(temp_mto,part_index,7,remark);
        }
        else{
            put_2darray(temp_mto,part_index,7,"");   
        }               
    }
    else{
        /*5. 辅数量*/
        part_number = get_2darray(temp_mto,part_index,4) + 1;
        put_2darray(temp_mto,part_index,4,part_number);	
        /*6. 数量*/
        part_number = get_2darray(temp_mto,part_index,5) + 1;
        put_2darray(temp_mto,part_index,5,part_number); 
        /*7. 总重*/ 
        weight = part_number * PM_GET_OBJDATA(part,nth,MMT_TAG_MASS);
        put_2darray(temp_mto,part_index,6,weight);    
    }
	put_2darray(temp_mto,part_index,8,"个");
	put_2darray(temp_mto,part_index,9,"个");	
}

get_steel_plate_info(part,part_no,temp_mto,mto_number)
{
    part_index = String_To_Int(part_no) - 1;
    part_no_init = get_2darray(temp_mto,part_index,0);
    nth = 0;
    part_id = PM_GET_OBJDATA(part,nth,MMT_TAG_PARTID);
    if(part_no_init == "NOPART"){
		mto_number = mto_number + 1;
        /*1. 零件编号*/
        put_2darray(temp_mto,part_index,0,part_no);
		
        /*2. 零件名称*/        
        description = "";
        des = DM_PARTID_DATA(part_id,"DE");
        if(ISSTRING(des)){
            description = des;
        }		
		put_2darray(temp_mto,part_index,1,description);
		
		/*3. 零件规格*/
		size = "";
        value = DM_PARTID_DATA(part_id,"DD");
        if(ISSTRING(value)){
            size = value;
        }
        put_2darray(temp_mto,part_index,2,size);
		
        /*4. 材料*/
        materail = DM_PARTID_DATA(part_id,"MC");
        if(ISSTRING(materail)){
            put_2darray(temp_mto,part_index,3,materail);        
        }
        else{
            put_2darray(temp_mto,part_index,3,"钢");
        } 
		
        /*5. 辅数量*/
        put_2darray(temp_mto,part_index,4,1);
		
        /*6. 数量*/
        area = 1.0 * PM_GET_OBJDATA(part,nth,"_PA") / 1000000.0;
        put_2darray(temp_mto,part_index,5,area);   
		
        /*5. 单重*/
/*         unit_weight = DM_PARTID_DATA(part_id,"DC1");
        if(!ISSTRING(unit_weight)){
            put_2darray(temp_mto,part_index,4,1.0 * unit_weight);
        }
        else{
            put_2darray(temp_mto,part_index,4,0);
        } */
		
        /*7. 总重*/  
        weight = 1.0 * PM_GET_OBJDATA(part,nth,MMT_TAG_MASS);
		if(weight >0){
			put_2darray(temp_mto,part_index,6,weight);
		}
		else{
			put_2darray(temp_mto,part_index,6,0);
		}
                
        /*8. 备注*/ 
        remark = PM_GET_OBJDATA(part,nth,Tag_Remark);
        if(ISSTRING(remark)){
            put_2darray(temp_mto,part_index,7,remark);
        }
        else{
            put_2darray(temp_mto,part_index,7,"");   
        }          
    }
    else{
        /*5. 辅数量*/
        part_number = get_2darray(temp_mto,part_index,4) + 1;
        put_2darray(temp_mto,part_index,4,part_number);	
	
        /*6. 数量*/
        area = get_2darray(temp_mto,part_index,5) + 1.0 * PM_GET_OBJDATA(part,nth,"_PA") / 1000000.0;
        put_2darray(temp_mto,part_index,5,area); 
		
        /*7. 总重*/ 
        weight = get_2darray(temp_mto,part_index,6) + 1.0 * PM_GET_OBJDATA(part,nth,MMT_TAG_MASS);
        put_2darray(temp_mto,part_index,6,weight);    
    }
	put_2darray(temp_mto,part_index,8,"个");
	put_2darray(temp_mto,part_index,9,"平米");	
}

get_beam_info(part,part_no,temp_mto,mto_number)
{
    part_index = String_To_Int(part_no) - 1;
    part_no_init = get_2darray(temp_mto,part_index,0);
    nth = 0;
    part_id = PM_GET_OBJDATA(part,nth,MMT_TAG_PARTID);
    if(part_no_init == "NOPART"){
		mto_number = mto_number + 1;
        /*1. 零件编号*/
		
        put_2darray(temp_mto,part_index,0,part_no);
        /*2. 零件名称*/        
        description = "";
        des = DM_PARTID_DATA(part_id,"DE");
        if(ISSTRING(des)){
            description = des;
        }		
		put_2darray(temp_mto,part_index,1,description);
		
		/*3. 零件规格*/   
		size = "";
        value = DM_PARTID_DATA(part_id,"DD");
        if(ISSTRING(value)){
            size = value;
        }
        put_2darray(temp_mto,part_index,2,size);
		
        /*4. 材料*/
        materail = DM_PARTID_DATA(part_id,"MC");
        if(ISSTRING(materail)){
            put_2darray(temp_mto,part_index,3,materail);        
        }
        else{
            put_2darray(temp_mto,part_index,3,"钢");
        } 

        /*5. 辅数量*/
        put_2darray(temp_mto,part_index,4,1);		
				
        /*6. 长度*/
        length = 1.0 * PM_GET_OBJDATA(part,nth,MMT_TAG_LENGTH);
        put_2darray(temp_mto,part_index,5,length); 
		
        /*5. 单重*/
/*         unit_weight = DM_PARTID_DATA(part_id,"DB1");
        if(!ISSTRING(unit_weight)){
            put_2darray(temp_mto,part_index,4,1.0 * unit_weight);
        }
        else{
            put_2darray(temp_mto,part_index,4,0);
        } */
		
        /*7. 总重*/  
        weight = 1.0 * PM_GET_OBJDATA(part,nth,MMT_TAG_MASS);
		if(weight > 0){
			put_2darray(temp_mto,part_index,6,weight); 
		}
		else{
			put_2darray(temp_mto,part_index,6,0);
		}
               
        /*8. 备注*/ 
        remark = PM_GET_OBJDATA(part,nth,Tag_Remark);
        if(ISSTRING(remark)){
            put_2darray(temp_mto,part_index,7,remark);
        }
        else{
            put_2darray(temp_mto,part_index,7,"");   
        }          
    }
    else{
	
        /*5. 辅数量*/
        part_number = get_2darray(temp_mto,part_index,4) + 1;
        put_2darray(temp_mto,part_index,4,part_number);	
	
        /*6. 数量*/
        length = get_2darray(temp_mto,part_index,5) + 1.0 * PM_GET_OBJDATA(part,nth,MMT_TAG_LENGTH);
        put_2darray(temp_mto,part_index,5,length); 
		
        /*7. 总重*/ 
        weight = get_2darray(temp_mto,part_index,6) + 1.0 * PM_GET_OBJDATA(part,nth,MMT_TAG_MASS);
        put_2darray(temp_mto,part_index,6,weight);    
    }
	put_2darray(temp_mto,part_index,8,"根");
	put_2darray(temp_mto,part_index,9,"mm");
}

draw_mto_table()
{
	if(Mto_Number == 0){
		return(0);
	}
	DW_COLOR(Mto_Table_Line_Colour);
	DW_LTYPE(Mto_Table_Line_Type,Mto_Table_Pattern_Length);
	DW_TSIZE(2,1.8,0.2);

	/*绘制横线*/
	line_number = Mto_Number;
	for(i=0;i<line_number;i=i+1;){
		x1 = Mto_Table_Orign_X;
		x2 = Mto_Table_Orign_X + Mto_Table_W;
		y1 = Mto_Table_Orign_Y + (i+1) * Mto_Table_H;
		y2 = y1;
		DW_POLY(x1,y1,x2,y2);
	}
	/*绘制竖线*/
	h1 = line_number * Mto_Table_H;
	x1 = Mto_Table_Orign_X;
	y1 = Mto_Table_Orign_Y;
	x2 = x1;
	y2 = y1 + h1;
	DW_POLY(x1,y1,x2,y2);
	x1 = x1 + Mto_Table_Column1_W;
	y1 = Mto_Table_Orign_Y;
	x2 = x1;
	y2 = y1 + h1;
	DW_POLY(x1,y1,x2,y2);
	x1 = x1 + Mto_Table_Column2_W;
	y1 = Mto_Table_Orign_Y;
	x2 = x1;
	y2 = y1 + h1;
	DW_POLY(x1,y1,x2,y2);
	x1 = x1 + Mto_Table_Column3_W;
	y1 = Mto_Table_Orign_Y;
	x2 = x1;
	y2 = y1 + h1;
	DW_POLY(x1,y1,x2,y2);
	x1 = x1 + Mto_Table_Column4_W;
	y1 = Mto_Table_Orign_Y;
	x2 = x1;
	y2 = y1 + h1;
	DW_POLY(x1,y1,x2,y2);
	x1 = x1 + Mto_Table_Column5_W;
	y1 = Mto_Table_Orign_Y;
	x2 = x1;
	y2 = y1 + h1;
	DW_POLY(x1,y1,x2,y2);
	x1 = x1 + Mto_Table_Column6_W;
	y1 = Mto_Table_Orign_Y;
	x2 = x1;
	y2 = y1 + h1;
	DW_POLY(x1,y1,x2,y2);
	x1 = x1 + Mto_Table_Column7_W;
	y1 = Mto_Table_Orign_Y;
	x2 = x1;
	y2 = y1 + h1;
	DW_POLY(x1,y1,x2,y2);
	
	/*写材料表内容*/
	DW_TATTR(0.0,0.0,4);
	offset = 3;
	for(i=0;i<Mto_Number;i=i+1;){
		x = Mto_Table_Orign_X + 1;
		y = Mto_Table_Orign_Y + Mto_Table_H * i + offset;
		text = get_2darray(Mto_Table,i,0);
		DW_TEXT(x, y, text);

		x = x + Mto_Table_Column1_W;
		y = Mto_Table_Orign_Y + Mto_Table_H * i + offset;
		text = get_2darray(Mto_Table,i,1);
		DW_TEXT(x, y, text);

		x = x + Mto_Table_Column2_W;
		y = Mto_Table_Orign_Y + Mto_Table_H * i + offset;
		text = get_2darray(Mto_Table,i,2);
		DW_TEXT(x, y, text);

		x = x + Mto_Table_Column3_W;
		y = Mto_Table_Orign_Y + Mto_Table_H * i + offset;
		text = get_2darray(Mto_Table,i,3);
		value = get_2darray(Mto_Table,i,3);		
		DW_TEXT(x, y, text);

		x = x + Mto_Table_Column4_W;
		y = Mto_Table_Orign_Y + Mto_Table_H * i + offset;
		text = "";
		value = get_2darray(Mto_Table,i,4);
		if(ISINT(value)){
			text = ITOASCII(value);
		}
		else{
			S_PRINTF(text,"%.2f",value);
		}
		unit_name = get_2darray(Mto_Table,i,8);
		text = text + unit_name;
		DW_TEXT(x, y, text);
		
		x = x + Mto_Table_Column5_W;
		y = Mto_Table_Orign_Y + Mto_Table_H * i + offset;
		text = "";
		value = get_2darray(Mto_Table,i,5);
		if(ISINT(value)){
			text = ITOASCII(value);
		}
		else{
			if(unit_name == "根"){
				text = ITOASCII(value);
			}
			else{
				S_PRINTF(text,"%.2f",value);
			}			
		}
		unit_name = get_2darray(Mto_Table,i,9);
		text = text + unit_name;
		DW_TEXT(x, y, text);
		
		x = x + Mto_Table_Column6_W;
		y = Mto_Table_Orign_Y + Mto_Table_H * i + offset;
		text = "";
		value = get_2darray(Mto_Table,i,6);
		if(ISINT(value)){
			text = ITOASCII(value);
		}
		else{
			S_PRINTF(text,"%.2f",value);
		}
		DW_TEXT(x, y, text);

		x = x + Mto_Table_Column7_W;
		y = Mto_Table_Orign_Y + Mto_Table_H * i + offset;
		text = get_2darray(Mto_Table,i,7);
		if(ISSTRING(text)){
			DW_TEXT(x, y, text);
		}		
	}
}