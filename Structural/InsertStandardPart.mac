#include "include/dmutil.h"
#include "include/win.h"
#include "include/win_panel.h"
#include "include/PmMgeTags.h"
#include "include/pm.h"
#include "include/pm_core_tags.h"
#include "include/array.mac"
#include "include/geoutils.h"
#include "include/cos.h"
#include "include/dm_cos_schema.h"
#include "include/quants.h"

main()
{
    if(!license()){
        return(0);
    }
    x0 = 0;
    y0 = 0;
    z0 = 0;
    PM_GET_CURRENT_LOC(x0,y0,z0);   
    /* step1 - select system */
    system_id = Select_System(1);
    if(system_id == -1){
        U_CONFIRM("取消当前操作");
        return(0);
    }
    
    /* step2 - select component type */
    type = Select_Component_Type();
    
    /* step2 - select component */
    part_id = Select_Standard_Component(type);
    if(ISINT(part_id)){
        U_CONFIRM("取消当前操作");
        return(0);        
    }
    DE = DM_PARTID_DATA(part_id,"DE");
    DD = DM_PARTID_DATA(part_id,"DD");
    DES = DE + " " + DD;
    
    /* step3 - select position */
    x = x0;
    y = y0;
    z = z0;
    trace_handle = PM_NEW_TRACEP();    
    key = PM_GET_POINT("请选择零件的插入位置", trace_handle, x, y, z); 
    if(key < 0){
        U_CONFIRM("取消当前操作");
        return(0);        
    }
    
    /* step4 - select direction */
    xdx = 1;
    xdy = 0;
    xdz = 0;
    /*
    key = PM_GET_DIRECTION("请选择零件的X轴方向", trace_handle, x, y, z, xdx, xdy, xdz);
    if(key < 0){
        U_CONFIRM("取消当前操作");
        return(0);        
    }   
    */ 
    ydx = 0;
    ydy = 1;
    ydz = 0;
    /*
    key = PM_GET_DIRECTION("请选择零件的Y轴方向", trace_handle, x, y, z, ydx, ydy, ydz);
    if(key < 0){
        U_CONFIRM("取消当前操作");
        return(0);        
    }
    */
    
    /* step5 - 插入零件 */
    tmat_h = PM_CREATE_TMAT(1,0,0,0,1,0,0,0,1,0);
    st = PM_UM_OPEN_CHANGE("插入标准件:" + DES);
    part_handle = Create_Standcomp(part_id, system_id, x, y, z, xdx, xdy, xdz, ydx, ydy, ydz, tmat_h); 
    st = PM_UM_CLOSE_CHANGE();   
}

license()
{
    if(!check_license()){
        U_CONFIRM("请使用正版软件！");
        return(0);
    }
    
    if(!check_date()){
        U_CONFIRM("软件已过有效期！");
        return(0);        
    }    
    return(1);
}

check_license()
{
    return(1);
}

check_date()
{
    year = 2019;
    month = 12;
    date = 31;
    
    current_time = GET_TIME();  
    current = CNV_DATE(current_time,7);
    int current_year;
    current_year = SCAN_QUANT(3,STRINGTERM(current,"-"));
    current = SUBSTRING(SEARCH(current,"-"),1);
    int current_month;
    current_month = SCAN_QUANT(3,STRINGTERM(current,"-"));
    int current_date;
    current_date = SCAN_QUANT(3,SUBSTRING(SEARCH(current,"-"),1));
    if(current_year > year){       
        return(0);
    }
    else if(current_month > month){
        return(0);
    }
    else if(current_date > date){
        return(0);
    }
    return(1);
}

/*type - part KEYWORD*/
Select_Standard_Component(type)
{
	selectmask = DM_INIT_TAGREC();
	DM_SET_TAGVAL(selectmask, "KW", type);
	part_id = DM_BROWSE_PARTCODE("", 1, selectmask);
	if(ISSTRING(part_id)){
        return(part_id);
	}
    else{
        return(-1);
    }	
}

/*  flag = 0,  return system name
    flag = 1, return system id
 */
Select_System(flag)
{
	system_name = PM_SELECT_SYSTEM();
	if(ISINT(system_name)){
		return(-1);
	}
	else {
	    if(!flag){
	        return(system_name);
	    }
	    else{
	        system_id = PM_GET_SYSTEM_ID(system_name);
	        return(system_id);
	    }
	}
}

Select_Component_Type()
{
	sel = A_ALLOC(6);
	A_PUT(sel,0,"法兰");
	A_PUT(sel,1,"阀门");
	A_PUT(sel,2,"螺栓");
	A_PUT(sel,3,"螺母");
	A_PUT(sel,4,"垫片");
	A_PUT(sel,5,"所有类型");
	si = 1;
	s = DM_CALL_SCRIPT("macro/Select.mac","U_Select","请选择要插入的零件类型",6,sel,si);
	type = "*";
	if(s == 0){
	    type = "*FLANGE*";
	}
	else if(s == 1){
	    type = "*VALVE*";
	}
	else if(s == 2){
	    type = "*BOLT*";
	}
	else if(s == 3){
	    type = "*NUT*";
	}	
	else if(s == 4){
	    type = "*WASHER*";
	}
	A_FREE(sel);
	return(type);
}

String_To_Rec(tag, value, rec)
{
	DM_SET_TAGVAL(rec, tag, value);
}

Point_To_Rec(tag, x, y, z, rec)
{
	s = "";
	S_PRINTF(s, "%f %f %f", x, y, z);
	DM_SET_TAGVAL(rec, tag, s);
}

Dir_To_Rec(tag, dx, dy, dz, rec)
{
	s = "";
	S_PRINTF(s, "%f %f %f", dx, dy, dz);
	DM_SET_TAGVAL(rec, tag, s);
}

Int_To_Rec(tag, value, rec)
{
	DM_SET_TAGVAL(rec, tag, ITOASCII(value));
}

/*
变量说明：
part_id           -- 标准舾装件的零件id
sys_id            -- 标准舾装所属系统的id
x,y,z             -- 标准舾装本地坐标原点坐标
x_dx,x_dy,x_dz    -- 标准舾装本地坐标系X坐标轴的方向
y_dx,y_dy,y_dz    -- 标准舾装本地坐标系Y坐标轴的方向
tmat_h            -- 标准舾装位置及方向的变换矩阵
*/
Create_Standcomp(string part_id, int sys_id, float x, float y, float z, float x_dx, float x_dy, float x_dz, float y_dx, float y_dy, float y_dz, handle tmat_h)
{
	/* Copy values, because we must not change original values */
	xt = x;			yt = y;			zt = z;
	xt_dx = x_dx;	xt_dy = x_dy;	xt_dz = x_dz;
	yt_dx = y_dx;	yt_dy = y_dy;	yt_dz = y_dz;
	
	/* Transform point and directions */
	TRF_POINT(tmat_h, xt, yt, zt);
	TRF_DIR(tmat_h, xt_dx, xt_dy, xt_dz);
	TRF_DIR(tmat_h, yt_dx, yt_dy, yt_dz);
	
	rec = DM_INIT_TAGREC();
	
	DM_SET_TAGVAL(rec, MMT_TAG_SYSTEM_ID, ITOASCII(sys_id));
	DM_SET_TAGVAL(rec, MMT_TAG_PARTID, part_id);
	Point_To_Rec(MMT_TAG_ORIGIN, xt, yt, zt, rec);
	Dir_To_Rec(MMT_TAG_LOCAL_XDIR, xt_dx, xt_dy, xt_dz, rec);
	Dir_To_Rec(MMT_TAG_LOCAL_YDIR, yt_dx, yt_dy, yt_dz, rec);
	
	inv_tag = "";
	obj = PM_CREATE_OBJECT("STANDCMP", rec, inv_tag);
	
	DM_FREE_TAGREC(rec);
	
	if(!ISINT(obj)){
		return(obj);
	}

	U_MESSAGE("无法创建标准零件");
	U_MESSAGE("错误信息: " + DM_GET_ERRMSG(obj));
	if(inv_tag != "")
		U_MESSAGE("此属性的值有错误: " + inv_tag);
		
	return(0);
}