/* $Id: CreateElecEquiSeat.mac,v1.0.0 2018/09/07 Wallis.liu $ */

/*
** This script use to create seat for electrical equipment.
*/

#include "include/dmutil.h"
#include "include/win.h"
#include "include/win_panel.h"
#include "include/PmMgeTags.h"
#include "include/pm.h"
#include "include/pm_core_tags.h"
#include "include/array.mac"
#include "include/geoutils.h"
#include "include/cos.h"
#include "include/dw.h"
#include "include/PmDirectionUtils.h"
#include "include/quants.h"

global string Script_Suffix = ".bs";
#include "$MarineToolkit/ElectricalEquipmentSeat/ElecEquiSeat.h"

global float Seat_X = 0.0;
global float Seat_Y = 0.0;
global float Seat_Z = 0.0;
global float Seat_Udx = 0.0;
global float Seat_Udy = 0.0;
global float Seat_Udz = 0.0;
global float Seat_Vdx = 0.0;
global float Seat_Vdy = 0.0;
global float Seat_Vdz = 0.0;

global float Root_X = 0.0;
global float Root_Y = 0.0;
global float Root_Z = 0.0;

global float Thickness = 0;

main()
{
    if(!license()){
        return(0);
    }
    /* define array for parameter of seat 
    ** type,W1,W,a,L1,L,b,D,d,a1,earth
    */
    seat_para = A_ALLOC(23);
    A_PUT(seat_para,0,"");
    A_PUT(seat_para,1,0.0);
    A_PUT(seat_para,2,0.0);
    A_PUT(seat_para,3,0.0);
    A_PUT(seat_para,4,0.0);
    A_PUT(seat_para,5,0.0);
    A_PUT(seat_para,6,0.0);
    A_PUT(seat_para,7,0.0);
    A_PUT(seat_para,8,0.0);
    A_PUT(seat_para,9,0.0);
    A_PUT(seat_para,10,"");    

    tmp = 0;
    /* pick electrical equipment */
    obj_h = PM_PICK_OBJECT("请选择电气设备", tmp, "EQUIPMENT");
	if (!ISINT(obj_h)){	   
        /* Read seat para from equipment model*/
        para_s = Get_Attribute_Value(obj_h, SeatPara);
        if(ISINT(para_s)){
            U_CONFIRM("此设备不属于电气设备或者未输入基座参数");	
            return(0);
        }
	
        /* get type of seat and call corresponding script */
        get_seat_para(obj_h,para_s,seat_para);
        type = A_GET(seat_para,0);
        if(type != ""){         
            path = SYS_GETENV("MarineToolkit") + "/ElectricalEquipmentSeat/ElecEquiSeat_" + type + Script_Suffix;
            PM_CALL_SCRIPT(path,"create_by_equi",obj_h);
        }
        else{
            U_CONFIRM("设备参数中未包含基座类型");
            return(0);            
        }		
    } 
    else{
        return(0);
    } 
    return(0);
}

/* This function use to get seat parameter from specified attribute of equipment GDL */
get_seat_para(obj_h,para,seat_para)
{
    /*get seat type & size from parameter of equipment GDL*/
    flag = 1;
    while(flag){
        parameter = STRINGTERM(para,"//");
        if(parameter != ""){
            name = STRINGTERM(parameter,"=");
            value = TAIL(parameter,STRLEN(parameter)-STRLEN(name)-1);
            if(name == "Type"){
                A_PUT(seat_para,0,value);
            }
            else if(name == "W1"){
                A_PUT(seat_para,1,String_To_Float(value));
            }
            else if(name == "W"){
                A_PUT(seat_para,2,String_To_Float(value));
            }
            else if(name == "a"){
                A_PUT(seat_para,3,String_To_Float(value));
            }
            else if(name == "L1"){
                A_PUT(seat_para,4,String_To_Float(value));
            }
            else if(name == "L"){
                A_PUT(seat_para,5,String_To_Float(value));
            }
            else if(name == "b"){
                A_PUT(seat_para,6,String_To_Float(value));
            }
            else if(name == "D"){
                A_PUT(seat_para,7,String_To_Float(value));
            }
            else if(name == "d"){
                A_PUT(seat_para,8,String_To_Float(value));
            }
            else if(name == "a1"){
                A_PUT(seat_para,9,String_To_Float(value));
            }
            else if(name == "Earth"){
                A_PUT(seat_para,10,value);
            }
        }
        else{
            flag = 0;            
        }
        para = TAIL(para,STRLEN(para) - STRLEN(parameter) - 2);        
    }
    
    /* get seat position and orientation from equipment model*/ 
	lox = String_To_Float(PM_GET_OBJDATA(obj_h,0,MMT_TAG_ORIG_X));
	loy = String_To_Float(PM_GET_OBJDATA(obj_h,0,MMT_TAG_ORIG_Y));
	loz = String_To_Float(PM_GET_OBJDATA(obj_h,0,MMT_TAG_ORIG_Z));   
	axis_rotate = String_To_Float(PM_GET_OBJDATA(obj_h,0,MMT_TAG_AXIS_ROT_ANGLE)); 
	axis_slope = String_To_Float(PM_GET_OBJDATA(obj_h,0,MMT_TAG_AXIS_SLP_ANGLE));
	udx = COS(axis_slope)*COS(axis_rotate);
	udy = COS(axis_slope)*SIN(axis_rotate);
	udz = SIN(axis_slope);
	saxis_rotate = String_To_Float(PM_GET_OBJDATA(obj_h,0,MMT_TAG_SAXIS_ROT_ANGLE));
	saxis_slope = String_To_Float(PM_GET_OBJDATA(obj_h,0,MMT_TAG_SAXIS_SLP_ANGLE));
	vdx = COS(saxis_slope)*COS(saxis_rotate);
	vdy = COS(saxis_slope)*SIN(saxis_rotate);
	vdz = SIN(saxis_slope);	  
	
	Seat_Udx = udx;
	Seat_Udy = udy;
	Seat_Udz = udz;
	Seat_Vdx = vdx;
	Seat_Vdy = vdy;
	Seat_Vdz = vdz;
	Seat_X = lox;
	Seat_Y = loy;
	Seat_Z = loz;
	
    A_PUT(seat_para,11,lox);
    A_PUT(seat_para,12,loy);
    A_PUT(seat_para,13,loz);
    A_PUT(seat_para,14,udx);
    A_PUT(seat_para,15,udy);
    A_PUT(seat_para,16,udz);
    A_PUT(seat_para,17,vdx);
    A_PUT(seat_para,18,vdy);
    A_PUT(seat_para,19,vdz);
    return(0);    
}

String_To_Float(string float_string)
{
   value = 0.0;
   value = SCAN_QUANT(3,float_string);
   return(value);
}

Get_Attribute_Value(handle ModelObject, Tag_Name)
{
	Att_Value = PM_GET_OBJDATA(ModelObject, 0, Tag_Name);
	if(ISSTRING(Att_Value)){
		return(Att_Value);
	}
	else{
		return(-1);
	}
}

license()
{
    if(!check_license()){
        U_CONFIRM("请使用正版软件！");
        return(0);
    }
    
    if(!check_date()){
        U_CONFIRM("软件已过有效期！");
        return(0);        
    }    
    return(1);
}

check_license()
{
    return(1);
}

check_date()
{
    year = 2019;
    month = 12;
    date = 31;
    
    current_time = GET_TIME();  
    current = CNV_DATE(current_time,7);
    int current_year;
    current_year = SCAN_QUANT(3,STRINGTERM(current,"-"));
    current = SUBSTRING(SEARCH(current,"-"),1);
    int current_month;
    current_month = SCAN_QUANT(3,STRINGTERM(current,"-"));
    int current_date;
    current_date = SCAN_QUANT(3,SUBSTRING(SEARCH(current,"-"),1));
    if(current_year > year){       
        return(0);
    }
    else if(current_month > month){
        return(0);
    }
    else if(current_date > date){
        return(0);
    }
    return(1);
}

/*check if the passed model is hull structure*/
Is_Hull_Part(handle part_handle)
{
    check = PM_GET_OBJDATA(part_handle,0,".qL");
    if(check == "1"){
        return(1);
    }
    return(0);
}

Pick_Hull_Panel(string prompt)
{
    flag = 1;
    while(flag){
        tmp = 0;
        picked_hull_handle = PM_PICK_OBJECT(prompt, tmp, "EQUIPMENT");
        if(!ISINT(picked_hull_handle)){
            if(Is_Hull_Part(picked_hull_handle)){
                /*set flag for skip looping*/
                flag = 0;
            }
        }
        else{
            return(0);
        }
    }
    return(picked_hull_handle);
}

pick_attached_position(seat_para)
{
    x0 = 0;
    y0 = 0;
    z0 = 0;
    PM_GET_CURRENT_LOC(x0,y0,z0); 
    x = x0;
    y = y0;
    z = z0;
    trace_handle = PM_NEW_TRACEP();    
    key = PM_GET_POINT("请选择支撑位置", trace_handle, x, y, z); 
    if(key < 0){
        U_CONFIRM("取消当前操作");
        return(-1);        
    }
    
    plane_dx = Seat_Udx; plane_dy = Seat_Udy; plane_dz = Seat_Udz;
    PlaneLineIntersectPoint(plane_dx,plane_dy,plane_dz,x,y,z,plane_dx,plane_dy,plane_dz,Seat_X,Seat_Y,Seat_Z,x0,y0,z0);
    PM_SET_CURRENT_LOC(x0,y0,z0);
        
    A_PUT(seat_para,20,x0);  
    A_PUT(seat_para,21,y0);
    A_PUT(seat_para,22,z0);
    return(0);
}

read_panel_data(panel,seat_para)
{
    /*initiate argument for get hull panel data*/
    panel_x = 0; panel_y = 0; panel_z = 0;
    panel_dx = 0;
    panel_dy = 0;
    panel_dz = 0;
    panel_t = 0;
    Get_Panel_Data(panel,panel_x,panel_y,panel_z,panel_dx,panel_dy,panel_dz,panel_t);
    if(panel_t == 0){
        panel_t = Panel_Default_Thickness;
    }

    seat_dx = Seat_Udx;
    seat_dy = Seat_Udy;
    seat_dz = Seat_Udz;       
    angle = 0;
    
    GU_GetAngleBetweenTwoVectors(seat_dx,seat_dy,seat_dz,panel_dx,panel_dy,panel_dz,angle);
    if((angle<179.9 & angle>0.1) | (angle<-0.1 & angle >-179.9)){
        U_CONFIRM("设备底座平面与结构平面的夹角大于0.1度");
        return(-1);
    }
     
    x = 0; y =0; z = 0;
    PlaneLineIntersectPoint(seat_dx,seat_dy,seat_dz,panel_x,panel_y,panel_z,seat_dx,seat_dy,seat_dz,Seat_X,Seat_Y,Seat_Z,x,y,z);   
    
    /* fix root position according to the direction of panel*/  
    if( angle > 90 | angle < -90 ){
        Point_3D_Move_With_DirAndDis(x,y,z,seat_dx,seat_dy,seat_dz,panel_t);        
    }  
    A_PUT(seat_para,20,x);  
    A_PUT(seat_para,21,y);
    A_PUT(seat_para,22,z);   
}

Get_Panel_Data(hull,x,y,z,dx,dy,dz,t)
{
    find_node = 0;
    node_number = 1;
    while(!find_node){
        check = PM_GET_CONPNT_DATA(hull,node_number,"x");
        if(ISSTRING(check)){
            find_node = 1;
        }
        else{
            node_number = node_number + 1;
            if(node_number > Max_Panel_Node_Number){
                return(-1);
            }
        }
    } 
    /*node point position*/
    x = String_To_Float(PM_GET_CONPNT_DATA(hull,node_number,"x"));
    y = String_To_Float(PM_GET_CONPNT_DATA(hull,node_number,"y"));
    z = String_To_Float(PM_GET_CONPNT_DATA(hull,node_number,"z"));
    /*normal direction of panel*/
    fnr = PM_GET_CONPNT_DATA(hull,node_number,"fnr");
    fns = PM_GET_CONPNT_DATA(hull,node_number,"fns");
    rotation_angle = String_To_Float(fnr);
    slope_angle = String_To_Float(fns);
    dx = COS(slope_angle)*COS(rotation_angle);
    dy = COS(slope_angle)*SIN(rotation_angle);
    dz = SIN(slope_angle);
    VEC_UNITV(dx,dy,dz);
    /*get thickness of panel*/
    ts = PM_GET_OBJDATA(hull,0,NCH_Thickness);
    if(ISSTRING(ts)){
        t = String_To_Float(ts);
    }
    return(0);
}

/*Parameter    type     description 
--plane_dx     float    vector value of plane
--plane_dy     float    vector value of plane
--plane_dz     float    vector value of plane
--plane_x      float    x coordinate value of plane
--plane_y      float    y coordinate value of plane
--plane_z      float    z coordinate value of plane   
--line_dx      float    vector value of line      
--line_dy      float    vector value of line      
--line_dz      float    vector value of line      
--line_x       float    x coordinate value of line
--line_y       float    y coordinate value of line
--line_z       float    z coordinate value of line
--x,y,z        float    intersection point coordinate
*/ 
PlaneLineIntersectPoint(plane_dx,plane_dy,plane_dz,plane_x,plane_y,plane_z,line_dx,line_dy,line_dz,line_x,line_y,line_z,x,y,z)  
{ 
    vp1 = plane_dx;  
    vp2 = plane_dy;  
    vp3 = plane_dz;  
    n1 = plane_x;  
    n2 = plane_y;  
    n3 = plane_z;  
    v1 = line_dx;  
    v2 = line_dy;  
    v3 = line_dz;  
    m1 = line_x;  
    m2 = line_y;  
    m3 = line_z;  
    vpt = v1 * vp1 + v2 * vp2 + v3 * vp3;  
    /*首先判断直线是否与平面平行*/  
    if (vpt == 0){  
        return(-1);  
    }   
    t = ((n1 - m1) * vp1 + (n2 - m2) * vp2 + (n3 - m3) * vp3) / vpt;  
    x = m1 + v1 * t;  
    y = m2 + v2 * t;  
    z = m3 + v3 * t;  
    return(0);  
}

/*Parameter    type     description 
--x            float    x coordinate value of point
--y            float    y coordinate value of point
--z            float    z coordinate value of point   
--dx           float    vector value of move direction      
--dy           float    vector value of move direction      
--dz           float    vector value of move direction      
--distance     float    move distance
*/  

Point_3D_Move_With_DirAndDis(float x,float y,float z,float dx, float dy, float dz, float distance)
{
    x = x + dx*distance;
    y = y + dy*distance;
    z = z + dz*distance;
    return(0);
}