/* $Id: PenetrationDrawing.mac,v1.0.0 2016/08/23 Wallis.liu $ */

/*
**	This script use to generate fabrication drawing of double plate of pipe penetration 
*/
#include "include/array.mac"
#include "include/cos.h"
#include "include/dw.h"
#include "include/dmutil.h"
#include "include/dm_errors.h"
#include "include/dm_cos_schema.h"
#include "include/dmrpt.h"
#include "include/geoutils.h"
#include "include/g2d_ext2df.h"

#include "include/PmMgeTags.h"
#include "include/pm.h"
#include "include/pm_errors.h"
#include "include/pm_drawings.h"
#include "include/pm_core_tags.h"
#include "include/pm_annot.h"
#include "include/PmPipingUtils.h"
#include "include/pi_math.mac" 
#include "include/pi.h"
#include "include/pm_rfh.h"
#include	"include/quants.h"
#include "include/sym.h"
#include "include/win.h"
#include "include/win_panel.h"
#include "opt/pm/EloTools/include/viewutilsELO.h"

#include "$MarineToolkit/Piping/PenetrationDrawing.h"
#include "$MarineToolkit/Piping/PenetrationProdInfo.h"
#include "$MarineToolkit/Include/Common_Utility.h"
#include "$MarineToolkit/Include/String_Utility.h"
#include "$MarineToolkit/Include/Math_Utility.h"
#include "$MarineToolkit/Include/Drawing_Utility.h"
#include "$MarineToolkit/Include/Structural_Utility.h"
#include "$MarineToolkit/Include/license.h"
#include "$MarineToolkit/Include/DoublePlate.h"

global   handle	Block_Name,Planning_Unit,Pro_Number,Dra_Number,Start_Page;
global   handle	DisplayGrid;
global   handle	NULL_HANDLE = 0;
global   int		Grid_SelectedItem = 0;
global   int		Grid_SortColumn = -1;
global   int		Grid_SortDirection = 1;
global   handle	Object_List;          	
global   handle	Drawing_Tag_Array, Column_Description_Array;
global   handle	Object_Info;				   
global   int		Object_Number = 0;	      
global   int		Model_Add_Mode = 1;        
global   handle	High_Light_List;           
global   handle	Selected_Objects;
global   int		Selected_Objects_Number = 0;
global   int		AutoScale = 1;
global   int		AutoHighLight = 1;
global   handle	MainWindow;
                  
global   handle	Process, Cur_Drawing;
global   string	Penetration_Name = "",Cur_Drawing_Name = "";
global   handle   Drawing_Form, Select_Form;
global   string	Drawing_Form_Name = "";
global   handle	Open_Next,Open_Previous;

global   handle	Model_Handle,View_Handle;
global   int		Debug = 1; 

global	handle	Dim_Table;


global string   Icon_My_Check_Out =         "$MarineToolkit/ICONS/mycheckout.ico";
global string   Icon_Other_Check_Out =      "$MarineToolkit/ICONS/checkout.ico";
global string   Icon_Local_Server =         "$MarineToolkit/ICONS/local_server.ico";
global string   Icon_Replica_Check_Out =    "$MarineToolkit/ICONS/replica_checkout.ico";
global string   Icon_Replica_Server =       "$MarineToolkit/ICONS/replica.ico";
global string   Icon_Error =                "$MarineToolkit/ICONS/error.ico";
global handle  Access_List;                /*用于保存模型权限状态的数组*/

/*定义主窗口的列数*/
#define  Column_Number 8
/*
**初始化相关对象
*/

init()
{
	Drawing_Tag_Array = A_ALLOC(Column_Number, "STRING");
	A_PUT(Drawing_Tag_Array,0,Tag_Penetration_PlanningUnit);
	A_PUT(Drawing_Tag_Array,1,Tag_Spool_Name);
	A_PUT(Drawing_Tag_Array,2,Tag_Penetration_FabDn);
	A_PUT(Drawing_Tag_Array,3,"");
	A_PUT(Drawing_Tag_Array,4,"");
	
	Column_Description_Array = A_ALLOC(Column_Number, "STRING");
	A_PUT(Column_Description_Array,0,"托盘编号");
	A_PUT(Column_Description_Array,1,"管段名称");
	A_PUT(Column_Description_Array,2,"复板零件名");
	A_PUT(Column_Description_Array,3,"页码");
	A_PUT(Column_Description_Array,4,"总页数");

	Object_Info = alloc_2darray(1,1);	
    Access_List = A_ALLOC(1);	
}

set_default()
{
	/*initialize object list*/
	Object_List = PM_INIT_SET();

	/*initialize highlighted object list*/
	High_Light_List = PM_INIT_SET();	
	
	/*initialize selected object list*/
	Selected_Objects = PM_INIT_SET();
	
	drawing_form = "";
	
	st = GET_STRING_DEFAULT("PenetrationFabricationDrawing", "Drawing_Form", drawing_form);	
	if(st == 0){
		W_SET_PANELITEM_ARGS(Drawing_Form, W_PANEL_VALUE, drawing_form);	  
		Drawing_Form_Name = drawing_form;
	}
	else{
		W_SET_PANELITEM_ARGS(Drawing_Form,W_PANEL_VALUE,"SDARI_DoublePlate");
		Drawing_Form_Name = "SDARI_DoublePlate";	
	}

	pro_number = Get_Project_Attribute(Tag_Pro_ShipNumber);
	if(ISSTRING(pro_number)){
		W_SET_PANELITEM_ARGS(Pro_Number,W_PANEL_VALUE,pro_number);	
		
	}	
}

/*
**Get the selected objects in grid
*/
get_selected_items(handle wobj)
{
	PM_SETOP_SUB(Selected_Objects, Selected_Objects);
	selected_rows = W_GET_WINDOW_ARG( wobj, W_LISTW_MSVALUE );
	total_lines = STRLEN(selected_rows);
	k = 0;
	for (i = 0; i < total_lines; i = i + 1){
		temp_string = SUBSTRING(selected_rows,i);
		flag = HEAD(temp_string,1);
		if (flag == "1"){
			res = W_SET_WINDOW_ARGS( wobj, W_LISTW_ROW, i);
			selected_row = W_GET_WINDOW_ARG( wobj, W_LISTW_ITEMID );	
			model_handle = PM_GET_MEMBER_IN_SET(Object_List, selected_row);	
			PM_ADD_OBJECT_TO_SET(model_handle,Selected_Objects);
			k = k + 1;
		}
	}
	Selected_Objects_Number = k;
	return (0);
}

model_list_mode(item, event_type, selection)
{
	if (selection == 0){
		Model_Add_Mode = 0;
	}
	else{
		Model_Add_Mode = 1;
	}
	return(0);
}

/*
**get information of objects stored in Object_List and save to ProdInfo array；
*/
get_penetration_info()
{	
	/* define array for information of model groups */
	A_FREE(Object_Info);
	Object_Info = alloc_2darray(Object_Number,Column_Number);
	A_FREE(Access_List);
	Access_List = A_ALLOC(Object_Number);    
	/* get information of model groups and save in array */	
	for (i = 0; i < Object_Number; i = i + 1;){		
		object_handle = PM_GET_MEMBER_IN_SET(Object_List, i);	
		/*get planning unit of model group*/
		planning_unit = get_planning_unit(object_handle);
		if(ISSTRING(planning_unit)){
		   put_2darray(Object_Info,i,0,planning_unit);
		}
		else{
		   put_2darray(Object_Info,i,0,"未定义");
		}	
		
		/*get name of pipe spool*/	
		spool_name = get_spool_name(object_handle);
		put_2darray(Object_Info,i,1,spool_name);

		/*get name of double plate*/	
		penetration_name = PM_GET_OBJDATA(object_handle,0,Tag_Penetration_FabDn);
		if(ISSTRING(penetration_name)){
			put_2darray(Object_Info,i,2,penetration_name);
		}
		else{
			put_2darray(Object_Info,i,2,"未定义");
		}
		
		page_number = get_page_number(object_handle);
		put_2darray(Object_Info,i,3,page_number);
		put_2darray(Object_Info,i,4,"");
		
        access = Get_Object_Access_Status(object_handle);
		A_PUT(Access_List,i,access);
	}	
	return 0;
}

/*
**display informations stored in global array 'object_info' in grid；
**sort grid according to the value of global argue Grid_SortColumn，Grid_SortDirection；
*/
publish_penetration_info()
{
	/* display informations of structural unit in grid */	
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_DELETEROWS, -1); 
	for (i = 0; i < Object_Number; i = i + 1;){
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_INSERTROWS, 1);
		/*set access status flag of group*/
		flag = A_GET(Access_List,i);
		icon = Icon_My_Check_Out;
		if(flag == "Local"){
		   icon = Icon_Local_Server;
		}
		else if(flag == "CheckOutByMe"){
		   icon = Icon_My_Check_Out;
		}
		else if(flag == "CheckOutByOther"){
		   icon = Icon_Other_Check_Out;
		}
		else if(flag == "Replica"){
		   icon = Icon_Replica_Server;
		}
		else if(flag == "CheckOutByReplicaUser"){
		   icon = Icon_Replica_Check_Out;
		}
		else{
		   icon = Icon_Error;
		} 
        W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0, W_LISTW_COLUMN, 0, W_LISTW_ICON, icon );        
		for ( j = 0; j < Column_Number; j = j + 1;){
			Value = get_2darray(Object_Info,i,j);
			if (ISSTRING(Value)){
				W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0, W_LISTW_COLUMN, j, W_LISTW_STRING, Value);
			}
		}
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ITEMID, i);
	}
	
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 1);
	
	/* Adjust the width of column automatically*/
	for (i=0; i < Column_Number; i = i + 1;){
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_COLUMN, i, W_LISTW_COLUMNWIDTH, -1);
	}
	
	/* Sort grid */
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_COLUMN, Grid_SortColumn, W_LISTW_SORT, Grid_SortDirection);
}

/*
**Create Top frame
*/
create_top_frame()
{
	mainform = W_INIT_FRAME();
	W_REALIZE_WINDOW(mainform,  W_FRAME_TITLE, "复板零件图生成工具",
                                W_FRAME_RESIZABLE,  W_RESIZE_HORIZONTALLY);
	return(mainform);
}

/*
**create grid for displaying information of model group
*/
create_grid(main_form)
{
	wobj = W_ADD_WINDOW(main_form, W_MULTISELECT, "DisplayGrid");
						   
	W_REALIZE_WINDOW(wobj,  W_FRAME_RIGHT_OF,    	"Block_Name",
							W_FRAME_BELOW,       	"panel_upperpart",
							W_LISTW_COLUMNS,     	Column_Number,
							W_FRAME_SCROLLBAR,   	W_SCROLLBAR_RIGHTEDGE,
							W_LISTW_HEADER_MODE, 	W_LISTW_HEADER_BUTTONS,
                            W_FRAME_RESIZABLE,      W_RESIZE_HORIZONTALLY,
							W_LISTW_MODE_REPORT, 	0,
							W_FRAME_COLS,        	75, 
							W_FRAME_ROWS,        	17,
							W_LISTW_CALLBACK,    	1);
						   
	W_SET_WINDOW_HANDLER(wobj, "grid_handler");
	
	/*
	**set the column title of grid
	*/	
	set_column_title(wobj, Column_Description_Array, Column_Number);
		
	return(wobj);
}

quit_handler(item, event_type, button_value)
{
	exit();
	U_MESSAGE("退出复板零件图生成工具");
	return(99);
}


grid_handler(window, event_type, row, column, item_id)
{  	
	if (event_type == W_EVENT_ITEM_SELECTED) {
		/* handle sort of grid */
		if (row < 0 & column >= 0) {
			sort_grid(column,window);
		}		
		else if(row >= 0 & column == 0){		
			/* get selected objects in grid */				
			get_selected_items(DisplayGrid);			
			auto_highlight();
			auto_scale_model();			
		}		
	}	
	/* handle double click event */
	else if (event_type == W_EVENT_ITEM_DOUBLECLICKED) {	
		/* get selected objects in grid */			
		get_selected_items(DisplayGrid);			
		auto_highlight();
		auto_scale_model();			
	}
	/*set_page_number();*/
	return(0);
}

auto_highlight()
{
	if (AutoHighLight == 1){
		/* refresh color of model */
		model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			Highlight_Object(model,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);
		PM_FREE_SET(temp);
		
		/* high light selected model */
		model_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
		for (i = 0; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
			Highlight_Object(model,TRUE);
			PM_ADD_OBJECT_TO_SET(model,High_Light_List);			
		}
	}
}

auto_scale_model()
{
	if (AutoScale == 1){				
		model_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
		if (model_number == 1){
			model_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,0);
			Auto_Scale(model_handle);
			x0 = PM_GET_OBJDATA(model_handle, 0, MMT_TAG_COGX);
			y0 = PM_GET_OBJDATA(model_handle, 0, MMT_TAG_COGY);
			z0 = PM_GET_OBJDATA(model_handle, 0, MMT_TAG_COGZ);
			x = SCAN_QUANT(1,x0);
			y = SCAN_QUANT(1,y0);
			z = SCAN_QUANT(1,z0);
			PM_SET_CURRENT_LOC(x, y, z);				
		}
	}
}

sort_grid(column,window)
{
	/* A column header was clicked; sort the items */
	if (Grid_SortColumn == column) {
		if (Grid_SortDirection == 0) {
			Grid_SortDirection = 1;
		}
		else {
			Grid_SortDirection = 0;
		}
	}
	else {
		Grid_SortDirection = 1;
	}
	Grid_SortColumn = column;
	W_SET_WINDOW_ARGS(window, W_LISTW_COLUMN, column, W_LISTW_SORT, Grid_SortDirection);
}

model_browsing_handler(item, event_type, button_value)
{
	W_UNMAP_FRAME(MainWindow);	
	selected_model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
	if (selected_model_number > 0){
		current_model = PM_GET_MEMBER_IN_SET(High_Light_List, 0);
		x0 = PM_GET_OBJDATA(current_model, 0, MMT_TAG_COGX);
		y0 = PM_GET_OBJDATA(current_model, 0, MMT_TAG_COGY);
		z0 = PM_GET_OBJDATA(current_model, 0, MMT_TAG_COGZ);
		x = SCAN_QUANT(1,x0);
		y = SCAN_QUANT(1,y0);
		z = SCAN_QUANT(1,z0);
		PM_SET_CURRENT_LOC(x, y, z);	
	}
	nth_part = 0;
	PM_PICK_OBJECT("浏览模型",nth_part);
	W_MAP_FRAME(MainWindow);
}

search_objects(item, event_type, button_value)
{   
    /* Delete all the data in grid */	
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
    W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_DELETEROWS, -1); 
	/* query all model groups*/
	query = PM_INIT_QUERY("GROUP");
	groups = PM_EXECUTE_QUERY(query);

	/* Get the pipe penetration group */
	temp_list = PM_INIT_SET();

	if (!ISINT(groups)){
		group_number = PM_NR_MEMBERS_IN_SET(groups);
		for (i = 0; i < group_number; i = i + 1;){
			group_handle = PM_GET_MEMBER_IN_SET(groups, i);
			group_type = PM_GET_OBJDATA(group_handle, 0, MMT_TAG_GROUPTYPE);
			/* Get rid of other type group*/
 			if (group_type == "19"){
				/* Get rid of group that contain nothing */
				models = PM_GET_OBJECTS_IN_GROUP(group_handle);
				if (models != 0){
					model_number = PM_NR_MEMBERS_IN_SET(models);
					if (model_number !=0){
						/*检查是否为复板（如果是护圈则去掉）*/
						if(is_double_plate(group_handle)){
							members = PM_GET_OBJECTS_IN_GROUP(group_handle);
							members_number = PM_NR_MEMBERS_IN_SET(members);
							for(j=0;j<members_number;j=j+1;){
								member = PM_GET_MEMBER_IN_SET(members,j);
								nth = 0;
								type = PM_GET_OBJDATA(member,nth,MMT_TAG_OBJTYPE);
								if(type == "4"){        
									/* 护圈的计量单位为个数，没有面积的属性 */
									area = 1.0 * PM_GET_OBJDATA(member,nth,MMT_TAG_BOM_AREA);
									if(area > 0){
										result = PM_ADD_OBJECT_TO_SET(member,temp_list);
									}		
								}	
							}													
						}							
					}
				}
			}
		}
	}

	penetration_number = PM_NR_MEMBERS_IN_SET(temp_list);
	if (penetration_number <= 0){      
		return 0;
	}
   
	filter_model(temp_list);

	/* add the search result to the result set according to the  */
	if (Model_Add_Mode == 0){
		PM_SETOP_OR(Object_List,temp_list);
	}

	if (Model_Add_Mode == 1){
        PM_FREE_SET(Object_List);
        Object_List = PM_INIT_SET();
		Object_List = PM_COPY_SET(temp_list);
	}

	Object_Number = PM_NR_MEMBERS_IN_SET(Object_List);

	if (Object_Number <= 0){
		PM_FREE_SET(temp_list);
		return 0;
	}

	PM_FREE_SET(temp_list);
	/* get pipe penetration production information */
	get_penetration_info();
	publish_penetration_info();
	/*set_page_number();*/
}

is_double_plate(penetration)
{
	members = PM_GET_OBJECTS_IN_GROUP(penetration);
	members_number = PM_NR_MEMBERS_IN_SET(members);
	for(i=0;i<members_number;i=i+1;){
		member = PM_GET_MEMBER_IN_SET(members,i);
		nth = 0;
		type = PM_GET_OBJDATA(member,nth,MMT_TAG_OBJTYPE);
		if(type == "4"){        
            /* 护圈的计量单位为个数，没有面积的属性 */
			area = 1.0 * PM_GET_OBJDATA(member,nth,MMT_TAG_BOM_AREA);
			if(area > 0){
				return(1);
			}		
		}	
	}
	return(0);
}

filter_model(penetrations)
{
	/* Get filter conditions*/
    planning_unit = W_GET_PANELITEM_ARG(Planning_Unit,W_PANEL_VALUE);
	
	temp = PM_INIT_SET();

	penetration_number = PM_NR_MEMBERS_IN_SET(penetrations);
	for (i = 0; i < penetration_number; i = i + 1;){
		penetration_handle = PM_GET_MEMBER_IN_SET(penetrations, i);
		model_planning_unit = get_planning_unit(penetration_handle);
		if(PATTERN_MATCH(model_planning_unit,planning_unit)){
			PM_ADD_OBJECT_TO_SET(penetration_handle,temp);
		}
	}
	PM_SETOP_SUB(penetrations,penetrations);
	PM_SETOP_OR(penetrations,temp);
	PM_FREE_SET(temp);
	return(0);
}

get_model_handle(part)
{	
   model_handle = PM_GET_OBJECT_GROUP(part,Group_Type_I);
   if(ISINT(model_handle)){
      U_CONFIRM("此零件不属于任何贯通件");
      return(-1);	      
   }   	
	return(model_handle);	
}

pick_objects(item, event_type, button_value)
{
 	tmp = 0;
	flag = TRUE;
	temp = PM_INIT_SET();
	while(flag){	
		pick_part = PM_PICK_OBJECT("请选择复板", tmp, "STRUCTCMP");
		if (!ISINT(pick_part)){
			groups_handle = get_model_handle(pick_part);
			if (!ISINT(groups_handle)){
				PM_ADD_OBJECT_TO_SET(groups_handle,temp);
				Highlight_Object(groups_handle,TRUE);
			}
			else{
				PM_RM_OBJECT_FROM_SET(groups_handle,temp);
				Highlight_Object(groups_handle,FALSE);			
			}	
		}	
		else{
			flag = FALSE;		
		}
	}
	
	if (Model_Add_Mode == 0){
		PM_SETOP_OR(Object_List,temp);
	}	
	
	if (Model_Add_Mode == 1){
		PM_SETOP_SUB(Object_List,Object_List);
		Object_List = PM_COPY_SET(temp); 
	}	
	
	Object_Number = PM_NR_MEMBERS_IN_SET(Object_List);	
	if (Object_Number <= 0){
		return 0;
	}
	
	/* 获取并发布生产信息 */
	get_penetration_info();
	publish_penetration_info();
	
	for (i = 0; i < Object_Number; i = i + 1;){
		group = PM_GET_MEMBER_IN_SET(Object_List, i);		
		Highlight_Object(group,FALSE);			
	}	
	
	return(0);
}

options_selected(item, event_type, dummy)
{
	s = W_GET_PANELITEM_ARG(item, W_PANEL_VALUE);
	if ( s == "00" ){
		AutoHighLight = 0;
		AutoScale = 0;	
		/* 将已经加亮的模型恢复原来的颜色 */
		model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			Highlight_Object(model,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);	
		PM_FREE_SET(temp);		
	}
	else if( s == "10"){
		AutoHighLight = 1;
		AutoScale = 0;	
	}
	else if( s == "11"){
		AutoHighLight = 1;
		AutoScale = 1;	
	}
	else if( s == "01"){
		AutoHighLight = 0;
		AutoScale = 1;
		/* 将已经加亮的模型恢复原来的颜色 */
		model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			Highlight_Object(model,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);
		PM_FREE_SET(temp);
	}		
	return(0);
}

create_panel_upperpart(mainform)
{
	panel_upperpart = W_ADD_WINDOW(mainform, W_PANEL, "panel_upperpart");
	W_REALIZE_WINDOW(panel_upperpart,	W_FRAME_X, 		0,
										W_FRAME_Y, 		0,
										W_FRAME_ROWS, 	2,
										W_FRAME_COLS, 	60);
						
	Block_Name = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Block_Name");
	W_REALIZE_PANELITEM(Block_Name, W_PANEL_ROW,		0, 
									W_PANEL_COL,		0,
									W_PANEL_LABEL,		"分段名称:     ",
									W_PANEL_TIP,		"Block Name",
									W_PANEL_LENGTH,		14,
									W_PANEL_VALUE,		"*",
									W_PANEL_SENSITIVITY,0,
									W_PANEL_CALLBACK,	1);
      
	search_stru = W_ADD_PANELITEM(panel_upperpart, W_PANEL_BUTTON, "search_stru");	
	W_REALIZE_PANELITEM(search_stru,	W_PANEL_ROW,			0, 
										W_PANEL_COL,			52,
										W_PANEL_BUTTONIMAGE,	"查找",
										W_PANEL_WIDTH,			10,
										W_PANEL_BUTTONVALUE,	210,
										W_PANEL_CALLBACK,		1,
										W_PANEL_LAYOUT,			W_LAYOUT_HORIZONTAL);  
										
	Planning_Unit = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Planning_Unit");	
	W_REALIZE_PANELITEM(Planning_Unit,	W_PANEL_ROW,		0, 
										W_PANEL_COL,		26,
										W_PANEL_LABEL,		"托盘代号:     ",
										W_PANEL_LENGTH,		14,
										W_PANEL_VALUE,		"*",
										W_PANEL_CALLBACK,	3);
										
	seperate_line = W_ADD_PANELITEM(panel_upperpart, W_PANEL_MESSAGE, "seperate_line");	
	W_REALIZE_PANELITEM(seperate_line,  W_PANEL_ROW,		1,
										W_PANEL_COL,		0,
										W_PANEL_LABEL,		"<<图纸信息>>",
										W_PANEL_SEPARATOR,	1);   
     
	Pro_Number = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Pro_Number");
	W_REALIZE_PANELITEM(Pro_Number,	W_PANEL_ROW,		2, 
									W_PANEL_COL,		0,
									W_PANEL_LABEL,		"工程编号:    ",
									W_PANEL_DISPLEN,	15,
									W_PANEL_LENGTH,		100,
									W_PANEL_VALUE,		"",
									W_PANEL_CALLBACK,	3);
   
	Dra_Number = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Dra_Number");
	W_REALIZE_PANELITEM(Dra_Number,	W_PANEL_ROW,       2, 
                                    W_PANEL_COL,       25,
                                    W_PANEL_LABEL,     "图号:  ",
                                    W_PANEL_LENGTH,    27,
                                    W_PANEL_VALUE,     "*",
                                    W_PANEL_CALLBACK,  3);  
   
	Start_Page = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Start_Page");    
	W_REALIZE_PANELITEM(Start_Page,	W_PANEL_ROW,         2, 
                                    W_PANEL_COL,         59,
                                    W_PANEL_LABEL,       "起始页码:    ",
                                    W_PANEL_LENGTH,      5,
									W_PANEL_SENSITIVITY, 0,
                                    W_PANEL_CALLBACK,    4);
	W_CONFIG_NUMERIC_PANELITEM(Start_Page, W_NUMERIC_INT, 1, 1000);
	W_SET_PANELITEM_HANDLER(Start_Page, "page_number_handler");
	W_SET_NUMERIC_VALUE(Start_Page, 2);   
   
	pick_stru = W_ADD_PANELITEM(panel_upperpart, W_PANEL_BUTTON, "pick_stru");
	W_REALIZE_PANELITEM(pick_stru,	W_PANEL_ROW, 	         0, 
                                    W_PANEL_COL,            63,
                                    W_PANEL_BUTTONIMAGE,    "点选",
                                    W_PANEL_WIDTH,          10,
                                    W_PANEL_BUTTONVALUE,    210,
                                    W_PANEL_CALLBACK,       1,
                                    W_PANEL_LAYOUT,         W_LAYOUT_HORIZONTAL);
   
	element_add_flag = W_ADD_PANELITEM(panel_upperpart, W_PANEL_CHOICE, "element_add_flag");
	W_REALIZE_PANELITEM(element_add_flag,	W_PANEL_ROW,            3, 
											W_PANEL_COL,            0,
											W_PANEL_LABEL,          "模型信息列表模式:      ",
											W_PANEL_CHOICESTRING,   "追加  ",
											W_PANEL_CHOICESTRING,   "替换  ",
											W_PANEL_ORDINALVALUE,   0,
											W_PANEL_CHOICESTYLE,	   W_STYLE_PUSHBUTTONS,
											W_PANEL_SENSITIVITY,	0,
											W_PANEL_CALLBACK,       1);
   
	Options = W_ADD_PANELITEM(panel_upperpart, W_PANEL_TOGGLE, "options");
	W_REALIZE_PANELITEM(Options,	W_PANEL_ROW,            3, 
									W_PANEL_COL,            50,
									W_PANEL_LABEL,          "",
									W_PANEL_CHOICESTRING,   "自动加亮    ",
									W_PANEL_CHOICESTRING,   "自动缩放    ",
									W_PANEL_VALUE,          "11",
									W_PANEL_CHOICESTYLE,	W_STYLE_PUSHBUTTONS,
									W_PANEL_CALLBACK,       1);

	CheckIn = W_ADD_PANELITEM(panel_upperpart, W_PANEL_BUTTON, "CheckIn");
	W_REALIZE_PANELITEM(CheckIn,	W_PANEL_ROW, 	         4, 
                                    W_PANEL_COL,            52,
                                    W_PANEL_BUTTONIMAGE,    "CheckIn",
                                    W_PANEL_WIDTH,          10,
                                    W_PANEL_BUTTONVALUE,    210,
                                    W_PANEL_CALLBACK,       1,
                                    W_PANEL_LAYOUT,         W_LAYOUT_HORIZONTAL);

	CheckOut = W_ADD_PANELITEM(panel_upperpart, W_PANEL_BUTTON, "CheckOut");
	W_REALIZE_PANELITEM(CheckOut,	W_PANEL_ROW, 	         4, 
                                    W_PANEL_COL,            63,
                                    W_PANEL_BUTTONIMAGE,    "CheckOut",
                                    W_PANEL_WIDTH,          10,
                                    W_PANEL_BUTTONVALUE,    210,
                                    W_PANEL_CALLBACK,       1,
                                    W_PANEL_LAYOUT,         W_LAYOUT_HORIZONTAL);
                                    
	W_SET_PANELITEM_HANDLER(search_stru, "search_objects");
	W_SET_PANELITEM_HANDLER(pick_stru, "pick_objects");
	W_SET_PANELITEM_HANDLER(element_add_flag, "model_list_mode");
	W_SET_PANELITEM_HANDLER(Options, "options_selected");
    W_SET_PANELITEM_HANDLER(CheckIn, "checkin_model_handler");
    W_SET_PANELITEM_HANDLER(CheckOut, "checkout_model_handler");
	
	return(panel_upperpart);
}

checkout_model_handler(item, event_type, button_value)
{
	/* check if select model groups in grid */
	models_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);	
	if (models_number <= 0){
		model_h = Pick_Structural_Group("请选择要Checkout的复板");
        if(!ISINT(model_h)){
            res = CheckOut_Group_With_Members(model_h);
            if(res>0){
                reset_access_status(model_h,"CheckOut");
            }
        }
	}
    else{
        for(i=0;i<models_number;i=i+1;){	   
            model_h = PM_GET_MEMBER_IN_SET(Selected_Objects, i);	
            res = CheckOut_Group_With_Members(model_h);
            reset_access_status(model_h,"CheckOut");            
        } 
    }        
}

checkin_model_handler(item, event_type, button_value)
{
	/* check if select model groups in grid */
	models_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
	
	if (models_number <= 0){
		model_h = Pick_Structural_Group("请选择要Checkin的复板");
        if(!ISINT(model_h)){
            res = CheckIn_Group_With_Members(model_h);
            if(res>0){
                reset_access_status(model_h,"CheckIn");
            }
        }
	}
    else{
        for(i=0;i<models_number;i=i+1;){	   
            model_h = PM_GET_MEMBER_IN_SET(Selected_Objects, i);	
            res = CheckIn_Group_With_Members(model_h); 
            reset_access_status(model_h,"CheckIn");
        }     
    }  
}

reset_access_status(model_h,flag)
{
    id = find_model_grid_id(model_h);
    if(id != -1){
        W_SET_WINDOW_ARGS(DisplayGrid,W_LISTW_FINDID,id);
        row = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ROW);
		/*set access status flag of group*/
		if(flag == "CheckIn"){
		   icon = Icon_Local_Server;
		}
		else if(flag == "CheckOut"){
		   icon = Icon_My_Check_Out;
		}
		else{
		   icon = Icon_Error;
		} 
        W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, row, W_LISTW_COLUMN, 0, W_LISTW_ICON, icon );                 
    }
    return(0);
}

create_command(mainform)
{	
	command = W_ADD_WINDOW(mainform, W_PANEL, "command");
	W_REALIZE_WINDOW(command,	W_FRAME_X, 		0,
								W_FRAME_Y, 		625,
								W_FRAME_WIDTH,	300,
								W_FRAME_HEIGHT, 1);	
							         
	Drawing_Form = W_ADD_PANELITEM(command, W_PANEL_FILL, "Drawing_Form");
      
	W_REALIZE_PANELITEM(Drawing_Form,	W_PANEL_ROW, 		0, 
										W_PANEL_COL, 		0,
										W_PANEL_LABEL, 		"图框名称:     ",
										W_PANEL_TIP,		"ICGD Name",
										W_PANEL_LENGTH, 	50,
										W_PANEL_VALUE, 		"",
										W_PANEL_CALLBACK, 	0);
     				                        
	Select_Form = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Select_Form");
	
	W_REALIZE_PANELITEM(Select_Form,    W_PANEL_ROW,         	0, 
										W_PANEL_COL,         	63,
										W_PANEL_BUTTONIMAGE, 	"选择图框", 
										W_PANEL_TIP,			"Select ICGD",
										W_PANEL_WIDTH,       	10,
										W_PANEL_BUTTONVALUE, 	209,
										W_PANEL_CALLBACK,    	1,
										W_PANEL_LAYOUT,      	W_LAYOUT_HORIZONTAL);     				                        
     				                        
							         						
	Create_Drawing = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Create_Drawing");
		
	W_REALIZE_PANELITEM(Create_Drawing, W_PANEL_ROW,         	1, 
										W_PANEL_COL,         	0,
										W_PANEL_BUTTONIMAGE, 	"生成图形", 
										W_PANEL_TIP,			"Create Pipe Drawing",
										W_PANEL_WIDTH,       	10,
										W_PANEL_BUTTONVALUE, 	200,
										W_PANEL_CALLBACK,    	1,
										W_PANEL_LAYOUT,      	W_LAYOUT_HORIZONTAL);
							                  
	Cur_Drawing = W_ADD_PANELITEM(command, W_PANEL_FILL, "Cur_Drawing");
      
	W_REALIZE_PANELITEM(Cur_Drawing, 	W_PANEL_ROW,         1, 
										W_PANEL_COL,         12,
										W_PANEL_LABEL,       "",
										W_PANEL_LENGTH,      47,
										W_PANEL_VALUE,       "正在处理复板:   ",
										W_PANEL_SENSITIVITY, 0,
										W_PANEL_CALLBACK,    0); 
     				                        
	Pro_label = W_ADD_PANELITEM(command, W_PANEL_FILL, "Pro_label");
      
	W_REALIZE_PANELITEM(Pro_label,  W_PANEL_ROW,      1, 
									W_PANEL_COL,      61,
									W_PANEL_LABEL,    "进度:",
									W_PANEL_LENGTH,   0,
									W_PANEL_VALUE,    "",
									W_PANEL_CALLBACK, 0);     				                        
     				                        
	Process = W_ADD_PANELITEM(command, W_PANEL_FILL, "Process");
      
	W_REALIZE_PANELITEM(Process,	W_PANEL_ROW,         1, 
									W_PANEL_COL,         66,
									W_PANEL_LABEL,       "",
									W_PANEL_LENGTH,      7,
									W_PANEL_VALUE,       "0/0",
									W_PANEL_SENSITIVITY, 0,
									W_PANEL_CALLBACK,    0); 
     				                        
	Open_Drawing = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Open_Drawing");
	
	W_REALIZE_PANELITEM(Open_Drawing,  	W_PANEL_ROW,         2, 
										W_PANEL_COL,         0,
										W_PANEL_BUTTONIMAGE, "打开图形", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 201,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);     	
							                
	Open_Previous = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Open_Previous");
	
	W_REALIZE_PANELITEM(Open_Previous,  W_PANEL_ROW,         	2, 
	                                    W_PANEL_COL,         	12,
										W_PANEL_BUTTONIMAGE, 	"打开前一个", 
										W_PANEL_WIDTH,       	10,
										W_PANEL_BUTTONVALUE, 	202,
										W_PANEL_CALLBACK,    	1,
										W_PANEL_TIP, 			"Open Previous Pipe Drawing",
										W_PANEL_LAYOUT,      	W_LAYOUT_HORIZONTAL); 	
							                  
	Open_Next = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Open_Next");
	
	W_REALIZE_PANELITEM(Open_Next,  W_PANEL_ROW,         	2, 
									W_PANEL_COL,         	24,
									W_PANEL_BUTTONIMAGE, 	"打开下一个", 
									W_PANEL_WIDTH,       	10,
									W_PANEL_BUTTONVALUE, 	203,
									W_PANEL_CALLBACK,    	1,
									W_PANEL_TIP, 			"Open Next Pipe Drawing",
									W_PANEL_LAYOUT,      	W_LAYOUT_HORIZONTAL); 	
							              
	Browse_Model = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Browse_Model");
	
	W_REALIZE_PANELITEM(Browse_Model,  	W_PANEL_ROW,         2, 
										W_PANEL_COL,         36,
										W_PANEL_BUTTONIMAGE, "浏览模型", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 204,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);							              
							              						                  							                  						                							                			                            				                      
	Delete_Drawing = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Delete_Drawing");
	
	W_REALIZE_PANELITEM(Delete_Drawing,  	W_PANEL_ROW,         3, 
											W_PANEL_COL,         0,
											W_PANEL_BUTTONIMAGE, "删除图形", 
											W_PANEL_WIDTH,       10,
											W_PANEL_BUTTONVALUE, 301,
											W_PANEL_CALLBACK,    1,
											W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);
   							               
	Print_Drawing = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Print_Drawing");
	
	W_REALIZE_PANELITEM(Print_Drawing,  W_PANEL_ROW,         3, 
										W_PANEL_COL,         12,
										W_PANEL_BUTTONIMAGE, "打印图形", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 302,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);   
   							               
	Export_Dxf = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Export_Dxf");
	
	W_REALIZE_PANELITEM(Export_Dxf,		W_PANEL_ROW,         2, 
										W_PANEL_COL,         48,
										W_PANEL_BUTTONIMAGE, "导出DXF", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 303,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);  
   							             
	Export_Pdf = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "Export_Pdf");
	
	W_REALIZE_PANELITEM(Export_Pdf,   	W_PANEL_ROW,         2, 
										W_PANEL_COL,         60,
										W_PANEL_BUTTONIMAGE, "导出PDF", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 304,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);   							              							               							       
							   
	quit = W_ADD_PANELITEM(command, W_PANEL_BUTTON, "quit");
	
	W_REALIZE_PANELITEM(quit,	W_PANEL_ROW, 	      3, 
								W_PANEL_COL,         60,
							    W_PANEL_BUTTONIMAGE, "退出", 
							    W_PANEL_WIDTH,       10,
							    W_PANEL_BUTTONVALUE, 305,
							    W_PANEL_CALLBACK,    1,
								W_PANEL_CLOSEBUTTON, 1,
							    W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);	
							         
	W_SET_PANELITEM_HANDLER(Select_Form, "select_drawing_form_handler");						         						 
	W_SET_PANELITEM_HANDLER(quit, "quit_handler");
	W_SET_PANELITEM_HANDLER(Create_Drawing, "create_drawing_handler");
	W_SET_PANELITEM_HANDLER(Export_Pdf, "export_pdf_handler");
	W_SET_PANELITEM_HANDLER(Export_Dxf, "export_dxf_handler");
	W_SET_PANELITEM_HANDLER(Print_Drawing, "print_drawing_handler");
	W_SET_PANELITEM_HANDLER(Delete_Drawing, "delete_drawing_handler");
	W_SET_PANELITEM_HANDLER(Open_Drawing, "open_drawing_handler");  
	W_SET_PANELITEM_HANDLER(Open_Next, "open_drawing_handler"); 
	W_SET_PANELITEM_HANDLER(Open_Previous, "open_drawing_handler"); 
	W_SET_PANELITEM_HANDLER(Browse_Model, "model_browsing_handler");
	
	return(command);
}

delete_drawing_handler(item, event_type, button_value)
{
    units_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);	
    if (units_number <= 0){
        U_CONFIRM("请先选择复板");
        return(0);
    }  

    sel = A_ALLOC(2);
    A_PUT(sel,0,"保留最新版本");
    A_PUT(sel,1,"删除所有版本");
    si = 1;
    res = DM_CALL_SCRIPT("macro/Select.mac","U_Select",
    "请选择删除模式",2,sel,si);
    A_FREE(sel);

    if(res == -1){
        return(0);      
    }
    else if(res == 0){
        for(i=0;i<units_number;i=i+1;){   	   
            unit_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
            drawing_name = Get_Attribute_Value(unit_handle,Tag_DrawingName);
            if(ISSTRING(drawing_name) & drawing_name != "Unset"){          
                current_version = String_To_Int(SUBSTRING(SEARCH(drawing_name,"-V"),2));      	
                for(k=0;k<current_version;k=k+1;){
                    drawing_name = STRINGTERM(drawing_name,"-V") + "-V" + ITOASCII(k);
                    doc_guid = "";
                    res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);
                    if(doc_guid != ""){
                        res = PM_DELETE_DRAWING(drawing_name);
                        if(res == 0){
                            mess = "图形<" + drawing_name + ">已经被删除";
                            U_MESSAGE(mess);
                        }
                        else{
                            prompt_error(drawing_name,res);
                        }      	      
                    }
                } 
            }  	
        }      
    }
    else if(res == 1){  	   
        for(i=0;i<units_number;i=i+1;){   	   
            unit_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
            drawing_name = Get_Attribute_Value(unit_handle,Tag_DrawingName);
            if(ISSTRING(drawing_name) & drawing_name != "Unset"){
                current_version = String_To_Int(SUBSTRING(SEARCH(drawing_name,"-V"),2));   	
                for(k=0;k<=current_version;k=k+1;){
                    drawing_name = STRINGTERM(drawing_name,"-V") + "-V" + ITOASCII(k);
                    doc_guid = "";
                    res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);
                    if(doc_guid != ""){
                        res = PM_DELETE_DRAWING(drawing_name);
                        if(res == 0){
                            mess = "图形<" + drawing_name + ">已经被删除";
                            U_MESSAGE(mess);
                        }
                        else{
                            prompt_error(drawing_name,res);
                        }      	      
                    }
                } 
            } 
            res = Set_Attribute_Value(unit_handle,Tag_DrawingName,"Unset");         
            /* display drawing name in grid if it is existed*/
            id = find_model_grid_id(unit_handle);
            if(id != -1){
                W_SET_WINDOW_ARGS(DisplayGrid,W_LISTW_FINDID,id);
                row = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ROW);
                W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, row, W_LISTW_COLUMN, 4, W_LISTW_STRING, "Unset");
            }   
            
        }                
    }
    PM_SAVE(0,1,1);   
    return(0);
}

prompt_error(drawing_name,res)
{
   if(res == -1){
      mess = "图形<" + drawing_name + ">无法删除";
      U_MESSAGE(mess);      
   }
   else if(res == MMT_E_DRW_NOTFOUND){
      mess = "图形<" + drawing_name + ">不存在";
      U_MESSAGE(mess);
   }
   else if(res == DM_E_DOC_NOT_OWNER){
      mess = "你没有删除图形<" + drawing_name + ">的权限";
      U_MESSAGE(mess);
   }
   else{
      mess = "图形<" + drawing_name + ">无法删除";
      U_MESSAGE(mess);      
   }
   return(0);   
         
}

page_number_handler(item, event_type, dummy)
{
   set_page_number();
   return(0);
}

set_page_number()
{
   st = 0;
   start_page = W_GET_NUMERIC_VALUE(Start_Page, st);
   if (st != 0){
      W_SET_NUMERIC_VALUE(Start_Page, 2);
      start_page = 2;
   }
   model_number = PM_NR_MEMBERS_IN_SET(Object_List);
   total_number = start_page + model_number - 1;
   for(i=0;i<Object_Number;i=i+1){
      W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, i, W_LISTW_COLUMN, 4, W_LISTW_STRING, ITOASCII(total_number));
      W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, i, W_LISTW_COLUMN, 3, W_LISTW_STRING, ITOASCII(start_page + i));
   }
   return(0);
}

open_drawing_handler(item, event_type, button_value)
{  
	models_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);	
	if (models_number <= 0){
		U_CONFIRM("请先选择复板");
		return(0);
	}   
	else if(models_number > 1){
		U_CONFIRM("一次只能打开一个图形");
		return(0);	   
	}
	
	if(item == Open_Next){
	   row_number = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_NUMOFCHOICES); 
	   current_row = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_ROW); 
	   new_row = current_row + 1;
	   if(new_row >= row_number){
	      U_CONFIRM("当前复板已经是最后一个复板");
	      return(0);
	   }
	   ms_value = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_MSVALUE);
	   ms_value = "0" + HEAD(ms_value,STRLEN(ms_value)-1);
	   res = W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_MSVALUE, ms_value); 
	   item_id = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ITEMID);	   
	   grid_handler(DisplayGrid, W_EVENT_ITEM_SELECTED, new_row, 0, item_id); 
	}
	else if(item == Open_Previous){
	   row_number = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_NUMOFCHOICES); 
	   current_row = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_ROW); 
	   new_row = current_row - 1;
	   if(new_row < 0){
	      U_CONFIRM("当前复板已经是第一个复板");
	      return(0);
	   }
	   ms_value = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_MSVALUE);
	   ms_value =  TAIL(ms_value,STRLEN(ms_value)-1) + "0";	  
	   res = W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_MSVALUE, ms_value);
	   item_id = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ITEMID);
	   grid_handler(DisplayGrid, W_EVENT_ITEM_SELECTED, new_row, 0, item_id); 
	}
	
	model_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,0);
	drawing_name = Get_Attribute_Value(model_handle,Tag_DrawingName);
	if(ISINT(drawing_name)){
	   U_CONFIRM("尚未生成图形");
	   return(0);
	}
	
	doc_guid = "";
	res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);	
	if(doc_guid == ""){
	   U_CONFIRM("图形图形不存在");	   
	   return(0);
	}
	
	current_drawing = PM_GET_ACTIVE_DRW_NAME();
	if(current_drawing != ""){
	   PM_SAVE_ACTIVE_DRW();
	   PM_CHECK_IN_ACTIVE_DRW();
	   PM_CLOSE_ACTIVE_DRW();	   
	}
	
	PM_OPEN_DRAWING(drawing_name,PM_DRW_OFLG_EDIT,"","");
   
	W_UNMAP_FRAME(MainWindow);
	st = PM_EDIT_ACTIVE_DRW(0);
	W_MAP_FRAME(MainWindow);
	
	dwg_name = PM_GET_ACTIVE_DRW_NAME();
	if(dwg_name != ""){
		st = PM_SAVE_ACTIVE_DRW();
		if(st){
			U_CONFIRM("无法保存当前图形 <" + dwg_name + ">!");
		}
		else {
			st = PM_CHECK_IN_ACTIVE_DRW();
			if(st){
				U_CONFIRM("无法Check In当前图形 <" + dwg_name + ">!");
			}
		}
		PM_CLOSE_ACTIVE_DRW();
	}
	return(0);   
}

print_drawing_handler(item, event_type, button_value)
{  
	models_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);	
	if (models_number <= 0){
		U_CONFIRM("请先选择复板");
		return(0);
	}  
		
	for(i=0;i<models_number;i=i+1;){
		model_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
		model_name = PM_GET_OBJDATA(model_handle,0,Tag_Penetration_FabDn);
		drawing_name = Get_Attribute_Value(model_handle,Tag_DrawingName);
		if(ISINT(drawing_name)){
			mess = "基座<" + model_name + ">尚未生成图形";
			U_MESSAGE(mess);
		}

		doc_guid = "";
		res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);	
		if(doc_guid == ""){
			mess = "图形<"+drawing_name+">不存在";
			U_MESSAGE(mess);	   
			return(0);
		}   	
	}

	for(i=0;i<models_number;i=i+1;){

		model_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
		model_name = PM_GET_OBJDATA(model_handle,0,Tag_Penetration_FabDn);
		drawing_name = Get_Attribute_Value(model_handle,Tag_DrawingName);

		current_drawing = PM_GET_ACTIVE_DRW_NAME();
		if(current_drawing != ""){
			PM_SAVE_ACTIVE_DRW();
			PM_CHECK_IN_ACTIVE_DRW();
			PM_CLOSE_ACTIVE_DRW();	   
		}   

		PM_OPEN_DRAWING(drawing_name,PM_DRW_OFLG_EDIT,"","");
		mess = "开始打印图形<" + drawing_name + ">";
		U_MESSAGE(mess);
		res = PM_PLOT_ACTIVE_DRW(0);
		if(res == -1){
			DM_EDIT_SHEET_PLOT_SETTINGS();
			res = PM_PLOT_ACTIVE_DRW(0);
			if(res == -1){
				mess = "图形<" + drawing_name + ">打印失败";
				U_MESSAGE(mess);
			}
		} 
		else if(res == MMT_E_DRW_NOTACTIVE){
			mess = "图形<" + drawing_name + ">无法激活，打印失败";
			U_MESSAGE(mess);	      
		}
		else{
			mess = "图形<" + drawing_name + ">打印结束";
			U_MESSAGE(mess);	      
		}
	}
   return(0);
}

export_pdf_handler(item, event_type, button_value)
{
	/* check if select model groups in grid */
	models_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);	
	if (models_number <= 0){
		U_CONFIRM("请先选择复板");
		return(0);
	} 
	
	path = U_GET_DIRECTORY("选择输PDF文件出路径", "c:\\", "", 0); 
	if(ISINT(path)){
	   return(0);
	} 
	
	for(i=0;i<models_number;i=i+1;){
		model_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
		model_name = PM_GET_OBJDATA(model_handle,0,Tag_Penetration_FabDn);
		drawing_name = Get_Attribute_Value(model_handle,Tag_DrawingName);
		if(ISINT(drawing_name)){
		   mess = " 复板<" + model_name + ">尚未生成图形";
		   U_MESSAGE(mess);
		}
		else{   	
			doc_guid = "";
			res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);	
			if(doc_guid == ""){
				mess = "图形<"+drawing_name+">不存在";
				U_MESSAGE(mess);	   
			}	
			else{      	
				current_drawing = PM_GET_ACTIVE_DRW_NAME();
				if(current_drawing != ""){
					PM_SAVE_ACTIVE_DRW();
					PM_CHECK_IN_ACTIVE_DRW();
					PM_CLOSE_ACTIVE_DRW();	   
				}   

				res = PM_OPEN_DRAWING(drawing_name,PM_DRW_OFLG_EDIT,"","");
				if(res == -1){
					mess = "无法打开图形<" + drawing_name + ">，输出失败";
					U_MESSAGE(mess);	     
				}
				else{
					mess = "开始输出图形<" + drawing_name + ">的PDF文件";
					U_MESSAGE(mess);
					format = G2D_EXT_FRM_PDF;
					output_dir = path;
					template_dwr = "";
					res = export_active_drw(format, template_dwr, output_dir);	
					if(res == -1){
						mess = "图形<" + drawing_name + ">输出失败";
						U_MESSAGE(mess);
					} 
					else if(res == MMT_E_DRW_NOTACTIVE){
						mess = "图形<" + drawing_name + ">无法激活，输出失败";
						U_MESSAGE(mess);	      
					}
					else{
						mess = "图形<" + drawing_name + ">输出结束";
						U_MESSAGE(mess);	      
					}
				}
			}
		}
	}
	return(0);
}

export_dxf_handler(item, event_type, button_value)
{
	/* check if select model groups in grid */
	models_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);	
	if (models_number <= 0){
		U_CONFIRM("请先选择复板");
		return(0);
	} 
	
	path = U_GET_DIRECTORY("选择输DXF文件出路径", "c:\\", "", 0); 
	if(ISINT(path)){
	   return(0);
	} 
	
	/*export drawings*/
	for(i=0;i<models_number;i=i+1;){
		model_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
		model_name = PM_GET_OBJDATA(model_handle,0,Tag_Penetration_FabDn);
		drawing_name = Get_Attribute_Value(model_handle,Tag_DrawingName);
		if(ISINT(drawing_name)){
			mess = "复板<" + model_name + ">尚未生成图形";
			U_MESSAGE(mess);
		}
		else{   	
			/* check if the drawing exist*/
			doc_guid = "";
			res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);	
			if(doc_guid == ""){
				mess = "图形<"+drawing_name+">不存在";
				U_MESSAGE(mess);	   
			}	
			else{      	
				/*check if exist opened drawing*/
				current_drawing = PM_GET_ACTIVE_DRW_NAME();
				if(current_drawing != ""){
					PM_SAVE_ACTIVE_DRW();
					PM_CHECK_IN_ACTIVE_DRW();
					PM_CLOSE_ACTIVE_DRW();	   
				}   

				res = PM_OPEN_DRAWING(drawing_name,PM_DRW_OFLG_EDIT,"","");
				if(res == -1){
					mess = "无法打开图形<" + drawing_name + ">，输出失败";
					U_MESSAGE(mess);	     
				}
				else{
					mess = "开始输出图形<" + drawing_name + ">的DXF文件";
					U_MESSAGE(mess);
					format = G2D_EXT_FRM_DXF_2000;
					output_dir = path;
					template_dwr = "";
					res = export_active_drw(format, template_dwr, output_dir);	
					if(res == -1){
						mess = "图形<" + drawing_name + ">输出失败";
						U_MESSAGE(mess);
					} 
					else if(res == MMT_E_DRW_NOTACTIVE){
						mess = "图形<" + drawing_name + ">无法激活，输出失败";
						U_MESSAGE(mess);	      
					}
					else{
						mess = "图形<" + drawing_name + ">输出结束";
						U_MESSAGE(mess);	      
					}
				}
			}
		}
	}
   return(0);
}

select_drawing_form_handler(item, event_type, button_value)
{
	drawing_form = DM_SELECT_ICGD("",2);
	if(ISSTRING(drawing_form) & drawing_form != ""){
		W_SET_PANELITEM_ARGS(Drawing_Form, W_PANEL_VALUE, drawing_form);
		SET_STRING_DEFAULT("PenetrationFabricationDrawing", "Drawing_Form", drawing_form);
		Drawing_Form_Name = drawing_form;
	} 
	return(0);
}

create_drawing_handler(item, event_type, button_value)
{
	drawing_name = W_GET_PANELITEM_ARG(Dra_Number,W_PANEL_VALUE);
	if(drawing_name == "*"){
		U_CONFIRM("请先输入图号");
		W_SET_PANELITEM_ARGS(Dra_Number,W_PANEL_KBDFOCUS,0);
		return(0);		
	}
	/* check if selected model in grid */
	models_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
	/*if selected any model, then only recreate drawings of selected model*/
	if (models_number > 0){
		create_drawings(Selected_Objects);
	}
	/*if selected nothing, then create drawings for all model*/
	else{
		create_drawings(Object_List);
	}
    return(0);	
}

/*create drawing*/
create_drawings(obj_list)
{
	penetration_number = PM_NR_MEMBERS_IN_SET(obj_list);
	x0 = 0;y0 = 0;z0 = 0;
	PM_GET_CURRENT_LOC(x0,y0,z0);
	start_time = GET_TIME(); 	
	for(i = 0;i<penetration_number;i=i+1;){
		penetration = PM_GET_MEMBER_IN_SET(obj_list,i);
		Model_Handle = penetration;
        process_info = ITOASCII(i+1) + "/" + ITOASCII(penetration_number);
        W_SET_PANELITEM_ARGS(Process, W_PANEL_VALUE, process_info);
		nth = 0;
        penetration_name = PM_GET_OBJDATA(penetration,nth,Tag_Penetration_FabDn);
		if(!ISINT(penetration_name)){
			Penetration_Name = penetration_name;
			drawing_info = "正在处理复板：" + penetration_name;
			W_SET_PANELITEM_ARGS(Cur_Drawing, W_PANEL_VALUE, drawing_info);		
			res = create_drawing(penetration);
			if(res == -1){
				mess = "无法生成复板<" + penetration_name + ">的制作图";
				U_MESSAGE(mess);
			}					
		}
		else{
			mess = "第<" + ITOASCII(i+1) + ">个复板未添加生产信息";
			U_MESSAGE(mess);		
		}	
	}
	end_time = GET_TIME();
	consumption = end_time - start_time;
	drawing_info = "处理完毕，共耗时" + ITOASCII(consumption) + "秒";
	W_SET_PANELITEM_ARGS(Cur_Drawing, W_PANEL_VALUE, drawing_info);
	PM_SET_CURRENT_LOC(x0,y0,z0);	
}

create_drawing(penetration)
{
	drawing_name = get_drawing_name();
	if(ISINT(drawing_name)){
		return(-1);   
	}
	
	Cur_Drawing_Name = drawing_name;
	
	bom_set = PM_INIT_SET();
	header_tag_rec = DM_INIT_TAGREC();
	dname = "";
	icgd_name = Drawing_Form_Name;
	res = PM_CREATE_DRAWING(Cur_Drawing_Name, "复板制造图", PM_DRW_CFLG_GLOBAL, bom_set, icgd_name, header_tag_rec, dname);
	DM_FREE_TAGREC(header_tag_rec);
	PM_FREE_SET(bom_set);
	if(res != 0){
		mess = "无法创建图形<" + Cur_Drawing_Name + ">";
		U_MESSAGE(mess);	
		return(-1);
	}

	Set_Attribute_Value(penetration,Tag_DrawingName,Cur_Drawing_Name);
	/*PM_SAVE(0,1,1);*/
	
	res = PM_OPEN_DRAWING(Cur_Drawing_Name,PM_DRW_OFLG_EDIT,"","");
	if(res != 0){
		mess = "无法打开图形:" + Cur_Drawing_Name + ">";
		U_MESSAGE(mess);
		return(-1);
	} 
 	
	res = create_view(); 
	
	get_dimension_tables();
	
	draw_dimensions();
	
	set_header_field();
	
	/*save drawing*/ 
	res = PM_SAVE_ACTIVE_DRW();
	if(res != 0){
		mess = "无法保存图形:" + Cur_Drawing_Name + ">";
		U_MESSAGE(mess);
		return(-1);
	}

	/*Check In drawing*/
	res = PM_CHECK_IN_ACTIVE_DRW();
	if(res != 0){
		mess = "无法CheckIn图形:" + Cur_Drawing_Name + ">";
		U_MESSAGE(mess);
	return(-1);
	}

	/*close drawing*/
	res = PM_CLOSE_ACTIVE_DRW();
	if(res != 0){
		mess = "无法关闭图形:" + Cur_Drawing_Name + ">";
		U_MESSAGE(mess);
		return(-1);
	}		
	return(0); 
}

get_dimension_tables()
{
	/*	dim_table
		0, type of dimension
		1, X coordinate of point 1
		2, Y coordinate of point 1
		3, Z coordinate of point 1
		4, X coordinate of point 2
		5, Y coordinate of point 2
		6, Z coordinate of point 2	
		7, dimension text
	*/
	dim_table = DM_2D_ARRAY_CREATE(1,8);
	Get_Dimension_List(Model_Handle,dim_table);
	Dim_Table = dim_table;
	return(0);
}

draw_dimensions()
{
	dim_number = DM_2D_ARRAY_SIZE_ROWS(Dim_Table);
	if(dim_number <= 0){
	  return(0);
	}
	if(Debug){
	  U_MESSAGE("**************开始标注复板尺寸***************");
	}
	/*开始标注*/
	style_name = "";
	drafting_style = GetFirstPmDraftingStyle(style_name); 
	dw = PM_START_PAGE_ANNOTATION(style_name);
	DW_ACTIVATEVIEW(dw);      
	InitDrawingSettings();
	if(ActivateDeActivate2D(View_Handle,1) < 0){
		msg = "无法启动尺寸标注";
		U_MESSAGEBOX(msg, U_MB_ERROR, U_MB_OK, U_OK);
		return(-1);
	}	
	
	for(i=1;i<dim_number;i=i+1;){		
		type = DM_2D_ARRAY_GET(Dim_Table,i,0);		
		if(type == "Diameter"){	
			x1 = DM_2D_ARRAY_GET(Dim_Table,i,1);
			y1 = DM_2D_ARRAY_GET(Dim_Table,i,2);
			z1 = DM_2D_ARRAY_GET(Dim_Table,i,3);	
			x2 = DM_2D_ARRAY_GET(Dim_Table,i,4);
			y2 = DM_2D_ARRAY_GET(Dim_Table,i,5);
			z2 = DM_2D_ARRAY_GET(Dim_Table,i,6);		
			dim_text  = DM_2D_ARRAY_GET(Dim_Table,i,7);
			add_diameter_dimension(View_Handle,x1, y1, z1, x2, y2, z2,0,3,2.4,0.6,3,dim_text); 			
		}
		else if(type == "Radius"){
			x1 = DM_2D_ARRAY_GET(Dim_Table,i,1);
			y1 = DM_2D_ARRAY_GET(Dim_Table,i,2);
			z1 = DM_2D_ARRAY_GET(Dim_Table,i,3);	
			x2 = DM_2D_ARRAY_GET(Dim_Table,i,4);
			y2 = DM_2D_ARRAY_GET(Dim_Table,i,5);
			z2 = DM_2D_ARRAY_GET(Dim_Table,i,6);		
			dim_text  = DM_2D_ARRAY_GET(Dim_Table,i,7);
			add_radius_dimension(View_Handle,x1, y1, z1, x2, y2, z2,0,3,2.4,0.6,3,dim_text); 				
		}
		else if(type == "Line"){
			x1 = DM_2D_ARRAY_GET(Dim_Table,i,1);
			y1 = DM_2D_ARRAY_GET(Dim_Table,i,2);
			z1 = DM_2D_ARRAY_GET(Dim_Table,i,3);	
			x2 = DM_2D_ARRAY_GET(Dim_Table,i,4);
			y2 = DM_2D_ARRAY_GET(Dim_Table,i,5);
			z2 = DM_2D_ARRAY_GET(Dim_Table,i,6);		
			dim_text  = DM_2D_ARRAY_GET(Dim_Table,i,7);		
			add_line_dimension(View_Handle,x1, y1, z1, x2, y2, z2,0,3,2.4,0.6,3,dim_text); 			
		}
	}
   
	/*结束标注*/ 
	PM_TERMINATE_PAGE_ANNOTATION(1);
	return(0); 

}
	
/*创建复板视图*/
create_view()
{
	view_name = "TOP";
	screen = "";
	display = "";
	in_drawing = 1;
	view_handle = PM_CREATE_VIEW(view_name,in_drawing, screen, display);
	View_Handle = view_handle;
	if(ISINT(view_handle)){
		mess = "无法在图形<" + Cur_Drawing_Name + ">中创建视图";
		U_MESSAGE(mess);
		return(-1);		
	}
	res = set_view_parameter(view_handle);
	if(res < 0){
		mess = "无法设置图形<" + Cur_Drawing_Name + ">中的视图参数";
		U_MESSAGE(mess);
		return(-1);
	}
	models = PM_INIT_SET();
	PM_ADD_OBJECT_TO_SET(Model_Handle,models);
	PM_VISUALIZE_SET_TO_VIEW(models,view_handle);
	res = PM_ASSIGN_VIEW_TO_PAGE(view_name, View_Position_X, View_Position_Y, View_Scale);
	if(res <= 0){
		mess = "无法将视图分配给图形<" + Cur_Drawing_Name + ">";
		U_MESSAGE(mess);
		return(-1);
	}
	return(0);
}

/*set model view parameters*/
set_view_parameter(handle view_handle)
{
	/* get model group limits */
	xmin = 0; ymin = 0; zmin = 0;xmax = 0;ymax = 0;zmax = 0;
	res = PM_GET_BBOX_OF_OBJECT(Model_Handle,xmin,xmax, ymin,ymax, zmin,zmax);
	if(res == -1){
		message = "无法计算复板:" + Penetration_Name + "所占的三维空间范围,无法生成复板制作图";
		U_MESSAGE(message);
	return(-1);
	}
	nth = 0;
	
	xlen = xmax - xmin + 100;
	ylen = ymax - ymin + 100;
	zlen = zmax - zmin + 100;
	min = xlen;
	max = xlen;
	if (ylen > max){
		max = ylen;	
	}
	if(ylen < min){
		min = ylen;
	}
	if(zlen > max){
		max = zlen;	
	}
	if(zlen < min){
		min = zlen;	
	}
	
	/* set view direction */
	axr = 1.0 * PM_GET_OBJDATA(Model_Handle,nth,MMT_TAG_AXIS_ROT_ANGLE);
	axs = 1.0 * PM_GET_OBJDATA(Model_Handle,nth,MMT_TAG_AXIS_SLP_ANGLE);
	xdx = COS(axs) * COS(axr);
	xdy = COS(axs) * SIN(axr);
	xdz = SIN(axs);	
	sxr = 1.0 * PM_GET_OBJDATA(Model_Handle,nth,MMT_TAG_SAXIS_ROT_ANGLE);
	sxs = 1.0 * PM_GET_OBJDATA(Model_Handle,nth,MMT_TAG_SAXIS_SLP_ANGLE);
	ydx = COS(sxs) * COS(sxr);
	ydy = COS(sxs) * SIN(sxr);
	ydz = SIN(sxs);		
	zdx = 0; zdy = 0; zdz = 0;
	VEC_CROSS_PRODUCT(xdx,xdy,xdz,ydx,ydy,ydz,zdx,zdy,zdz);
	VEC_UNITV(zdx,zdy,zdz);
	zdx = - zdx;
	zdy = - zdy;
	zdz = - zdz;
	PM_SET_VIEW_PARAMETERS(view_handle, "VDIR", zdx,zdy,zdz);
		
	/* set view point */
	x0 = 1.0 * PM_GET_OBJDATA(Model_Handle,nth,MMT_TAG_ORIG_X);
	y0 = 1.0 * PM_GET_OBJDATA(Model_Handle,nth,MMT_TAG_ORIG_Y);
	z0 = 1.0 * PM_GET_OBJDATA(Model_Handle,nth,MMT_TAG_ORIG_Z);
	PM_SET_VIEW_PARAMETERS(view_handle, "POINT", x0,y0,z0);  
	   
	/* set view up direction */
	PM_SET_VIEW_PARAMETERS(view_handle, "VUP", ydx,ydy,ydz);  

	/* set view limits */
	umin = -max;
	umax = max;
	vmin = -max;
	vmax = max;
	depth = min;
	PM_SET_VIEW_PARAMETERS(view_handle, "LIMITS", umin, umax, vmin, vmax, depth); 

	/* set view scale */
	View_Scale = max/View_Size;
	Get_Drawing_View_Scale(View_Scale);
	return(0);
}


/* 设置标题栏中的相关信息 */
set_header_field()
{ 
    page_header_rec = DM_INIT_TAGREC();
    res = PM_GET_HEADER_FROM_ACTIVE_DRW(page_header_rec);
    if(res != 0){
        U_CONFIRM("无法获取标题栏数据");
        return(0);
    }
    
    /* 项目信息 */ 	
    pro_number = W_GET_PANELITEM_ARG(Pro_Number,W_PANEL_VALUE);
    if(pro_number != ""){
        DM_SET_TAGVAL(page_header_rec,Tag_Drawing_ShipNumber,pro_number);   
    }
    
	/*图号信息*/
    drawing_number = W_GET_PANELITEM_ARG(Dra_Number,W_PANEL_VALUE);
	if(drawing_number == "*"){
		nth = 0;
		drawing_number = PM_GET_OBJDATA(Model_Handle, nth, Tag_Penetration_FabDn);
	}
    if(ISSTRING(drawing_number)){
        DM_SET_TAGVAL(page_header_rec,Tag_Drawing_DrawingNumber,drawing_number);   
    }  
		       
    /*页码信息*/
    id = find_model_grid_id(Model_Handle);
    if(id != -1){
        W_SET_WINDOW_ARGS(DisplayGrid,W_LISTW_FINDID,id);
        row = W_GET_WINDOW_ARG(DisplayGrid,W_LISTW_ROW);
        W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, row, W_LISTW_COLUMN, 3);
        page_number = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_STRING);
        if(ISSTRING(page_number)){
            DM_SET_TAGVAL(page_header_rec,Tag_Drawing_PageNumber,page_number);
        }
        /*W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, row, W_LISTW_COLUMN, 4);
        total_page = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_STRING);
        if(ISSTRING(total_page)){
            DM_SET_TAGVAL(page_header_rec,Tag_Drawing_TotalPage,total_page);
        } */
		/*管段名称*/
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, row, W_LISTW_COLUMN, 1);
        spool_name = W_GET_WINDOW_ARG(DisplayGrid, W_LISTW_STRING);
        if(ISSTRING(spool_name)){
            DM_SET_TAGVAL(page_header_rec,Tag_Drawing_SpoolName,spool_name);
        }		
    }
	
	/* 数量 */
	DM_SET_TAGVAL(page_header_rec,Tag_Drawing_Amount,"1");
	
	/* 重量信息 */
    nth = 0;
    weight = 1.0 * PM_GET_OBJDATA(Model_Handle, nth, Tag_TotalWeight);
 	weight_s = "";
	S_PRINTF(weight_s, "%.2f", weight); 
	DM_SET_TAGVAL(page_header_rec,Tag_Drawing_Weight,weight_s);
	
	
    /* 复板名称 */
    nth = 0;
    penetration_name = PM_GET_OBJDATA(Model_Handle, nth, Tag_Penetration_FabDn);
    if(ISSTRING(penetration_name)){
        DM_SET_TAGVAL(page_header_rec,Tag_Drawing_Name,penetration_name);
    }

	/* 复板厚度 */
    thickness= get_thickness(Model_Handle);
    DM_SET_TAGVAL(page_header_rec,Tag_Drawing_Thickness,thickness);

	/* 复板材质 */
    material = get_materail(Model_Handle);
    DM_SET_TAGVAL(page_header_rec,Tag_Drawing_Material,material);
	
	/* 复板备注 */
    remark = get_remark(Model_Handle);
    DM_SET_TAGVAL(page_header_rec,Tag_Drawing_Remark,remark);
    
	/*设置标题栏信息*/
	res = PM_SET_HEADER_TO_ACTIVE_DRW(page_header_rec);
    DM_FREE_TAGREC(page_header_rec);
	return(0);        	       
}

get_remark(double_plate)
{
	nth = 0;
	remark = PM_GET_OBJDATA(double_plate, nth, Tag_Penetration_WeldType);
	if(ISSTRING(remark)){
		return(remark);	
	}
	else{	
		return("");
	}
}

get_materail(double_plate)
{
	nth = 0;
	part_id = PM_GET_OBJDATA(double_plate, nth, "pid");
	material = DM_PARTID_DATA(part_id,"MC");
	if(ISSTRING(material)){
		return(material);	
	}
	else{	
		return("Q235A");
	}
}

get_thickness(double_plate)
{
	nth = 0;
	part_id = PM_GET_OBJDATA(double_plate, nth, "pid");
	thickness = DM_PARTID_DATA(part_id,"DD");
	if(ISSTRING(thickness)){
		thickness = SEARCH(STRINGTERM(thickness,"mm"),"=");
		thickness = TAIL(thickness,STRLEN(thickness)-1);
		return(thickness);	
	}
	else{	
		return("0.00");
	}
}

/*get drawing name*/
get_drawing_name()
{
	drawing_name = "";
	flag = 1;
	i = 0;
	while(flag){
		drawing_name = Penetration_Name + "-V" + ITOASCII(i);
		doc_guid = "";
		res = PM_FIND_DRAWING_WITH_NAME(drawing_name,doc_guid);
		if(res <= 0){
			flag = 0;
		}
		i = i + 1;
	}
	return(drawing_name); 
}

/* 抽取复板名称后面的序号 */
get_penetration_sequence()
{
	sequence = "";
	flag = 1;
	name = Penetration_Name;
	while(flag){
		char = TAIL(name,1);
		if(char == "1" | char == "2" | char == "3" | char == "4" | char == "5" | char == "6" | char == "7" | char == "8" | char == "9"){
			sequence = char + sequence;	
			name = HEAD(name,STRLEN(name)-1);
		}
		else{
			flag = 0;
		}
	}
	return(sequence);
}

find_model_grid_id(handle model_handle)
{
   for(i=0;i<Object_Number;i=i+1;){
      obj_handle = PM_GET_MEMBER_IN_SET(Object_List,i);
      if(model_handle == obj_handle){
         return(i);
      }
   }
   return(-1);
}

get_spool_name(obj_h)
{
	nth = 0;
	type = PM_GET_OBJDATA(obj_h,0,MMT_TAG_OBJTYPE);
	xmin = 0; xmax = 0; ymin = 0; ymax = 0; zmin = 0; zmax = 0;
	res = PM_GET_BBOX_OF_OBJECT(obj_h, xmin, xmax, ymin, ymax, zmin, zmax); 
	obj_type = 3;
	pipes = Search_Models_Intersect_Box(xmin,ymin,zmin,xmax,ymax,zmax,obj_type);
	spool_name = "未定义";
	if(!ISINT(pipes)){
		pipe = PM_GET_MEMBER_IN_SET(pipes,0);
		nth = 1;
		name = PM_GET_OBJDATA(pipe,nth,Tag_Spool_Name);	
		if(!ISINT(name)){
			spool_name = name;	/* 抽取管段的管段名*/
		}
	}
	return(spool_name);
}

get_page_number(obj_h)
{
	nth = 0;
	name = PM_GET_OBJDATA(obj_h,nth,Tag_Penetration_FabDn);
	if(ISINT(name)){
		return("0");
	}
	str_len = STRLEN(name);
	sequ = name;
	for(i=0;i<str_len;i=i+1;){
		char = TAIL(name,1);
		if(char == "-"){
			sequ = ITOASCII(String_To_Int(TAIL(sequ,i))+1);
			return(sequ);
		}
		name = HEAD(name,STRLEN(name) - 1);	
	}
}

get_planning_unit(obj_h)
{
	nth = 0;
	xmin = 0; xmax = 0; ymin = 0; ymax = 0; zmin = 0; zmax = 0;
	res = PM_GET_BBOX_OF_OBJECT(obj_h, xmin, xmax, ymin, ymax, zmin, zmax); 
	obj_type = 3;
	pipes = Search_Models_Intersect_Box(xmin,ymin,zmin,xmax,ymax,zmax,obj_type);
	planning_unit = "未定义";
	if(!ISINT(pipes)){
		pipe = PM_GET_MEMBER_IN_SET(pipes,0);
		name = PM_GET_OBJDATA(pipe,0,Tag_Spool_PlanningUnit);	
		if(!ISINT(name)){
			planning_unit = name;
		}
	}
	return(planning_unit);
}

main()
{	
	init();
	mainform  = create_top_frame();
	Panel_upperpart = create_panel_upperpart(mainform);
	DisplayGrid  = create_grid(mainform);
	command = create_command(mainform);
	set_default();
		
	MainWindow = mainform;
	
	W_MAP_FRAME(mainform);
	W_RUN_FRAME(mainform);
	W_UNMAP_FRAME(mainform);
	W_DESTROY_FRAME(mainform);
}

exit()
{
	current_drawing = PM_GET_ACTIVE_DRW_NAME();
	if(current_drawing != ""){
	   PM_SAVE_ACTIVE_DRW();
	   PM_CHECK_IN_ACTIVE_DRW();
	   PM_CLOSE_ACTIVE_DRW();	   
	}
	/* 将已经加亮的模型恢复原来的颜色 */
	model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
	for (i = 0 ; i < model_number; i = i + 1){
		model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
		Highlight_Object(model,FALSE);
	}	
	/* release resource */		
	PM_FREE_SET(Object_List);
	PM_FREE_SET(High_Light_List);
	PM_FREE_SET(Selected_Objects);
	A_FREE(Drawing_Tag_Array);
	A_FREE(Column_Description_Array);
	free_2darray(Object_Info);
    A_FREE(Access_List);
}

/*Added by Pekka Martin April 2010*/
export_active_drw(format, template_dwr, output_dir)
{
	rec = DM_INIT_TAGREC(); 
	DM_SET_TAGVAL(rec, G2D_EXT_TAG_OUTPUT_DIR, output_dir);
	DM_SET_TAGVAL(rec, G2D_EXT_TAG_TEMPLATE_DRW, template_dwr);
	DM_SET_TAGVAL(rec, G2D_EXT_TAG_FORMAT, ITOASCII(format));
	DM_SET_TAGVAL(rec, G2D_EXT_TAG_ONE_TO_ONE_SCALING, "0");
	
	r = PM_EXPORT_ACTIVE_DRW(rec);
	
	DM_FREE_TAGREC(rec);
	
	return(r);
}

set_dimensioning_properties(float scale)
{
	DW_TSLANT(0);
	DW_TTYPE(0);
	DW_DIMFORM("%Qa");
	
	DW_LAYER(DimLineLayer);
	DW_PEN(DimLinePen);
	DW_COLOR(DimLineColor);
	DW_TSIZE(scale * DimTextHeight, scale * DimTextWidth, scale * DimTextSpc);
	DW_DIMSYMHGHT(scale * DimSymHeight);
	
	DW_DIMVALDIST(scale * 1.0);
	DW_DIMOFFSETEX(scale * 1.0);
	DW_DIMSYM(1, 1);
	DW_ZLEVEL(0);
	
	return(0);
}

/* parameter       type     description
-- view_handle     handle   handle of dimensioning view
-- dim_type        int      
-- x1              float    x coordinate of first dimension point (center point)
-- y1              float    y coordinate of first dimension point (center point)
-- z1              float    z coordinate of first dimension point (center point)
-- x2              float    x coordinate of second dimension point (point on arc)
-- y2              float    y coordinate of second dimension point (point on arc)
-- z2              float    z coordinate of second dimension point (point on arc)      
-- distance        int     
-- txt_h           float
-- txt_w           float
-- txt_s           float
-- sym_h           float
-- dim_text        string 
*/ 
add_radius_dimension(handle view_h, float x1, float y1, float z1,float x2, float y2, float z2, float distance, float txt_h, float txt_w, float txt_s, float sym_h, string dim_text)
{ 
	dum = 0.0;	scale = 0.0;
	res = DW_GET_VIEW_PARAMS(dum, dum, dum, dum, dum, dum, scale);
	v_dx = 0; v_dy = 0; v_dz = 0;
	PM_GET_VIEW_PARAMETERS(view_h,"VDIR",v_dx,v_dy,v_dz);
	
	dx = x2 - x1;
	dy = y2 - y1;
	dz = z2 - z1;
	VEC_UNITV(dx,dy,dz);
	
	angle = 0;
	GU_GetAngleBetweenTwoVectors(dx,dy,dz,v_dx,v_dy,v_dz,angle);
	if(angle < 60 & angle > -60){
	   return(0);
	}
	else if(angle > 120){
	   return(0);
	}
	else if(angle < - 120){
	   return(0);
	}
	
	u1=x1;v1=y1;w1=z1;u2=x2;v2=y2;w2=z2; 
   
	PM_VIEW_TRANSFORMATION(view_h,1,u1,v1,w1);	
	PM_VIEW_TRANSFORMATION(view_h,1,u2,v2,w2);

	dim_type = 7;		
	ddu = u1 - u2;
	ddv = v1 - v2;
	ddw = 0.0;
	text_move = VEC_UNITV(ddu, ddv, ddw);
		
	/* dimension text */
	nr_char = STRLEN(dim_text);
	dim_string_len = nr_char * txt_w + (nr_char - 1) * txt_s;
	/*text_move = scale * (sym_h + dim_string_len/2);*/
	text_move = text_move + 2 * dim_string_len;
	set_dimensioning_properties(scale);
	/*level = distance;*/
	level = 0;	
	/* the normal */
	ndu = -ddv;
	ndv = ddu;
		
	DW_DIMTYPE(dim_type);	
	DW_DIMSYM(3, 1);
	
	test_length = scale*(dim_string_len + 2*sym_h);
	line_length = SQRT(ddu*ddu+ddv*ddv);
	
	if(test_length >= line_length){
	   location = 1;
	}
	else{
	   location = 2;
	}
	
	if(location == 1){		
		text_u = u1 - ddu * text_move + ndu * level;
		text_v = v1 - ddv * text_move + ndv * level;
	}
	else if(location == 2){
		text_u = (u1 + u2)/2 + ndu * level;
		text_v = (v1 + v2)/2 + ndv * level;
	}
	else if(location == 3){
		text_u = u2 + ddu * text_move + ndu * level;
		text_v = v2 + ddv * text_move + ndv * level;
	}
	DW_DIMOFFSETEX(0);      
	DW_OPNDIM();
	DW_PNT(text_u, text_v, w1);		/* dim text level		*/
	DW_PNT(u1, v1, w1);				/* first end point		*/
	DW_DIMVAL("","", dim_text);		/* dimension value		*/
	DW_DIMVALORG(text_u, text_v);	/* dim text location	   */
	DW_PNT(u2, v2, w2);				/* second end point		*/
	DW_CLSDIM();
	
	return(0);
}

/* parameter       type     description
-- view_handle     handle   handle of dimensioning view
-- dim_type        int      
-- x1              float    x coordinate of first dimension point (center point)
-- y1              float    y coordinate of first dimension point (center point)
-- z1              float    z coordinate of first dimension point (center point)
-- x2              float    x coordinate of second dimension point (point on arc)
-- y2              float    y coordinate of second dimension point (point on arc)
-- z2              float    z coordinate of second dimension point (point on arc)      
-- distance        int     
-- txt_h           float
-- txt_w           float
-- txt_s           float
-- sym_h           float
-- dim_text        string 
*/ 
add_diameter_dimension(handle view_h, float x1, float y1, float z1,float x2, float y2, float z2, float distance, float txt_h, float txt_w, float txt_s, float sym_h, string dim_text)
{ 
	dum = 0.0;	scale = 0.0;
	res = DW_GET_VIEW_PARAMS(dum, dum, dum, dum, dum, dum, scale);
	v_dx = 0; v_dy = 0; v_dz = 0;
	PM_GET_VIEW_PARAMETERS(view_h,"VDIR",v_dx,v_dy,v_dz);
	
	dx = x2 - x1;
	dy = y2 - y1;
	dz = z2 - z1;
	VEC_UNITV(dx,dy,dz);
	
	angle = 0;
	GU_GetAngleBetweenTwoVectors(dx,dy,dz,v_dx,v_dy,v_dz,angle);
	if(angle < 60 & angle > -60){
	   return(0);
	}
	else if(angle > 120){
	   return(0);
	}
	else if(angle < - 120){
	   return(0);
	}
	
	u1=x1;v1=y1;w1=z1;u2=x2;v2=y2;w2=z2; 
   
	PM_VIEW_TRANSFORMATION(view_h,1,u1,v1,w1);	
	PM_VIEW_TRANSFORMATION(view_h,1,u2,v2,w2);

	dim_type = 7;		
	ddu = u2 - u1;
	ddv = v2 - v1;
	ddw = 0.0;
	VEC_UNITV(ddu, ddv, ddw);
		
	/* dimension text */
	nr_char = STRLEN(dim_text);
	dim_string_len = nr_char * txt_w + (nr_char - 1) * txt_s;
	text_move = scale * (sym_h + dim_string_len/2) - 15;
	set_dimensioning_properties(scale);
	level = distance;
	/* the normal */
	ndu = -ddv;
	ndv = ddu;
		
	DW_DIMTYPE(dim_type);	
	DW_DIMSYM(1, 1);
	
	test_length = scale*(dim_string_len + 2*sym_h);
	line_length = SQRT(ddu*ddu+ddv*ddv);
	
	if(test_length >= line_length){
	   location = 1;
	}
	else{
	   location = 2;
	}
	
	if(location == 1){		
		text_u = u1 - ddu * text_move + ndu * level;
		text_v = v1 - ddv * text_move + ndv * level;
	}
	else if(location == 2){
		text_u = (u1 + u2)/2 + ndu * level;
		text_v = (v1 + v2)/2 + ndv * level;
	}
	else if(location == 3){
		text_u = u2 + ddu * text_move + ndu * level;
		text_v = v2 + ddv * text_move + ndv * level;
	}
	
	DW_DIMOFFSETEX(0);      
	DW_OPNDIM();
	DW_PNT(text_u, text_v, w1);		/* dim text level		*/
	DW_PNT(u1, v1, w1);				/* first end point		*/
	DW_DIMVAL("","", dim_text);		/* dimension value		*/
	DW_DIMVALORG(text_u, text_v);	/* dim text location	*/
	DW_PNT(u2, v2, w2);				/* second end point		*/
	DW_CLSDIM();
	
	return(0);
}

/* parameter       type     description
-- view_handle     handle   handle of dimensioning view
-- dim_type        int      
-- x1              float    x coordinate of first dimension point (center point)
-- y1              float    y coordinate of first dimension point (center point)
-- z1              float    z coordinate of first dimension point (center point)
-- x2              float    x coordinate of second dimension point (point on arc)
-- y2              float    y coordinate of second dimension point (point on arc)
-- z2              float    z coordinate of second dimension point (point on arc)      
-- distance        int     
-- txt_h           float
-- txt_w           float
-- txt_s           float
-- sym_h           float
-- dim_text        string 
*/ 
add_line_dimension(handle view_h, float x1, float y1, float z1,float x2, float y2, float z2, float distance, float txt_h, float txt_w, float txt_s, float sym_h, string dim_text)
{ 
	dum = 0.0;	scale = 0.0;
	res = DW_GET_VIEW_PARAMS(dum, dum, dum, dum, dum, dum, scale);
	v_dx = 0; v_dy = 0; v_dz = 0;
	PM_GET_VIEW_PARAMETERS(view_h,"VDIR",v_dx,v_dy,v_dz);
	
	dx = x2 - x1;
	dy = y2 - y1;
	dz = z2 - z1;
	VEC_UNITV(dx,dy,dz);
	
	angle = 0;
	GU_GetAngleBetweenTwoVectors(dx,dy,dz,v_dx,v_dy,v_dz,angle);
	if(angle < 60 & angle > -60){
	   return(0);
	}
	else if(angle > 120){
	   return(0);
	}
	else if(angle < - 120){
	   return(0);
	}
	
	u1=x1;v1=y1;w1=z1;u2=x2;v2=y2;w2=z2; 
   
	PM_VIEW_TRANSFORMATION(view_h,1,u1,v1,w1);	
	PM_VIEW_TRANSFORMATION(view_h,1,u2,v2,w2);

	dim_type = 7;		
	ddu = u2 - u1;
	ddv = v2 - v1;
	ddw = 0.0;
	distance = VEC_UNITV(ddu, ddv, ddw);
		
	/* dimension text */
	nr_char = STRLEN(dim_text);
	dim_string_len = nr_char * txt_w + (nr_char - 1) * txt_s;
	text_move = scale * (sym_h + dim_string_len/2);
	text_move = 0;
	set_dimensioning_properties(scale);
	level = - distance / 2;
		
	/* the normal */
	ndu = -ddv;
	ndv = ddu;
		
	DW_DIMTYPE(dim_type);	
	DW_DIMSYM(1, 1);
		
	text_u = (u1 + u2)/2 + ndu * level;
	text_v = (v1 + v2)/2 + ndv * level;
	
	DW_DIMOFFSETEX(0);      
	DW_OPNDIM();
	DW_PNT(text_u, text_v, w1);		/* dim text level		*/
	DW_PNT(u1, v1, w1);				/* first end point		*/
	DW_DIMVAL("","", dim_text);		/* dimension value		*/
	DW_DIMVALORG(text_u, text_v);	/* dim text location	*/
	DW_PNT(u2, v2, w2);				/* second end point		*/
	DW_CLSDIM();
	
	return(0);
}


