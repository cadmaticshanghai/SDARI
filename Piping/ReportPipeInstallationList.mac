/* $Id: ReportPipeInstallationList.mac,v1.0.0 2019/05/13 Wallis.liu $ */

/*
**	这个程序用于浏览及生成管系外场托盘表.
*/


#include "include/win.h"
#include "include/win_panel.h"
#include "include/dmutil.h"
#include "include/dm_errors.h"
#include "include/dm_cos_schema.h"
#include "include/pm.h"
#include "include/pm_errors.h"
#include "include/PmPipingUtils.h"
#include "include/pm_drawings.h"
#include "include/pm_core_tags.h"
#include "include/pm_annot.h"
#include "include/PmMgeTags.h"
#include "include/array.mac"
#include "include/cos.h"
#include "include/dw.h"
#include	"include/geoutils.h"
#include "opt/pm/EloTools/include/viewutilsELO.h"
#include "include/g2d_ext2df.h"
#include	"include/quants.h"
#include "include/pi_math.mac" 
#include "include/pi.h"
#include "include/geotypes.h"

#include "$MarineToolkit/Piping/PspoolProdInfo.h"
#include "$MarineToolkit/Piping/ReportPipeInstallationList.h"
#include "$MarineToolkit/include/String_Utility.h"
#include "$MarineToolkit/include/Common_Utility.h"
#include "$MarineToolkit/include/Grid_Utility.h"
#include "$MarineToolkit/include/Math_Utility.h"
#include "$MarineToolkit/include/Piping_Utility.h"

/*
**脚本语言中似乎无法直接获得一个数组的实际长度，定义一个全局变量用于保存生产信息的数量
*/

global  int 	Report1_Column_Number = 9;     /*外场安装托盘表*/
global  int 	Report2_Column_Number = 7;      /*附件材料表*/
global  int 	Report3_Column_Number = 7;      /*附件明细表*/
global  int 	Report4_Column_Number = 6;      /*紧固件托盘表*/
global  int 	Grid_Column_Number = 9;

/*
**定义界面语言
**define interface language
*/
global  handle  Block_Name,Planning_Unit;
global  handle  DisplayGrid;
global  handle  NULL_HANDLE = 0;
global  int     Grid_SelectedItem = 0;
global  int     Grid_SortColumn = -1;
global  int     Grid_SortDirection = 1;
global  handle  Pspool_List;					/*管段handle列表*/
global  int     Pspool_Number=0;				/*管段数量*/
global  handle  Valve_List;					/*阀件handle列表*/
global  int     Valve_Number=0;				/*阀件数量*/
global  handle   Report1_Info;				/*报表信息列表*/
global  handle   Report1_Objects;				/*保存报表行对应的管段*/
global  handle   Report2_Info;				/*报表信息列表*/
global  handle   Report2_Objects;				/*保存报表行对应的附件*/
global  handle   Report3_Info;				/*报表信息列表*/
global  handle   Report3_Objects;				/*保存报表行对应的附件*/
global  handle   Report4_Info;				/*报表信息列表*/
global  handle   Report4_Objects;				/*保存报表行对应的管段*/
global  int		Report1_Row_Number = 0;		/*报表行数*/
global  int		Report2_Row_Number = 0;		/*报表行数*/
global  int		Report3_Row_Number = 0;		/*报表行数*/
global  int		Report4_Row_Number = 0;		/*报表行数*/
global  handle   High_Light_List;				/*模型加亮列表*/
global  handle   Selected_Objects;
global  int		Selected_Objects_Number = 0;
global  int		AutoScale = 1;
global  int		AutoHighLight = 1;
global  handle   MainWindow;
global  handle   Title1,Title2,Title3,Title4;
global  int		Report_Type = 0;
global  int		Maximum_Report_Row_Number = 2000;
global  handle  Report_Path,Report_Template;
global  string  DataFilePath = "";
global  handle   wobj;
global  string  DefaultReportPath = "";
global  string  DefaultTemplatePath = "";
global  string  DefaultModuleName = "PipeInstallationList";
/*
**初始化相关对象
*/
init()
{	
	Title1 = A_ALLOC(9, "STRING");
	A_PUT(Title1,0,"序号");
	A_PUT(Title1,1,"管段名称");
	A_PUT(Title1,2,"主要管材");
	A_PUT(Title1,3,"内表面处理");
	A_PUT(Title1,4,"外表面处理");
	A_PUT(Title1,5,"长度(mm)");
	A_PUT(Title1,6,"重量(Kg)");
	A_PUT(Title1,7,"管段类型");
	A_PUT(Title1,8,"备注");
	
	Title2 = A_ALLOC(7, "STRING");
	A_PUT(Title2,0,"序号");
	A_PUT(Title2,1,"名称");
	A_PUT(Title2,2,"型号规格及标准号");
	A_PUT(Title2,3,"数量");
	A_PUT(Title2,4,"重量(kg)");
	A_PUT(Title2,5,"物资编码");
	A_PUT(Title2,6,"备注");

	Title3 = A_ALLOC(7, "STRING");
	A_PUT(Title3,0,"序号");
    A_PUT(Title3,1,"阀件名");
	A_PUT(Title3,2,"名称");
	A_PUT(Title3,3,"标准号");
	A_PUT(Title3,4,"压力");
	A_PUT(Title3,5,"通径");
	A_PUT(Title3,6,"备注");    
    
	Title4 = A_ALLOC(6, "STRING");
	A_PUT(Title4,0,"序号");
    A_PUT(Title4,1,"系统代号");
	A_PUT(Title4,2,"名称");
	A_PUT(Title4,3,"规格");
	A_PUT(Title4,4,"数量");
	A_PUT(Title4,5,"备注");
	
	DataFilePath = SYS_GETENV("TEMP");
}

initiate()
{
    username = "";
    machinename = "";
    SYS_GET_USERNAME(username);
    if(username != ""){
        DefaultReportPath = username + "PipeInstallationListPath";
        DefaultTemplatePath = username + "PipeInstallationTemplatePath";
    }
    else{
        if(machinename != ""){
            DefaultReportPath = machinename + "PipeInstallationListPath";
            DefaultTemplatePath = machinename + "PipeInstallationTemplatePath";
        }
        else{
            DefaultReportPath = "PipeInstallationListPath";
            DefaultTemplatePath = "PipeInstallationTemplatePath";        
        }       
    }
    report_path = "";
    template_path = "";
    
    res = GET_STRING_DEFAULT(DefaultModuleName,DefaultReportPath,report_path);
    if(res == 0){
        W_SET_PANELITEM_ARGS(Report_Path, W_PANEL_VALUE, report_path);
    }
    else{
        W_SET_PANELITEM_ARGS(Report_Path, W_PANEL_VALUE, "C:/TEMP/");
    }
    
    res = GET_STRING_DEFAULT(DefaultModuleName,DefaultTemplatePath,template_path);
    if(res == 0){
        W_SET_PANELITEM_ARGS(Report_Template, W_PANEL_VALUE, template_path);
    }
    else{
        W_SET_PANELITEM_ARGS(Report_Template, W_PANEL_VALUE, "P:/报表模板/管系安装托盘表模板.xlsx");
    }    		
    fresh();	
}

fresh()
{
	Report1_Info = alloc_2darray(1,1);
	Report1_Objects = A_ALLOC(1);
    Report1_Row_Number = 0;
	Report2_Info = alloc_2darray(1,1);
	Report2_Objects = A_ALLOC(1);
    Report2_Row_Number = 0;
	Report3_Info = alloc_2darray(1,1);
	Report3_Objects = A_ALLOC(1);
	Report4_Info = alloc_2darray(1,1);
	Report4_Objects = A_ALLOC(1);
    Report4_Row_Number = 0;
	/*初始化模型集合*/
	Pspool_List = PM_INIT_SET();
    Valve_List = PM_INIT_SET();

	/*初始化加亮模型集合*/
	High_Light_List = PM_INIT_SET();
	
	/*初始化选中的模型集合*/
	Selected_Objects = PM_INIT_SET();
}

/*
**Get the selected objects in grid
*/
get_selected_items()
{
	PM_SETOP_SUB(Selected_Objects, Selected_Objects);
	selected_rows = W_GET_WINDOW_ARG( wobj, W_LISTW_MSVALUE );
	total_lines = STRLEN(selected_rows);
	k = 0;
	for (i = 0; i < total_lines; i = i + 1){
		temp_string = SUBSTRING(selected_rows,i);
		flag = HEAD(temp_string,1);
		if (flag == "1"){
			W_SET_WINDOW_ARGS( wobj, W_LISTW_ROW, i);
			selected_row = W_GET_WINDOW_ARG( wobj, W_LISTW_ITEMID );
			if(Report_Type == 0)
            {
				model_handle = A_GET(Report1_Objects, selected_row);
                PM_ADD_OBJECT_TO_SET(model_handle,Selected_Objects);				
			}
			else if(Report_Type == 1)
            {               
				part_id = A_GET(Report2_Objects, selected_row);
                models = get_model_with_partID(part_id);
                PM_SETOP_OR(Selected_Objects,models);
			}
			else if(Report_Type == 2)
            {
				model_handle = A_GET(Report3_Objects, selected_row);
                PM_ADD_OBJECT_TO_SET(model_handle,Selected_Objects);
			}
			else if(Report_Type == 3)
            {
				model_handle = A_GET(Report4_Objects, selected_row);
                PM_ADD_OBJECT_TO_SET(model_handle,Selected_Objects);
			}
			
			k = k + 1;
		}
	}
	Selected_Objects_Number = k;
	return (0);
}


get_model_with_partID(part_id)
{
    models = PM_INIT_SET();
    nth = 0;
    for(i=0;i<Valve_Number;i=i+1;){
        part_handle = PM_GET_MEMBER_IN_SET(Valve_List,i);
        part_id0 = PM_GET_OBJDATA(part_handle,nth,MMT_TAG_PARTID);
        if(part_id == part_id0){       
            PM_ADD_OBJECT_TO_SET(part_handle,models);
        }    
    }
    return(models);
}

/*
**获取全局变量Pspool_List中保存的管段的信息，并将相关信息保存到全局变量ReportInfo1中；
*/
get_report1_info()
{
    /*给报表信息分配一个临时数组*/
    report = alloc_2darray(Pspool_Number,Report1_Column_Number);
    spools = A_ALLOC(Pspool_Number);
    row_number = 0;
    for (i = 0; i < Pspool_Number; i = i + 1;){
        spool = PM_GET_MEMBER_IN_SET(Pspool_List, i);		
        /* 获取管段的相关信息并保存到临时数组 */
        get_spool_info(spool, report, row_number, spools);
    }	
    /*将报表信息保存到全局变量*/
    free_2darray(Report1_Info); 
    Report1_Row_Number = row_number;
    Report1_Info = alloc_2darray(Report1_Row_Number,Report1_Column_Number);
    A_FREE(Report1_Objects);
    Report1_Objects = A_ALLOC(Report1_Row_Number);
    for(i=0;i<Report1_Row_Number;i=i+1;){
        for(j=0;j<Report1_Column_Number;j=j+1;){
            value = get_2darray(report,i,j);
            put_2darray(Report1_Info, i, j, value);	
        }
        spool = PM_GET_MEMBER_IN_SET(Pspool_List,i);
        A_PUT(Report1_Objects,i,spool);
    }
    A_FREE(spools);
    free_2darray(report);
    return 0;
}


/*
**生成内场加工配套表 Generate fabrication material list
*/
get_report2_info()
{
    valves = alloc_2darray(Valve_Number,2);
    valve_number = summary(valves);
   /*给报表信息分配一个临时数组*/
	report = alloc_2darray(valve_number,Report2_Column_Number);
	for (i = 0; i < valve_number; i = i + 1;){
		part_id = get_2darray(valves,i,0);	
        part_number = get_2darray(valves,i,1);
		/* 获取管段的相关信息并保存到临时数组 */
		get_parts_info(report, i, part_id, part_number);
	}	
	/*将报表信息保存到全局变量*/
	free_2darray(Report2_Info); 
	Report2_Row_Number = valve_number;
	Report2_Info = alloc_2darray(Report2_Row_Number,Report2_Column_Number);
	Report2_Objects = A_ALLOC(Report2_Row_Number);
	for(i=0;i<Report2_Row_Number;i=i+1;){
		for(j=0;j<Report2_Column_Number;j=j+1;){
			value = get_2darray(report,i,j);
			put_2darray(Report2_Info, i, j, value);
		}
		part_id = get_2darray(valves,i,0);
		A_PUT(Report2_Objects,i,part_id);
	}
	free_2darray(valves);
	free_2darray(report);
	return 0;
}


summary(valves)
{
    valve_number = 0;
    nth = 0;
    for(i=0;i<Valve_Number;i=i+1;){
        valve = PM_GET_MEMBER_IN_SET(Valve_List,i);
        part_id = PM_GET_OBJDATA(valve,nth,MMT_TAG_PARTID);
        if(i == 0){
            put_2darray(valves,0,0,part_id);
            put_2darray(valves,0,1,1);
            valve_number = valve_number + 1;
        }
        else{
            find = 0;
            for(j=0;j<valve_number;j=j+1;){
                part_id0 = get_2darray(valves,j,0);
                if(part_id == part_id0){
                    find = 1;
                    part_number = get_2darray(valves,j,1);
                    part_number = part_number + 1;
                    put_2darray(valves,j,1,part_number);               
                }            
            }
            if(!find){
                put_2darray(valves,valve_number,0,part_id);
                put_2darray(valves,valve_number,1,1);
                valve_number = valve_number + 1;            
            }
        }    
    }
    return(valve_number);
}




get_report3_info()
{
   /*给报表信息分配一个临时数组*/
	report = alloc_2darray(Valve_Number,Report3_Column_Number);    
	for (i = 0; i < Valve_Number; i = i + 1;){
		valve = PM_GET_MEMBER_IN_SET(Valve_List,i);	
		/* 获取管段的相关信息并保存到临时数组 */
		get_valve_info(report, i, valve);
	}	
	/*将报表信息保存到全局变量*/
	free_2darray(Report3_Info); 
	Report3_Row_Number = Valve_Number;
	Report3_Info = alloc_2darray(Report3_Row_Number,Report3_Column_Number);
	Report3_Objects = A_ALLOC(Report3_Row_Number);
	for(i=0;i<Report3_Row_Number;i=i+1;){
		for(j=0;j<Report3_Column_Number;j=j+1;){
			value = get_2darray(report,i,j);
			put_2darray(Report3_Info, i, j, value);
		}
		valve = PM_GET_MEMBER_IN_SET(Valve_List,i);	
		A_PUT(Report3_Objects,i,valve);
	}
	free_2darray(report);
	return 0;
}


get_report4_info()
{
    /*0.系统代号，1.系统名称，2.part id，3.数量, 4.类型， 5.垫片材料*/
    fastener = alloc_2darray(Fastener_Max_Number,6);
    fastener_number = 0;                        /*用来记住紧固件记录的数量，如果超出max_number,则发出警告*/
    /*0.obj_handle,1.node*/
    recorder = alloc_2darray(Fastener_Max_Number,2);
    record_number = 0;                          /*用保存对象数量，如果超出max_number,则发出警告*/
    for(i=0;i<Pspool_Number;i=i+1;){
        spool = PM_GET_MEMBER_IN_SET(Pspool_List,i);
        pipes = PM_GET_OBJECTS_IN_GROUP(spool);
        pipe_number = PM_NR_MEMBERS_IN_SET(pipes);
        /*traverse all pipes*/
        for(j=0;j<pipe_number;j=j+1;){
            pipe = PM_GET_MEMBER_IN_SET(pipes,j);
            res = get_fastener_information(fastener,fastener_number,recorder,record_number,pipe);
            if(res<0){
                free_2darray(fastener);
                free_2darray(recorder);  
                return(0);
            }
        }            
    }
    for(i=0;i<Valve_Number;i=i+1;){
        valve = PM_GET_MEMBER_IN_SET(Valve_List,i);
        res = get_fastener_information(fastener,fastener_number,recorder,record_number,pipe);
        if(res<0){
            free_2darray(fastener);
            free_2darray(recorder);  
            return(0);
        }                   
    } 

    summary_with_sys_and_pid(fastener,fastener_number);
    
	/*将报表信息保存到全局变量*/
	free_2darray(Report4_Info); 
	Report4_Row_Number = fastener_number;
	Report4_Info = alloc_2darray(Report4_Row_Number,Report4_Column_Number);
	Report4_Objects = A_ALLOC(Report4_Row_Number);
	for(i=0;i<Report4_Row_Number;i=i+1;){
        get_fastener_data(fastener,i);
	}   
    free_2darray(fastener);
    free_2darray(recorder);
    return(0);
}

get_fastener_data(fastener,pos)
{
	/*1.序号*/
	put_2darray(Report4_Info,pos,0,"0");               
	/*2.系统代号*/
	value = get_2darray(fastener,pos,0);
	put_2darray(Report4_Info,pos,1,value);     
	/*3.名称*/    
    pid = get_2darray(fastener,pos,2);
    type = get_2darray(fastener,pos,4);
    if(type != "Gasket"){        
        des = DM_PARTID_DATA(pid,DM_TAG_DE);
        if(ISSTRING(des)){
            put_2darray(Report4_Info,pos,2,des); 
        }
        else{
            put_2darray(Report4_Info,pos,2,"未定义");
        }        
    }
    else{
        material = get_2darray(fastener,pos,5);
        if(material == "SPEC"){
            des = DM_PARTID_DATA(pid,DM_TAG_DE);
            if(ISSTRING(des)){
                put_2darray(Report4_Info,pos,2,des); 
            }
            else{
                put_2darray(Report4_Info,pos,2,"未定义");
            }                 
        }
        else{
            put_2darray(Report4_Info,pos,2,material);       
        }   
    }
	/*4.规格*/
    dd = DM_PARTID_DATA(pid,DM_TAG_DD);
    mc = DM_PARTID_DATA(pid,DM_COSA_MC);
    st = DM_PARTID_DATA(pid,DM_COSA_ST);
    value = "";
    if(ISSTRING(dd)){
        value = value + dd;         
    }
    if(ISSTRING(mc)){
        value = value + " " + mc;         
    }  
    if(ISSTRING(st)){
        value = value + " " + st;         
    } 
    put_2darray(Report4_Info,pos,3,value);    
    /*5.数量*/
    value = get_2darray(fastener,pos,3);
    put_2darray(Report4_Info,pos,4,value);  
    /*6.备注*/
    value = get_2darray(fastener,pos,1);
    put_2darray(Report4_Info,pos,5,value);
}

summary_with_sys_and_pid(fastener,fastener_number)
{
    /*0.系统代号，1.系统名称，2.part id，3.数量, 4.类型, 5.垫片材料*/
    temp = alloc_2darray(Fastener_Max_Number,6);
    num = 0;
    for(i=0;i<fastener_number;i=i+1;){
        if(i==0){
            for(j=0;j<6;j=j+1;){
                data = get_2darray(fastener,0,j);
                put_2darray(temp,0,j,data);            
            } 
            num = num + 1;
        }
        else{
            system_id0 = get_2darray(fastener,i,0);
            pid0 = get_2darray(fastener,i,2);
            gasket_material0 = get_2darray(fastener,i,5);
            type = get_2darray(fastener,i,4);
            find = 0;
            pos = 0;
            loop_flag = 1;
            while(!find & loop_flag){
                system_id = get_2darray(temp,pos,0);
                pid = get_2darray(temp,pos,2);
                gasket_materail = get_2darray(temp,pos,5);
                if(type == "Gasket"){
                    if(system_id == system_id0 & pid == pid0 & gasket_materail == gasket_material0){
                        part_num = ITOASCII(1.0*get_2darray(temp,pos,3) + 1.0*get_2darray(fastener,i,3));
                        put_2darray(temp,pos,3,part_num);
                        find = 1;
                    }                               
                }
                else{
                    if(system_id == system_id0 & pid == pid0){
                        part_num = ITOASCII(1.0*get_2darray(temp,pos,3) + 1.0*get_2darray(fastener,i,3));
                        put_2darray(temp,pos,3,part_num);
                        find = 1;
                    }                                 
                }
                pos = pos + 1;
                if(pos == num){
                    loop_flag = 0;
                }
            }
            if(!find){
                for(j=0;j<6;j=j+1;){
                    data = get_2darray(fastener,i,j);
                    put_2darray(temp,num,j,data);            
                }             
                num = num + 1;           
            }        
        }    
    }
    fastener_number = num;
    free_2darray(fastener);
    fastener = alloc_2darray(fastener_number,6);
    for(i=0;i<fastener_number;i=i+1;){
        for(j=0;j<6;j=j+1;){
            data = get_2darray(temp,i,j);
            put_2darray(fastener,i,j,data);            
        }   
    }
    free_2darray(temp);
    return(0);
}


/*抽取PIPE或者STANDARD PART的紧固件信息*/
get_fastener_information(fastener,fastener_number,recorder,record_number,obj_handle)
{
    node_number = PM_GET_NR_OF_CONPNTS(obj_handle);
    if(node_number>0){
        recs = A_ALLOC(1);
        for(i=1;i<=node_number;i=i+1;){
            check = check_if_caculated(recorder,record_number,obj_handle,i);
            if(!check){                
                recs_number = PM_GET_CONPNT_JOINT_MATERIALS(obj_handle,i,recs);
                if(recs_number >0){
                    system_id = get_system_id(obj_handle); 
                    system_name = get_system_name(obj_handle);
                    system_gasket = get_system_gasket(obj_handle);
                    pipeline_gasket = get_pipeline_gasket(obj_handle);
                    for(j=0;j<recs_number;j=j+1;){ 
                        put_2darray(fastener,fastener_number,0,system_id);  
                        put_2darray(fastener,fastener_number,1,system_name); 
                        if(pipeline_gasket != "未定义"){
                            put_2darray(fastener,fastener_number,5,pipeline_gasket);
                        }
                        else if(system_gasket != "未定义"){
                            put_2darray(fastener,fastener_number,5,system_gasket);
                        } 
                        else{
                            put_2darray(fastener,fastener_number,5,"SPEC");
                        }
                        rec = A_GET(recs, j);
                        pid = DM_GET_TAGVAL(rec, MMT_TAG_PARTID);
                        type = get_fastener_type(pid);                        
                        put_2darray(fastener,fastener_number,2,pid);
                        put_2darray(fastener,fastener_number,4,type);
                        qty = DM_GET_TAGVAL(rec, MMT_TAG_BOM_QUANTITY);
                        if(STRLEN(qty)>2){
                            U_CONFIRM(qty);
                            qty = "8";
                        }
                        put_2darray(fastener,fastener_number,3,qty);   
                        /*
                        des = DM_PARTID_DATA(pid,"DE");
                        mess = ITOASCII(fastener_number) + "<" + des + ":" + qty + ">";
                        U_MESSAGE(mess);
                        */
                        fastener_number = fastener_number + 1;                       
                    }
                    DM_FREE_TAGREC(rec);
                    node_id = 0;
                    connected_obj = PM_GET_CONNECTED_OBJECT(obj_handle,i,node_id);
                    if(!ISINT(connected_obj)){
                        put_2darray(recorder,record_number,0,connected_obj);
                        put_2darray(recorder,record_number,1,node_id);
                        record_number = record_number + 1;                                        
                    }

                }                                                  
            }
        }  
        A_FREE(recs);        
    } 
}

get_fastener_type(pid)
{
	int i_ct, i_t;
	
	s = "";
			
	t = DM_PARTID_DATA(pid, DM_COSA_JOINT_MATERIAL);
		
	if(ISINT(t))
		return(s);
		
	i_t = t;
	
	if(i_t == DM_JOINT_MATERIAL_TYPE_BOLT)
		s = s + "Bolt";
	else if(i_t == DM_JOINT_MATERIAL_TYPE_NUT)
		s = s + "Nut";
	else if(i_t == DM_JOINT_MATERIAL_TYPE_WASHER)
		s = s + "Washer";
	else if(i_t == DM_JOINT_MATERIAL_TYPE_GASKET)
		s = s + "Gasket";
	else if(i_t == DM_JOINT_MATERIAL_TYPE_HOSE_CLAMP)
		s = s + "Hose clamp";
	else if(i_t == DM_JOINT_MATERIAL_TYPE_FRAME)
		s = s + "Frame";
	else if(i_t == DM_JOINT_MATERIAL_TYPE_CLEAT)
		s = s + "Cleat";
	else if(i_t == DM_JOINT_MATERIAL_TYPE_INNER_CORNER)
		s = s + "Inner corner";
	else if(i_t == DM_JOINT_MATERIAL_TYPE_OUTER_CORNER)
		s = s + "Outer corner";
	else if(i_t == DM_JOINT_MATERIAL_TYPE_FRAME_CLAMP)
		s = s + "Frame clamp";
	else if(i_t == DM_JOINT_MATERIAL_TYPE_OTHER)
		s = s + "Other";
	else if(i_t == DM_JOINT_MATERIAL_TYPE_NOT_DEFINED)
		s = s + "Not defined";	
	return(s);
}

get_system_id(obj_handle)
{
    nth = 0;
    system_id = PM_GET_OBJDATA(obj_handle,nth,Tag_System_ID);
    if(ISSTRING(system_id)){
        return(system_id);   
    }
    else{
        return("XX");
    }
}

get_system_name(obj_handle)
{
    nth = 0;
    system_name = PM_GET_OBJDATA(obj_handle,nth,Tag_System_Name);
    if(ISSTRING(system_name)){
        return(system_name);   
    }
    else{
        return("未定义");
    }
}


get_system_gasket(obj_handle)
{
    nth = 0;
    gasket = PM_GET_OBJDATA(obj_handle,nth,Tag_System_Gasket);
    if(ISSTRING(gasket)){
        return(gasket);   
    }
    else{
        return("未定义");
    }
}

get_pipeline_gasket(obj_handle)
{
    nth = 0;
    gasket = PM_GET_OBJDATA(obj_handle,nth,Tag_PipeLine_Gasket);
    if(ISSTRING(gasket)){
        return(gasket);   
    }
    else{
        return("未定义");
    }
}

/* use to check if already get the fastener information of specified obj_handle and node_id*/
check_if_caculated(recorder,record_number,obj_handle,node_id)
{
    if(record_number == 0){
        return(0);
    }
    for(i=0;i<record_number;i=i+1;){
        obj = get_2darray(recorder,i,0);
        id = get_2darray(recorder,i,1);
        if(obj == obj_handle & id == node_id){
            return(1);        
        }    
    }
    return(0);
}

/*get information of specified spool*/
get_spool_info(spool,report,row_number,spools)
{
	/*1.序号*/
	sequence = "0";
	put_2darray(report,row_number,0,sequence);               
	/*2.管段名称*/
	spool_name = Get_Attribute_Value(spool,Tag_Spool_Name);
	put_2darray(report,row_number,1,spool_name);
	/*3.主要管材*/
    main_tube = get_spool_main_tube(spool);
	put_2darray(report,row_number,2,main_tube);
	/*4.内表面处理*/
	surf_in = "未定义";
	data = Get_Attribute_Value(spool,Tag_Spool_SurfTreatmentIn);
	if(ISSTRING(data)){
		surf_in = data;
	}
	put_2darray(report,row_number,3,surf_in);	
	/*5.外表面处理*/
	surf_out = "未定义";
	data = Get_Attribute_Value(spool,Tag_Spool_SurfTreatmentOut);
	if(ISSTRING(data)){
		surf_out = data;
	}
	put_2darray(report,row_number,4,surf_out);

    /*6.管材长度*/
    length = get_spool_tube_length(spool);
    put_2darray(report,row_number,5,length);    

    /*7.管段重量*/
    weight = get_spool_weight(spool);
    put_2darray(report,row_number,6,weight);

    /*8.管段类型*/
	spool_type = "未定义";
	data = Get_Attribute_Value(spool,Tag_Spool_Type);
	if(ISSTRING(data)){
		spool_type = data;					
	}
    put_2darray(report,row_number,7,spool_type);

    /*9.管段备注信息*/
	spool_remark = "";
	data = Get_Attribute_Value(spool,Tag_Spool_Remark);
	if(ISSTRING(data)){
		spool_remark = data;					
	}
    put_2darray(report,row_number,8,spool_remark);
	row_number = row_number + 1;
}


get_spool_tube_length(spool)
{
    total_length = 0;
	/*get all pipe object in the spool*/
	pipes = PM_GET_OBJECTS_IN_GROUP(spool);
	pipe_number = PM_NR_MEMBERS_IN_SET(pipes);
	/*traverse all pipes*/
	for(i=0;i<pipe_number;i=i+1;){
		pipe = PM_GET_MEMBER_IN_SET(pipes,i);
		part_number = PM_NR_PARTS_IN_PIPE(pipe);
		if(part_number != -1){
			/*traverse all pipe parts*/
			for(nth=1;nth<=part_number;nth=nth+1;){           
				length = PM_GET_OBJDATA(pipe,nth,MMT_TAG_LENGTH);				
				if(ISSTRING(length)){
                    total_length = total_length + 1.0*length;
                }					
			}
		}
	}
    length = FTOASCII(total_length);
    length = STRINGTERM(length,".");
    return(length);
}



get_spool_weight(spool)
{
    total_weight = 0;
	/*get all pipe object in the spool*/
	pipes = PM_GET_OBJECTS_IN_GROUP(spool);
	pipe_number = PM_NR_MEMBERS_IN_SET(pipes);
	/*traverse all pipes*/
    nth = 0;
	for(i=0;i<pipe_number;i=i+1;){
		pipe = PM_GET_MEMBER_IN_SET(pipes,i);
        weight = PM_GET_OBJDATA(pipe,nth,MMT_TAG_MASS);
        if(ISSTRING(weight)){
            total_weight = total_weight + 1.0 * weight;        
        }
	}
    weight = "";
    S_PRINTF(weight,"%.2f",total_weight);    
    return(weight);
}



get_spool_main_tube(spool)
{
	/*get all pipe object in the spool*/
	pipes = PM_GET_OBJECTS_IN_GROUP(spool);
	pipe_number = PM_NR_MEMBERS_IN_SET(pipes);
    /*0. piece number; 1. part id; 2. piece length*/
	pieces_info = alloc_2darray(50,2);
	piece_number = 0;
	/*traverse all pipes*/
	for(i=0;i<pipe_number;i=i+1;){
		pipe = PM_GET_MEMBER_IN_SET(pipes,i);
		part_number = PM_NR_PARTS_IN_PIPE(pipe);
		if(part_number != -1){
			/*traverse all pipe parts*/
			for(nth=1;nth<=part_number;nth=nth +1;){ 
                part_id = PM_GET_OBJDATA(pipe,nth,MMT_TAG_PARTID);                
				if(is_tube(part_id)){                                            /*check if it is tube part*/					
					if(nth == 1){
                        bpl = PM_GET_OBJDATA(pipe,nth,MMT_TAG_BENT_PIPE_LEN);
                        put_2darray(pieces_info,piece_number,0,part_id);
                        put_2darray(pieces_info,piece_number,1,bpl);
                        piece_number = piece_number + 1;
					}
                    else{
						if(!in_same_piece(pipe,nth)){                             /*check if it belong to same piece with previous part*/
                            bpl = PM_GET_OBJDATA(pipe,nth,MMT_TAG_BENT_PIPE_LEN);
                            put_2darray(pieces_info,piece_number,0,part_id);
                            put_2darray(pieces_info,piece_number,1,bpl);  
                            piece_number = piece_number + 1;                            
						}                    
                    }
				}
			}
		}
	}
    
    /* 如果管段中不包含任何管材 */
    if(piece_number == 0){
        return("Unset");
    }
   
	/* get longest piece*/
    part_id0 = get_2darray(pieces_info,0,0);
    length0 = 1.0 * get_2darray(pieces_info,0,1);
	for(i=1;i<piece_number;i=i+1;){
        length = 1.0 * get_2darray(pieces_info,i,1);
        part_id = get_2darray(pieces_info,i,0);
        if(length > length0){
            part_id0 = part_id;
            length0 = length;
        }
        else if(length == length0){
            DN0 = 1.0 * DM_PARTID_DATA(part_id0,"D01");
            DN = 1.0 * DM_PARTID_DATA(part_id,"D01");
            if(DN > DN0){
                part_id0 = part_id;
                length0 = length;                        
            }
        }
	}	
	/* release resourse */
	free_2darray(pieces_info);
    /* get tube information and return it*/
    DE = DM_PARTID_DATA(part_id0,"DE");
    DD = DM_PARTID_DATA(part_id0,"DD");
    MC = DM_PARTID_DATA(part_id0,"MC");
    
    res = DE + " " + DD + " " + MC;
    return(res);
}


in_same_piece(pipe,nth)
{
	if(nth == 1){
		return(0);
	}
	part_id = PM_GET_OBJDATA(pipe,nth,MMT_TAG_PARTID);
	if(!is_tube(part_id)){
		return(0);
	}
    part_id = PM_GET_OBJDATA(pipe, nth-1, "pid");  
	if(is_tube(part_id)){
		return(1);
	}
	return(0);
}




is_tube(part_id)
{ 
    g_type = DM_PARTID_DATA(part_id, "GT");  
	if(g_type == DM_GT_PIPE){
		return(1);
	}
	return(0);
}





get_parts_info(report, pos, part_id, part_number)
{
    /*1.序号*/
    put_2darray(report,pos,0,"0");
    /*2.名称*/
    des = "未定义";
    data = DM_PARTID_DATA(part_id,"DE");
    if(ISSTRING(data)){
        des = data;
    }
    put_2darray(report,pos,1,des);
    /*3.型号规格及标准号*/
    data = DM_PARTID_DATA(part_id,"DD");
    if(ISSTRING(data)){
        dd = data;
    }
    else{
        dd = "未定义尺寸";
    }
    data = DM_PARTID_DATA(part_id,"ST");
    if(ISSTRING(data)){
        st = data;
    }
    else{
        st = "未定义标准";    
    }
    size = dd + " " + st;
    put_2darray(report,pos,2,size);
    /*4.数量*/
    put_2darray(report,pos,3,part_number);
    /*5.重量*/
    weight = part_number * DM_PARTID_DATA(part_id,"D61");
    put_2darray(report,pos,4,weight);		
    /*6.物资编码*/
    put_2darray(report,pos,5,"");
    /*7.备注*/
    put_2darray(report,pos,6,"");
}


get_valve_info(report, pos, valve)
{
    nth = 0;
    part_id = PM_GET_OBJDATA(valve,nth,MMT_TAG_PARTID);
    /*1.序号*/
    put_2darray(report,pos,0,"0");
    /*2.阀件名*/
    vpo = PM_GET_OBJDATA(valve,nth,"vpo");
    if(ISSTRING(vpo)){
        put_2darray(report,pos,1,vpo);
    }
    else{
        put_2darray(report,pos,1,"");
    }
    /*3.名称*/
    des = DM_PARTID_DATA(part_id,"DE");
    if(ISSTRING(des)){
        put_2darray(report,pos,2,des);
    }
    else{
        put_2darray(report,pos,2,"未定义");
    }
    /*4.标准号*/
    std = DM_PARTID_DATA(part_id,"ST");
    if(ISSTRING(std)){
        put_2darray(report,pos,3,std);
    }
    else{
        put_2darray(report,pos,3,"未定义");
    }   
    /*5.压力*/
    rate = DM_PARTID_DATA(part_id,"RT");
    if(ISSTRING(rate)){
        put_2darray(report,pos,4,rate);
    }
    else{
        put_2darray(report,pos,4,"0.0");
    } 		
    /*6.物资编码*/
    DN = DM_PARTID_DATA(part_id,"D01");
    if(ISSTRING(DN)){
        put_2darray(report,pos,5,DN);
    }
    else{
        put_2darray(report,pos,5,"0");
    }
    /*7.备注*/
    put_2darray(report,pos,6,"");
}


get_extra_length(pipe,nth)
{
	extra_length = 0.0;
    extra = PM_GET_OBJDATA(pipe, nth, "el1");
    if(!ISINT(extra)){					
        extra_length = extra_length + 1.0*extra;
    }
    extra = PM_GET_OBJDATA(pipe, nth, "el2");
    if(!ISINT(extra)){					
        extra_length = extra_length + extra;
    }
	return(extra_length);    
}


publish_report_info()
{
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_DELETEROWS, -1);
	/* 将报表信息显示到窗口中 */	
	if(Report_Type == 0){        
		for (i = 0; i < Report1_Row_Number; i = i + 1;){
			W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
			W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_INSERTROWS, 1);
			for ( j = 0; j < Report1_Column_Number; j = j + 1;){
				value = get_2darray(Report1_Info,i,j);
				val = translate_value(value);
				W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0, W_LISTW_COLUMN, j, W_LISTW_STRING, val);			
			}		
			W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ITEMID, i);
            W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0, W_LISTW_COLUMN, 0, W_LISTW_STRING, ITOASCII(Report1_Row_Number-i));            
		}
	}
	else if(Report_Type == 1){
		for (i = 0; i < Report2_Row_Number; i = i + 1;){
			W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
			W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_INSERTROWS, 1);
			for ( j = 0; j < Report2_Column_Number; j = j + 1;){
				value = get_2darray(Report2_Info,i,j);
				val = translate_value(value);
				W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0, W_LISTW_COLUMN, j, W_LISTW_STRING, val);
			}		
			W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ITEMID, i);	
            W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0, W_LISTW_COLUMN, 0, W_LISTW_STRING, ITOASCII(Report2_Row_Number-i));             
		}
	}	
	else if(Report_Type == 2){
		for (i = 0; i < Report3_Row_Number; i = i + 1;){
			W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
			W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_INSERTROWS, 1);
			for ( j = 0; j < Report3_Column_Number; j = j + 1;){
				value = get_2darray(Report3_Info,i,j);
				val = translate_value(value);
				W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0, W_LISTW_COLUMN, j, W_LISTW_STRING, val);			
			}		
			W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ITEMID, i);	
            W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0, W_LISTW_COLUMN, 0, W_LISTW_STRING, ITOASCII(Report3_Row_Number-i));             
		}
	}
	else if(Report_Type == 3){
		for (i = 0; i < Report4_Row_Number; i = i + 1;){
			W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
			W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_INSERTROWS, 1);
			for ( j = 0; j < Report4_Column_Number; j = j + 1;){
				value = get_2darray(Report4_Info,i,j);
				val = translate_value(value);
				W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0, W_LISTW_COLUMN, j, W_LISTW_STRING, val);			
			}		
			W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ITEMID, i);	
            W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0, W_LISTW_COLUMN, 0, W_LISTW_STRING, ITOASCII(Report4_Row_Number-i));             
		}
	}		
		
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 1);
	
	/* 自动调整列宽度 Adjust the width of column automatically*/
	for (i=0; i < Grid_Column_Number; i = i + 1;){
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_COLUMN, i, W_LISTW_COLUMNWIDTH, -1);
	}
	
	/* 对生产信息列表进行排序 */
	/*W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_COLUMN, Grid_SortColumn, W_LISTW_SORT, Grid_SortDirection);*/
}




translate_value(value)
{
	if(ISSTRING(value)){
		return(value);
	}
	else if(ISINT(value)){
		return(ITOASCII(value));				
	}				
	else if(ISFLOAT(value)){
		value_s = "";
		S_PRINTF(value_s,"%.2f",value);
		return(value_s);				
	}
	return(value);
}


/*


**创建顶层窗体
**Create Top frame
*/
create_top_frame()
{
	mainform = W_INIT_FRAME();
	W_REALIZE_WINDOW(mainform,  W_FRAME_TITLE, 		"管系安装托盘表",
								W_FRAME_RESIZABLE,  W_RESIZE_HORIZONTALLY);	
	return(mainform);
}

/*
**创建显示报表内容的格栅
*/

create_grid(main_form)
{
	wobj = W_ADD_WINDOW(main_form, W_MULTISELECT, "DisplayGrid");
						   
	W_REALIZE_WINDOW(wobj,  W_FRAME_RIGHT_OF,    "Block_Name",
							W_FRAME_BELOW,       "panel_upperpart",
							W_LISTW_COLUMNS,     Grid_Column_Number,
							W_FRAME_SCROLLBAR,   W_SCROLLBAR_RIGHTEDGE,
							W_LISTW_HEADER_MODE, W_LISTW_HEADER_BUTTONS,
							W_FRAME_RESIZABLE,   W_RESIZE_HORIZONTALLY,
							W_LISTW_MODE_REPORT, 0,
							W_FRAME_COLS,        73, 
							W_FRAME_ROWS,        17,
							W_LISTW_CALLBACK,    1);						   
	W_SET_WINDOW_HANDLER(wobj, "grid_handler");
	
	/*
	**设置格栅的列标题
	*/	
	Set_Column_Title(wobj, Title1, Grid_Column_Number);				
	return(wobj);
}






quit_handler(item, event_type, button_value)
{
	exit();
	return(99);
}





grid_handler(window, event_type, row, column, item_id)
{  	
	if (event_type == W_EVENT_ITEM_SELECTED) {
		/* 处理格栅的排序 */
		if (row < 0 & column >= 0) {
			sort_grid(column,window);
		}		
		else if(row >= 0 & column == 0){		
			/* 获取选中的模型 */				
			get_selected_items();			
			auto_highlight();
			auto_scale_model();			
		}		
	}	
	/* 处理双击数据行的事件 */
	else if (event_type == W_EVENT_ITEM_DOUBLECLICKED) {	
		/* 获取选中的模型 */			
		get_selected_items();			
		auto_highlight();
		auto_scale_model();			
	}
	return(0);
}




auto_highlight()
{
	/* 处理模型加亮 */
	if (AutoHighLight == 1){
		/* 将已经加亮的模型恢复原来的颜色 */
		model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			highlight_object(model,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);
		PM_FREE_SET(temp);
		
		/* 加亮选中的模型 */
		model_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
		for (i = 0; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
			highlight_object(model,TRUE);
			PM_ADD_OBJECT_TO_SET(model,High_Light_List);			
		}
	}
}




highlight_object(handle object_handle, int flag)
{
   obj_type = PM_GET_OBJDATA(object_handle,0,MMT_TAG_OBJTYPE);
   if(obj_type == MMT_OBT_GROUP){
	   group_members = PM_GET_OBJECTS_IN_GROUP(object_handle);
	   member_numbers = PM_NR_MEMBERS_IN_SET(group_members);
	   for (i = 0; i < member_numbers; i = i + 1;){
		   part_handle = PM_GET_MEMBER_IN_SET(group_members, i);
		   PM_HIGHLIGHT_OBJECT(part_handle, 0, flag);
		}
	}
	else{
	   PM_HIGHLIGHT_OBJECT(object_handle, 0, flag);
	}
}




auto_scale_model()
{
	/* 处理模型自动缩放 */
	if (AutoScale == 1){				
		model_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
		if (model_number == 1){
			model_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,0);
			auto_scale(model_handle);
		}
        else{
            auto_scale_set(Selected_Objects);
        }
	}
}



sort_grid(column,window)
{
	/* A column header was clicked; sort the items */
	if (Grid_SortColumn == column) {
		if (Grid_SortDirection == 0) {
			Grid_SortDirection = 1;
		}
		else {
			Grid_SortDirection = 0;
		}
	}
	else {
		Grid_SortDirection = 1;
	}
	Grid_SortColumn = column;
	W_SET_WINDOW_ARGS(window, W_LISTW_COLUMN, column, W_LISTW_SORT, Grid_SortDirection);
    reorder_grid();
}

reorder_grid()
{
	if(Report_Type == 0){       
		for (i = 0; i < Report1_Row_Number; i = i + 1;){
            W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, i, W_LISTW_COLUMN, 0, W_LISTW_STRING, ITOASCII(i+1));            
		}
	}
	else if(Report_Type == 1){
		for (i = 0; i < Report2_Row_Number; i = i + 1;){	
            W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, i, W_LISTW_COLUMN, 0, W_LISTW_STRING, ITOASCII(i+1));             
		}
	}	
	else if(Report_Type == 2){
		for (i = 0; i < Report3_Row_Number; i = i + 1;){
            W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, i, W_LISTW_COLUMN, 0, W_LISTW_STRING, ITOASCII(i+1)); 
		}
	}
	else if(Report_Type == 3){
		for (i = 0; i < Report4_Row_Number; i = i + 1;){
			for ( j = 0; j < Report4_Column_Number; j = j + 1;){
                W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, i, W_LISTW_COLUMN, 0, W_LISTW_STRING, ITOASCII(i+1)); 
			}		             
		}
	}	
}




model_browsing_handler(item, event_type, button_value)
{
	W_UNMAP_FRAME(MainWindow);	
	/*selected_model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
	if (selected_model_number > 0){
		current_model = PM_GET_MEMBER_IN_SET(High_Light_List, 0);
		parts = PM_GET_OBJECTS_IN_GROUP(current_model);
		part = PM_GET_MEMBER_IN_SET( parts, 0);
		x0 = PM_GET_OBJDATA(part, 0, MMT_TAG_COGX);
		y0 = PM_GET_OBJDATA(part, 0, MMT_TAG_COGY);
		z0 = PM_GET_OBJDATA(part, 0, MMT_TAG_COGZ);
		x = SCAN_QUANT(1,x0);
		y = SCAN_QUANT(1,y0);
		z = SCAN_QUANT(1,z0);
		PM_SET_CURRENT_LOC(x, y, z);	
	}*/
	nth_part = 0;
	PM_PICK_OBJECT("浏览模型",nth_part);
	W_MAP_FRAME(MainWindow);
}





search_objects(item, event_type, button_value)
{   
    fresh();
	query = PM_INIT_QUERY("GROUP");
	groups = PM_EXECUTE_QUERY(query);
		
	/* 获取管段 Get the pipe spool group */
	temp_list = PM_INIT_SET();
	
	if (!ISINT(groups)){
		group_number = PM_NR_MEMBERS_IN_SET(groups);
		for (i = 0; i < group_number; i = i + 1;){
			group_handle = PM_GET_MEMBER_IN_SET(groups, i);
			group_type = PM_GET_OBJDATA(group_handle, 0, MMT_TAG_GROUPTYPE);
			/* 过滤其它类型的组 Get rid of other type group*/
 			if (group_type == "0"){
                nth = 0;
                spool_name = PM_GET_OBJDATA(group_handle,nth,Tag_Spool_Name);   
                if(ISSTRING(spool_name)){                                        /*过滤掉未添加生产信息的管段*/                    	
                    parts = PM_GET_OBJECTS_IN_GROUP(group_handle);              
                    if (parts != 0){                                             /* 过滤不包含零件的组Get rid of group that content nothing */
                        part_number = PM_NR_MEMBERS_IN_SET(parts);
                        if (part_number !=0){
                            /* Get rid of valve*/
                            if (part_number == 1){
                                part = PM_GET_MEMBER_IN_SET(parts, 0);
                                part_type = PM_GET_OBJDATA(part, 0, MMT_TAG_OBJTYPE);
                                if(part_type != MMT_OBT_STANDC){
                                    result = PM_ADD_OBJECT_TO_SET(group_handle,temp_list);
                                }
                            }
                            else{
                                /* 将管段的handle保存到全局数组 */
                                result = PM_ADD_OBJECT_TO_SET(group_handle,temp_list);
                            }
                        }
                    }
                }
			}			
		}
	}
	
	model_number = PM_NR_MEMBERS_IN_SET(temp_list);
	if (model_number > 0){
        filter_model(temp_list);
	}
    		
	/* 将获得的模型添加到全局变量Pspool_List中 */
	PM_FREE_SET(Pspool_List);
	Pspool_List = PM_INIT_SET();		
	Pspool_List = PM_COPY_SET(temp_list); 		
	Pspool_Number = PM_NR_MEMBERS_IN_SET(Pspool_List);	
	if (Pspool_Number <= 0){
		PM_FREE_SET(temp_list);
        return(0);
	}	
	PM_FREE_SET(temp_list);
    
    /* 获取管附件 Get pipe standard part object */    
	temp_list = PM_INIT_SET();	
	if (!ISINT(groups)){
		group_number = PM_NR_MEMBERS_IN_SET(groups);
        /* 遍历所有的模型组 */
		for (i = 0; i < group_number; i = i + 1;){
			group_handle = PM_GET_MEMBER_IN_SET(groups, i);
			group_type = PM_GET_OBJDATA(group_handle, 0, MMT_TAG_GROUPTYPE);
			/* 过滤其它类型的组 Get rid of other type group*/
 			if (group_type == "1"){
                pipes = PM_GET_OBJECTS_IN_GROUP(group_handle);
                pipe_number = PM_NR_MEMBERS_IN_SET(pipes);
                /* 遍历管线下面所有的PIPE */
                if(pipe_number > 0){
                    for(j=0;j<pipe_number;j=j+1;){
                        pipe = PM_GET_MEMBER_IN_SET(pipes,j);
                        part_number = PM_NR_PARTS_IN_PIPE(pipe);
                        if(part_number<0){
                            nth = 0;
                            spool_number = PM_GET_OBJDATA(pipe,nth,"spn");
                            if(ISINT(spool_number)){                              /* 排除带管段号的标准件*/
                                valve_id = PM_GET_OBJDATA(pipe,nth,"vpo");
                                if(!ISINT(valve_id)){                             /* 排除不带阀号的标准件*/
                                     PM_ADD_OBJECT_TO_SET(pipe,temp_list);                                 
                                }                                                        
                            }                        
                        }
                    }               
                }
			}			
		}
	}
    
    
    /* 根据界面设定的条件过滤掉不属于指定托盘的阀件 */
    valve_number = PM_NR_MEMBERS_IN_SET(temp_list);
        
    if(valve_number > 0){
        filter_valve(temp_list);  
    }
      
    /* 将找到的阀件拷贝到全局变量 */
    valve_number = PM_NR_MEMBERS_IN_SET(temp_list);    
    if(valve_number > 0){
        PM_FREE_SET(Valve_List);
        Valve_List = PM_INIT_SET();		
        Valve_List = PM_COPY_SET(temp_list);	
        PM_FREE_SET(temp_list);    
        Valve_Number = valve_number;    
    } 
    
	/* 获取报表信息 */
    get_report4_info();
    if(Pspool_Number>0){
        get_report1_info();
    }	
    if(Valve_Number > 0){
        get_report2_info();
        get_report3_info();
    }
    /* 显示报表信息 */
	publish_report_info();
}

filter_valve( valves )
{
	/* 获取过滤条件 Get filter conditions*/
	block_name    =	W_GET_PANELITEM_ARG(Block_Name,		W_PANEL_VALUE);
	planning_unit = W_GET_PANELITEM_ARG(Planning_Unit,	W_PANEL_VALUE);	
	
	temp = PM_INIT_SET();
	
	/* 过滤掉不符合条件的阀件 */
	valve_number = PM_NR_MEMBERS_IN_SET(valves);
    
    nth = 0;
	for (i = 0; i < valve_number; i = i + 1;){
		valve = PM_GET_MEMBER_IN_SET(valves, i);			
		model_block_name = PM_GET_OBJDATA(valve,nth,Tag_BlockNumber);
		if(!ISSTRING(model_block_name)){
            supper_block_name = PM_GET_OBJDATA(valve,nth,Tag_SupperBlock);
            if(!ISSTRING(supper_block_name)){            
                model_block_name = "Unset";
            }
            else{
                model_block_name = supper_block_name;
            }			
		}	
		/*model_planning_unit = get_valve_planing_unit(valve);*/
        model_planning_unit = get_valve_planing_unit(valve);
		if(!ISSTRING(model_planning_unit)){
			model_planning_unit = "Unset";
		}
            
		check_block =  PATTERN_MATCH(model_block_name,block_name);
        check_planning = PATTERN_MATCH(model_planning_unit,planning_unit);
		
		if(check_block & check_planning){		
		   PM_ADD_OBJECT_TO_SET(valve,temp);
		}							
	}
	PM_SETOP_SUB(valves,valves);
	PM_SETOP_OR(valves,temp);
	PM_FREE_SET(temp);
	return(0);
}

get_valve_planing_unit(valve)
{
    find = 0;
    max = 10;
    node_id = 1;
    connected_node_id = 0;
    nth = 0;
    while(!find){
        obj = PM_GET_CONNECTED_OBJECT(valve,node_id,connected_node_id);
        if(!ISINT(obj)){
            planning_unit = PM_GET_OBJDATA(obj,nth,Tag_Spool_PlanningUnit);
            if(ISSTRING(planning_unit)){
                return(planning_unit);
            }
            else{
                node_id = node_id + 1;           
            }            
        }
        else{
            node_id = node_id + 1;        
        }
        if(node_id > max){
            find = 1;
        }
    }
    return("Unset");
}


filter_model( models )
{
	/* 获取过滤条件 Get filter conditions*/
	block_name    =	W_GET_PANELITEM_ARG(Block_Name,		W_PANEL_VALUE);
	planning_unit = W_GET_PANELITEM_ARG(Planning_Unit,	W_PANEL_VALUE);	
	
	temp = PM_INIT_SET();
	
	/* 过滤掉不符合条件的模型 */
	group_number = PM_NR_MEMBERS_IN_SET(models);
    nth = 0;
	for (i = 0; i < group_number; i = i + 1;){
		group_handle = PM_GET_MEMBER_IN_SET(models, i);	
		pipes = PM_GET_OBJECTS_IN_GROUP(group_handle);
		pipe = PM_GET_MEMBER_IN_SET(pipes,0);		
		model_block_name = PM_GET_OBJDATA(pipe,nth,Tag_BlockNumber);
		if(!ISSTRING(model_block_name)){
            supper_block_name = PM_GET_OBJDATA(pipe,nth,Tag_SupperBlock);
            if(!ISSTRING(supper_block_name)){
                model_block_name = "Unset";
            }
            else{
                model_block_name = supper_block_name;            
            }			
		}
      		
		model_planning_unit = Get_Attribute_Value(group_handle, Tag_Spool_PlanningUnit);
		if(!ISSTRING(model_planning_unit)){
			model_planning_unit = "Unset";
		}
            
		check_block =  PATTERN_MATCH(model_block_name,block_name);
		check_planning = PATTERN_MATCH(model_planning_unit,planning_unit);
		
		if(check_block & check_planning){		
		   PM_ADD_OBJECT_TO_SET(group_handle,temp);
		}							
	}
	PM_SETOP_SUB(models,models);
	PM_SETOP_OR(models,temp);
	PM_FREE_SET(temp);
	return(0);
}



options_selected(item, event_type, dummy)
{
	s = W_GET_PANELITEM_ARG(item, W_PANEL_VALUE);
	if ( s == "00" ){
		AutoHighLight = 0;
		AutoScale = 0;	
		/* 将已经加亮的模型恢复原来的颜色 */
		model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			Highlight_Object(model,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);	
		PM_FREE_SET(temp);		
	}
	else if( s == "10"){
		AutoHighLight = 1;
		AutoScale = 0;	
	}
	else if( s == "11"){
		AutoHighLight = 1;
		AutoScale = 1;	
	}
	else if( s == "01"){
		AutoHighLight = 0;
		AutoScale = 1;
		/* 将已经加亮的模型恢复原来的颜色 */
		model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			Highlight_Object(model,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);
		PM_FREE_SET(temp);
	}		
	return(0);
}



create_panel_upperpart(mainform)
{
	panel_upperpart = W_ADD_WINDOW(mainform, W_PANEL, "panel_upperpart");
	W_REALIZE_WINDOW(panel_upperpart,   W_FRAME_X, 0,
										W_FRAME_Y, 0,
										W_FRAME_ROWS, 2,
										W_FRAME_COLS, 70);
							                  					
	Block_Name = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Block_Name");
	W_REALIZE_PANELITEM(Block_Name,	W_PANEL_ROW, 0, 
									W_PANEL_COL, 0,
									W_PANEL_LABEL, "分段名称:     ",
									W_PANEL_LENGTH, 15,
									W_PANEL_VALUE, "*",
									W_PANEL_CALLBACK, 1);
							              
	Planning_Unit = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Planning_Unit");
	W_REALIZE_PANELITEM(Planning_Unit,  W_PANEL_ROW,      0, 
	                                    W_PANEL_COL,      28,
										W_PANEL_LABEL,    "托盘代号:     ",
										W_PANEL_LENGTH,   15,
										W_PANEL_VALUE,    "*",
										W_PANEL_CALLBACK, 3);
							            						                  							                							                  
	search_stru = W_ADD_PANELITEM(panel_upperpart, W_PANEL_BUTTON, "search_stru");
	W_REALIZE_PANELITEM(search_stru,	W_PANEL_ROW, 	      0, 
										W_PANEL_COL,         55,
										W_PANEL_BUTTONIMAGE, "查找", 
										W_PANEL_WIDTH,       8,
										W_PANEL_BUTTONVALUE, 210,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);	
							               
	pick_spool = W_ADD_PANELITEM(panel_upperpart, W_PANEL_BUTTON, "pick_spool");
	W_REALIZE_PANELITEM(pick_spool,	W_PANEL_ROW, 	      0, 
	                                W_PANEL_COL,         65,
									W_PANEL_BUTTONIMAGE, "点选", 
									W_PANEL_WIDTH,       8,
									W_PANEL_BUTTONVALUE, 210,
									W_PANEL_CALLBACK,    1,
                                    W_PANEL_SENSITIVITY, 0,
									W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);	


	report_type = W_ADD_PANELITEM(panel_upperpart, W_PANEL_CHOICE, "report_type");
	W_REALIZE_PANELITEM(report_type,	W_PANEL_ROW,            1, 
										W_PANEL_COL,            0,
										W_PANEL_LABEL,          "报表:  ",
										W_PANEL_CHOICESTRING,   "外场安装托盘表    ",
										W_PANEL_CHOICESTRING,   "附件材料表       ",
										W_PANEL_CHOICESTRING,   "附件明细表  ",
                                        W_PANEL_CHOICESTRING,   "紧固件托盘表  ",
										W_PANEL_ORDINALVALUE,   0,
										W_PANEL_CHOICESTYLE,    W_STYLE_PUSHBUTTONS,
										W_PANEL_CALLBACK,       1);
										   
	Options = W_ADD_PANELITEM(panel_upperpart, W_PANEL_TOGGLE, "options");
	W_REALIZE_PANELITEM(Options,    W_PANEL_ROW,            2, 
                                    W_PANEL_COL,            1,
                                    W_PANEL_LABEL,          "",
                                    W_PANEL_CHOICESTRING,   "加亮   ",
                                    W_PANEL_CHOICESTRING,   "缩放   ",
                                    W_PANEL_VALUE,          "11",
                                    W_PANEL_CHOICESTYLE,    W_STYLE_PUSHBUTTONS,
                                    W_PANEL_CALLBACK,       1);			
					 							 
	W_SET_PANELITEM_HANDLER(search_stru, "search_objects");
	W_SET_PANELITEM_HANDLER(Options, "options_selected");
	W_SET_PANELITEM_HANDLER(pick_spool, "pick_objects");
	W_SET_PANELITEM_HANDLER(report_type, "report_type_handler");
	
	return(panel_upperpart);
}



pick_objects(item, event_type, button_value)
{
 	tmp = 0;
	flag = TRUE;
	temp = PM_INIT_SET();
	while(flag){	
		pick_part = PM_PICK_OBJECT("请选择管段", tmp, "PIPE");
		if (!ISINT(pick_part)){
			groups_handle = PM_GET_OBJECT_GROUP(pick_part, 0);
			if (!ISINT(groups_handle)){
				PM_ADD_OBJECT_TO_SET(groups_handle,temp);
				Highlight_Object(groups_handle,TRUE);
			}
			else{
				PM_RM_OBJECT_FROM_SET(groups_handle,temp);
				Highlight_Object(groups_handle,FALSE);			
			}	
		}	
		else{
			flag = FALSE;		
		}
	}
		
	res = PM_SETOP_OR(Pspool_List,temp);
	
	Pspool_Number = PM_NR_MEMBERS_IN_SET(Pspool_List);
	
	if (Pspool_Number <= 0){
		PM_FREE_SET(temp);
		return 0;
	}
	
	/* 获取并发布生产信息 */
	PM_FREE_SET(temp);
	/* 获取并发布生产信息 */
	get_report1_info();
	get_report2_info();
	get_report3_info();
	publish_report_info();

	for (i = 0 ; i < Pspool_Number; i = i + 1){
		model = PM_GET_MEMBER_IN_SET(Pspool_List,i);
		Highlight_Object(model,FALSE);
	}
		
	return(0);
}



report_type_handler(item, event_type, selection)
{
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_DELETEROWS, -1); 
	if(selection == 0){
		Report_Type = 0;
		Grid_Column_Number = Report1_Column_Number;
		W_SET_WINDOW_ARGS(wobj,	W_LISTW_COLUMNS,	Grid_Column_Number);
		Set_Column_Title(wobj, Title1, Grid_Column_Number);
		if(Report1_Row_Number != 0){
			publish_report_info();
		}
	}
	else if(selection == 1){
		Report_Type = 1;
		Grid_Column_Number = Report2_Column_Number;
		W_SET_WINDOW_ARGS(wobj,	W_LISTW_COLUMNS,	Grid_Column_Number);
		Set_Column_Title(wobj, Title2, Grid_Column_Number);
		if(Report2_Row_Number != 0){
			publish_report_info();
		}
	}
	else if(selection == 2){
		Report_Type = 2;
		Grid_Column_Number = Report3_Column_Number;
		W_SET_WINDOW_ARGS(wobj,	W_LISTW_COLUMNS,	Grid_Column_Number);
		Set_Column_Title(wobj, Title3, Grid_Column_Number);
		if(Report3_Row_Number != 0){
			publish_report_info();
		}
	}
	else if(selection == 3){
		Report_Type = 3;
		Grid_Column_Number = Report4_Column_Number;
		W_SET_WINDOW_ARGS(wobj,	W_LISTW_COLUMNS,	Grid_Column_Number);
		Set_Column_Title(wobj, Title4, Grid_Column_Number);
		if(Report4_Row_Number != 0){
			publish_report_info();
		}
	}
	return(0);
}



create_panel_underpart(mainform)
{	
	panel_underpart = W_ADD_WINDOW(mainform, W_PANEL, "panel_underpart");
	W_REALIZE_WINDOW(panel_underpart,   W_FRAME_X, 0,
							            W_FRAME_Y, 0);

	Report_Template = W_ADD_PANELITEM(panel_underpart, W_PANEL_FILL, "Report_Template");
	W_REALIZE_PANELITEM(Report_Template,	W_PANEL_ROW,         21, 
											W_PANEL_COL,         0,
											W_PANEL_LABEL,       "报表模板:     ",
											W_PANEL_LENGTH,      52,
											W_PANEL_VALUE,       "*",
											W_PANEL_SENSITIVITY, 1,
											W_PANEL_CALLBACK,    1);

	select_template = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "select_template");
	W_REALIZE_PANELITEM(select_template,	W_PANEL_ROW, 	     21, 
											W_PANEL_COL,         63,
											W_PANEL_BUTTONIMAGE, "选择模板", 
											W_PANEL_WIDTH,       10,
											W_PANEL_BUTTONVALUE, 201,
											W_PANEL_CALLBACK,    1,
											W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);							                     

	Report_Path = W_ADD_PANELITEM(panel_underpart, W_PANEL_FILL, "Report_Path");
	W_REALIZE_PANELITEM(Report_Path,	W_PANEL_ROW,         22, 
										W_PANEL_COL,         0,
										W_PANEL_LABEL,       "报表路径:     ",
										W_PANEL_LENGTH,      52,
										W_PANEL_VALUE,       "*",
										W_PANEL_SENSITIVITY, 1,
										W_PANEL_CALLBACK,    1);	
							                     
	select_path = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "select_path");
	W_REALIZE_PANELITEM(select_path,	W_PANEL_ROW, 	     22, 
										W_PANEL_COL,         63,
										W_PANEL_BUTTONIMAGE, "选择路径", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 202,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);						                     
							                  
	export_report = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "export_report");
	W_REALIZE_PANELITEM(export_report,  W_PANEL_ROW, 	      23, 
	                                    W_PANEL_COL,         0,
										W_PANEL_BUTTONIMAGE, "导出报表", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 203,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);							    
														 							 
	model_browsing = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "model_browsing");
	W_REALIZE_PANELITEM(model_browsing, W_PANEL_ROW, 	     23, 
										W_PANEL_COL,         52,
										W_PANEL_BUTTONIMAGE, "模型浏览", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 204,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);
							 						 							 							 
	quit = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "quit");
	W_REALIZE_PANELITEM(quit,	W_PANEL_ROW, 	     23, 
								W_PANEL_COL,         63,
								W_PANEL_BUTTONIMAGE, "退出", 
								W_PANEL_WIDTH,       10,
								W_PANEL_BUTTONVALUE, 205,
								W_PANEL_CALLBACK,    1,
								W_PANEL_CLOSEBUTTON, 1,
								W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);	
							 
	W_SET_PANELITEM_HANDLER(quit, "quit_handler");
	W_SET_PANELITEM_HANDLER(model_browsing, "model_browsing_handler");
	W_SET_PANELITEM_HANDLER(export_report, "export_to_excel");
	W_SET_PANELITEM_HANDLER(select_path, "select_path_handler");
	W_SET_PANELITEM_HANDLER(select_template, "select_template_handler");
	W_SET_PANELITEM_HANDLER(Report_Path, "report_path_handler");
	
	return(panel_underpart);
}


report_path_handler(item, event_type, dummy)
{
	init_value = W_GET_PANELITEM_ARG(Report_Path,W_PANEL_VALUE);
	U_CONFIRM(init_value);
}






select_path_handler(item, event_type, dummy)
{
   path = U_GET_DIRECTORY("选择报表保存路径","C:/TEMP/","",0);
   if(ISSTRING(path)){
      W_SET_PANELITEM_ARGS(Report_Path,W_PANEL_VALUE,path+"/");
      SET_STRING_DEFAULT(DefaultModuleName,DefaultReportPath,path);
   }
}


select_template_handler(item, event_type, dummy)
{
   flag = 0;
   template = U_GET_FILENAME("请选择模板文件", "P:\\报表模板\\","管系内场托盘表模板.xlsx", "Excel File(*.xlsx)",2 ,flag);
   if(ISSTRING(template)){
      W_SET_PANELITEM_ARGS(Report_Template,W_PANEL_VALUE,template);
      SET_STRING_DEFAULT(DefaultModuleName,DefaultTemplatePath,template);
   }
}




export_to_excel(item, event_type, dummy)
{
	random_string = Get_Random_String();
	DataFileName = DataFilePath + "\\PipingReport_" + random_string + ".txt";
   
	if ( F_EXIST(DataFileName) ){
		check = F_DELETE_FILE(DataFileName);
		if (check == -1){
			U_MESSAGEBOX("请先关闭文件" + DataFileName, U_MB_ERROR, U_MB_OK, U_MB_OK);
			return(-1);
		}
	}
	
	flag = F_CREATE_FILE(DataFileName);
	if (flag == -1){
		U_CONFIRM("用户对文件:" + DataFileName + "所在路径没有写权限" );
		return(-1);
	}

	file = F_OPEN_FILE(DataFileName,"w");
	
	/* 获取模板文件 */
	unix_tmp_path = W_GET_PANELITEM_ARG(Report_Template,W_PANEL_VALUE);

	if(!F_EXIST(unix_tmp_path)){
		msg = "模板文件 <" + unix_tmp_path + "> 不存在";
		U_CONFIRM(msg);
		return(-1);
	}	
	
	/* 获取.NET程序路径 */
	unix_exe_path = SYS_GETENV("MarineToolkit") + "\\NET_Programs\\SDARI_Piping_Report.exe";

	/*获取报表文件(excel)名称*/
	U_INIT_DIALOG("请输入报表文件名称");
	name_f = U_SET_STR("Excel文件名:", "", 20);
	if(U_DIALOG() < 0){
		return(0);
	}
	doc_name = U_GET_STR(name_f);
	if(doc_name == ""){
		msg = "文件名不能为空";
		U_MESSAGEBOX(msg, U_MB_WARNING, U_MB_OK, U_OK);
		return(0);
	}
	
	/*获取报表文件的保存路径*/
	unix_rep_path = W_GET_PANELITEM_ARG(Report_Path,W_PANEL_VALUE);
	if(!F_EXIST(unix_rep_path)){
		msg = "路径 <" + unix_rep_path + "> 不存在";
		U_MESSAGEBOX(msg, U_MB_ERROR, U_MB_OK, U_OK);
		return(-1);
	}	
	
	unix_rep_file = unix_rep_path + "/" + doc_name + ".xlsx";
	
	win_tmp_path = S_REPLACE(unix_tmp_path, "/", "\\");
	win_exe_path = S_REPLACE(unix_exe_path, "/", "\\");
	win_rep_file = S_REPLACE(unix_rep_file, "/", "\\");
	
	write_to_temp_file(file);
	F_CLOSE_FILE(file);
	
	cmd = win_exe_path + " " + win_tmp_path + " " + DataFileName + " " + win_rep_file;
	SYS_EXEC_CMND(cmd);		
	
	return(0);
}


write_to_temp_file(file)
{   
	/*项目信息*/
	project_number = "H490000";
	planning_unit = "E41PA";
	drawing_number = "D00000001";
	info = "管系安装托盘表" + ",#" + project_number + ",#" + planning_unit + ",#" + drawing_number;
   	F_WRITE_STR(file,info);
   	F_WRITE_NEWLINE(file);	
	/* #4 - 从Excel表的第四行开始填数据
    ** #1 - 从Excel表的第一行开始填数据
    ** #9 - 总共9列数据
    */
	info = "Table,#外场安装托盘表" + ",#4,#1,#9";
   	F_WRITE_STR(file,info);
   	F_WRITE_NEWLINE(file);	 
	for(i=0;i<Report1_Row_Number;i=i+1;){
		info = "Line,#";
		for(k=0;k<Report1_Column_Number;k=k+1;){
			value = get_2darray(Report1_Info,i,k);
			info = info + value + ",#";	
		}
		F_WRITE_STR(file,info);
		F_WRITE_NEWLINE(file);	
	}
	
	info = "Table,#附件材料表" + ",#4,#1,#7";
   	F_WRITE_STR(file,info);
   	F_WRITE_NEWLINE(file);	

	for(i=0;i<Report2_Row_Number;i=i+1;){
		info = "Line,#";
		for(k=0;k<Report2_Column_Number;k=k+1;){
			value = get_2darray(Report2_Info,i,k);
			val = translate_value(value);
			info = info + val + ",#";	
		}
		F_WRITE_STR(file,info);
		F_WRITE_NEWLINE(file);	
	}

	info = "Table,#附件明细表" + ",#4,#1,#7";
   	F_WRITE_STR(file,info);
   	F_WRITE_NEWLINE(file);	

	for(i=0;i<Report3_Row_Number;i=i+1;){
		info = "Line,#";
		for(k=0;k<Report3_Column_Number;k=k+1;){
			value = get_2darray(Report3_Info,i,k);
			val = translate_value(value);
			info = info + val + ",#";	
		}
		F_WRITE_STR(file,info);
		F_WRITE_NEWLINE(file);	
	}

	info = "Table,#紧固件托盘表" + ",#4,#1,#6";
   	F_WRITE_STR(file,info);
   	F_WRITE_NEWLINE(file);	

	for(i=0;i<Report4_Row_Number;i=i+1;){
		info = "Line,#";
		for(k=0;k<Report4_Column_Number;k=k+1;){
			value = get_2darray(Report4_Info,i,k);
			val = translate_value(value);
			info = info + val + ",#";	
		}
		F_WRITE_STR(file,info);
		F_WRITE_NEWLINE(file);	
	}
	
	return(0);   
}

main()
{
	init();
	mainform  = create_top_frame();	
	Panel_upperpart = create_panel_upperpart(mainform);	
	DisplayGrid  = create_grid(mainform);
	Panel_underpart = create_panel_underpart(mainform);		
	initiate();
	MainWindow = mainform;
	
	
	W_MAP_FRAME(mainform);
	W_RUN_FRAME(mainform);
	W_UNMAP_FRAME(mainform);
	W_DESTROY_FRAME(mainform);
}




exit()
{
	/* 将已经加亮的模型恢复原来的颜色 */
	model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
	for (i = 0 ; i < model_number; i = i + 1){
		model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
		Highlight_Object(model,FALSE);
	}
	PM_FREE_SET(Pspool_List);
	PM_FREE_SET(High_Light_List);
	PM_FREE_SET(Selected_Objects);
	A_FREE(Report1_Objects);
}


/*
**将指定的模型自动放大到整个视口
*/
auto_scale(model_handle)
{
	next = 0;
	while (TRUE){
		source = "";
		status = 0;
		view_name = PM_GET_NAME_OF_NEXT_VIEW(source, next, status);
		if ( ISINT(view_name)){
			return(0);
		}
		else{
			if (status == 1){
				flag = 0;
				view_handle = PM_GET_HANDLE_OF_OPENED_VIEW(view_name,flag);
				if ( !ISINT(view_handle)){
					type = PM_GET_OBJDATA( model_handle, 0, MMT_TAG_OBJTYPE);
					if (type == MMT_OBT_GROUP){
						umin = 0;
						umax = 0;
						vmin = 0;
						vmax = 0;
						wmin = 0;
						wmax = 0;
						result = Get_Bbox_Of_Group_In_View(model_handle, view_handle, umin, umax, vmin, vmax, wmin, wmax);
						if ( result >= 0 ){
							PM_SET_VIEW_PARAMETERS(view_handle,"WINDOW",umin,umax, vmin,vmax);
						}
                        models = PM_GET_OBJECTS_IN_GROUP(model_handle);
                        if(!ISINT(models)){
                            PM_GET_BBOX_OF_SET(models,umin, umax, vmin, vmax, wmin, wmax);
                            x = (umin+umax)/2;
                            y = (vmin+vmax)/2;
                            z = (wmin+wmax)/2;
                            PM_SET_CURRENT_LOC(x,y,z);                        
                        }
					}
					else{
						umin = 0;
						umax = 0;
						vmin = 0;
						vmax = 0;
						wmin = 0;
						wmax = 0;
						result = PM_GET_BBOX_OF_OBJECT_IN_VIEW(model_handle, view_handle, umin, umax, vmin, vmax, wmin, wmax);
						if ( result >= 0){
							PM_SET_VIEW_PARAMETERS(view_handle,"WINDOW",umin,umax, vmin,vmax);
						}
                        PM_GET_BBOX_OF_OBJECT(model_handle,umin, umax, vmin, vmax, wmin, wmax);
                        x = (umin+umax)/2;
                        y = (vmin+vmax)/2;
                        z = (wmin+wmax)/2;
                        PM_SET_CURRENT_LOC(x,y,z);                        
					}
				}
			}
		}
	}
	return(0);
}



auto_scale_set(set)
{
	next = 0;
	while (TRUE){
		source = "";
		status = 0;
		view_name = PM_GET_NAME_OF_NEXT_VIEW(source, next, status);
		if ( ISINT(view_name)){
			return(0);
		}
		else{
			if (status == 1){
				flag = 0;
				view_handle = PM_GET_HANDLE_OF_OPENED_VIEW(view_name,flag);
				if ( !ISINT(view_handle)){
                    umin = 0;
                    umax = 0;
                    vmin = 0;
                    vmax = 0;
                    wmin = 0;
                    wmax = 0;
                    result = Get_Bbox_Of_Model_Set_In_View(set, view_handle, umin, umax, vmin, vmax, wmin, wmax);
                    if ( result >= 0 ){
                        PM_SET_VIEW_PARAMETERS(view_handle,"WINDOW",umin,umax,vmin,vmax);
                    }
                    PM_GET_BBOX_OF_SET(set,umin, umax, vmin, vmax, wmin, wmax);
                    x = (umin+umax)/2;
                    y = (vmin+vmax)/2;
                    z = (wmin+wmax)/2;
                    PM_SET_CURRENT_LOC(x,y,z);                        
				}
			}
		}
	}
	return(0);
}