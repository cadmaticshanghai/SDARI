/* $Id: PspoolProdInfo.mac,v1.0.0 2014/11/25 Wallis.liu $ */

/*
**  This script use to manage the production information of pipe spool
*/

#include "include/dmutil.h"
#include "include/win.h"
#include "include/win_panel.h"
#include "include/PmMgeTags.h"
#include "include/pm.h"
#include "include/pm_core_tags.h"
#include "include/array.mac"
#include "include/cos.h"
#include "include/geoutils.h"
#include "include/quants.h"
#include "include/dm_cos_schema.h"

#include "$MarineToolkit/Piping/PspoolProdInfo.h"
#include "$MarineToolkit/Include/Math_Utility.h"
#include "$MarineToolkit/Include/Common_Utility.h"
#include "$MarineToolkit/Include/String_Utility.h"
#include "$MarineToolkit/Include/Grid_Utility.h"
#include "$MarineToolkit/Include/Structural_Utility.h"
#include "$MarineToolkit/Include/Array_ext.h"

/*
**It seem that there isn't method to get the size of a array, define a global var to store the number of production information
*/
#define  Column_Number 14

global handle W_Block_Name, W_System_Name, W_Planning_Unit;
global handle W_Data_Grid;
global handle NULL_HANDLE = 0;
global int    Grid_SelectedItem = 0;
global int    Grid_SortColumn = -1;
global int    Grid_SortDirection = 1;
global handle Object_List;          	          		/*pipe spool handle array*/
global handle Tag_Array, Tag_Description_Array;
global handle Object_Info;				          	/*pipe spool production information array*/
global int    Object_Number = 0;				  		/*pipe spool number*/
global int    Model_Add_Mode = 0;                 	/*search object mode 0 - replace，1 - append*/
global handle High_Light_List;                    	/*highlighted object array*/
global handle Selected_Objects;
global int    Selected_Objects_Number = 0;
global int    AutoScale = 0;
global int    AutoHighLight = 1;
global handle MainWindow;
global int    Maximum_Object_Number = 1000;

global handle W_Search_Object;
global string Icon_My_Check_Out = "$Cadmatic_Toolkit/ICONS/mycheckout.ico";
global string Icon_Other_Check_Out = "$Cadmatic_Toolkit/ICONS/checkout.ico";
global string Icon_Local_Server = "$Cadmatic_Toolkit/ICONS/local_server.ico";
global string Icon_Replica_Check_Out = "$Cadmatic_Toolkit/ICONS/replica_checkout.ico";
global string Icon_Replica_Server = "$Cadmatic_Toolkit/ICONS/replica.ico";
global string Icon_Error = "$Cadmatic_Toolkit/ICONS/error.ico";
global handle Access_List;

/*
**initiate script
*/
init()
{
	Tag_Array = A_ALLOC(Column_Number, "STRING");
	A_PUT(Tag_Array,0,Tag_BlockNumber);
	A_PUT(Tag_Array,1,Tag_Spool_PlanningUnit);
	A_PUT(Tag_Array,2,Tag_Spool_Name);
	A_PUT(Tag_Array,3,Tag_Spool_Type);
	A_PUT(Tag_Array,4,Tag_Spool_PrevTreatment);
	A_PUT(Tag_Array,5,Tag_Spool_SurfTreatmentIn);
	A_PUT(Tag_Array,6,Tag_Spool_SurfTreatmentOut);
	A_PUT(Tag_Array,7,Tag_Spool_TestPressure);
	A_PUT(Tag_Array,8,Tag_Spool_GasketMaterial);
	A_PUT(Tag_Array,9,Tag_Spool_Insulation);
	A_PUT(Tag_Array,10,Tag_Spool_DrawingNumber);
	A_PUT(Tag_Array,11,Tag_Spool_Page);
	A_PUT(Tag_Array,12,Tag_Spool_TotalPage);
	A_PUT(Tag_Array,13,Tag_Spool_Remark);

	Tag_Description_Array = A_ALLOC(Column_Number, "STRING");
	A_PUT(Tag_Description_Array,0,"分段名称");
	A_PUT(Tag_Description_Array,1,"托盘编号");
	A_PUT(Tag_Description_Array,2,"管段名称");
	A_PUT(Tag_Description_Array,3,"管段类型");
	A_PUT(Tag_Description_Array,4,"预处理");
	A_PUT(Tag_Description_Array,5,"内表面处理");
	A_PUT(Tag_Description_Array,6,"外表面处理");
	A_PUT(Tag_Description_Array,7,"试验压力(MPa)");
	A_PUT(Tag_Description_Array,8,"垫片材料");
	A_PUT(Tag_Description_Array,9,"绝缘材料");
	A_PUT(Tag_Description_Array,10,"图号");
	A_PUT(Tag_Description_Array,11,"页码");
	A_PUT(Tag_Description_Array,12,"总页数");
	A_PUT(Tag_Description_Array,13,"备注");

	Object_Info = alloc_2darray(1,1);
	Access_List = A_ALLOC(1);
	Object_List = PM_INIT_SET();
	High_Light_List  = PM_INIT_SET();
	Selected_Objects = PM_INIT_SET();
}

model_list_mode(item, event_type, selection)
{
	if (selection == 0){
		Model_Add_Mode = 0;
	}
	else{
		Model_Add_Mode = 1;
	}
	return(0);
}

/*
**get pipe spools production information and store in array
*/
get_model_prod_info()
{
	A_FREE(Object_Info);
	Object_Info = alloc_2darray(Object_Number,Column_Number);
	A_FREE(Access_List);
	Access_List = A_ALLOC(Object_Number);
	for (i = 0; i < Object_Number; i = i + 1;){
		object_prod_info = "";
		object = PM_GET_MEMBER_IN_SET(Object_List, i);
		object_prod_info = Get_Production_Data(object, Tag_Array, Column_Number);
		for (n = 0; n < Column_Number; n = n + 1;){
			info = A_GET(object_prod_info, n);
			put_2darray(Object_Info, i, n, info);
		}
		access = Get_Object_Access_Status(object);
		A_PUT(Access_List,i,access);
	}
	return 0;
}

/*
**Create Top frame
*/
create_top_frame()
{
	mainform = W_INIT_FRAME();
    W_REALIZE_WINDOW(mainform,  W_FRAME_TITLE,      "管段生产信息",  
                                W_FRAME_RESIZABLE,  W_RESIZE_HORIZONTALLY);
	return(mainform);
}

/*
**Create grid(multi column list) for display production information of structure
*/
create_grid(main_form)
{
	wobj = W_ADD_WINDOW(main_form, W_MULTISELECT, "W_Data_Grid");

	W_REALIZE_WINDOW(wobj,  W_FRAME_RIGHT_OF,       "W_Block_Name",
						    W_FRAME_BELOW,          "panel_upperpart",
						    W_LISTW_COLUMNS,        Column_Number,
						    W_FRAME_SCROLLBAR,      W_SCROLLBAR_RIGHTEDGE,
						    W_LISTW_HEADER_MODE,    W_LISTW_HEADER_BUTTONS,
						    W_FRAME_RESIZABLE,      W_RESIZE_HORIZONTALLY,
						    W_LISTW_MODE_REPORT,    0,
						    W_FRAME_COLS,           73, 
						    W_FRAME_ROWS,           17,
						    W_LISTW_CALLBACK,       1);
	W_SET_WINDOW_HANDLER(wobj, "grid_handler");

	/*
	**set the column title of grid
	*/
	Set_Column_Title(wobj, Tag_Description_Array, Column_Number);
	return(wobj);
}


quit_handler(item, event_type, button_value)
{
	exit();
	U_MESSAGE("退出管段生产信息窗口");
	return(99);
}


grid_handler(window, event_type, row, column, item_id)
{
	if (event_type == W_EVENT_ITEM_SELECTED) {
		/* handle list sort */
		if (row < 0 & column >= 0) {
			sort_grid(column,window);
		}
		else if(row >= 0 & column == 0){
			Get_Selected_Items(W_Data_Grid,Object_List,Selected_Objects,Selected_Objects_Number);
			Auto_Highlight(AutoHighLight, High_Light_List, Selected_Objects);
			Auto_Scale_Model(AutoScale, Selected_Objects);
		}
	}
	/* handle double click event */
	else if (event_type == W_EVENT_ITEM_DOUBLECLICKED) {
		Get_Selected_Items(W_Data_Grid,Object_List,Selected_Objects,Selected_Objects_Number);
		Auto_Highlight(AutoHighLight, High_Light_List, Selected_Objects);
		Auto_Scale_Model(AutoScale, Selected_Objects);
		modify_info_handler(0, 0, 0);
	}
	return(0);
}

sort_grid(column,window)
{
	/* A column header was clicked; sort the items */
	if (Grid_SortColumn == column) {
		if (Grid_SortDirection == 0) {
			Grid_SortDirection = 1;
		}
		else {
			Grid_SortDirection = 0;
		}
	}
	else {
		Grid_SortDirection = 1;
	}
	Grid_SortColumn = column;
	W_SET_WINDOW_ARGS(window, W_LISTW_COLUMN, column, W_LISTW_SORT, Grid_SortDirection);
}

/*
**Restore the default value of the PDM attribute of all the item selected in the grid.
*/
restore_default_handler(item, event_type, button_value)
{
	/* check if already select objects in list */
	spool_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
	if (spool_number <= 0){
		U_CONFIRM("请先选择管段");
		return(0);
	}

	/* restore selected pipe spools's production information to default value */
	for (i = 0; i < spool_number; i = i + 1){
		spool = PM_GET_MEMBER_IN_SET(Selected_Objects, i);
		spool_name = PM_GET_OBJDATA(spool,0,Tag_Spool_Name);
		access = Get_Object_Access_Status(spool);
		if(access == "CheckOutByMe"){
			Set_Def_Production_Data( spool, Tag_Array, Column_Number);		
		}
		else{
			mess = "你没有管段<" + spool_name + ">的修改权限";
			U_CONFIRM(mess);		
		}
		
	}

	/* refresh pipe spools's production information list */
	get_model_prod_info();
	publish_spool_info();
	/*
	Publish_Data(W_Data_Grid,Object_Number,Column_Number,Grid_SortColumn,Grid_SortDirection,Object_Info);
	*/
}

/*
**Modify selected items.
*/
modify_info_handler(item, event_type, button_value)
{
	/* check if already select objects in list */
	spool_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
	if (spool_number <= 0){
		U_CONFIRM("请先选择管段");
		return(0);
	}

	/* get column number of item that will be modified */
	si = 1;
	s = DM_CALL_SCRIPT("macro/Select.mac","U_Select","选择要修改的生产信息",Column_Number,Tag_Description_Array,si);
	if ( s < 0 ){
		return(0);
	}

	attribute_tag = A_GET( Tag_Array, s);
	attribute_name = A_GET( Tag_Description_Array, s);

	/* get new value */
	U_INIT_DIALOG(" 请输入新的属性值 ");
	dialog_handle = U_SET_STR(attribute_name,"",25);
	if( U_DIALOG() < 0 ){
		U_CONFIRM("取消");
		return(0);
	}
	new_val = U_GET_STR(dialog_handle);
	if (new_val == ""){
		U_CONFIRM("输入为空值");
		return(0);
	}

	/* assign new value to selected objects */
	for (i = 0; i < spool_number; i = i + 1){
		spool = PM_GET_MEMBER_IN_SET(Selected_Objects, i);
		spool_name = PM_GET_OBJDATA(spool,0,Tag_Spool_Name);
		access = Get_Object_Access_Status(spool);
		if(access == "CheckOutByMe"){
			Set_Attribute_Value(spool, attribute_tag, new_val);		
			if(attribute_tag == Tag_Spool_Type){
				add_or_remove_extra_length(spool);
			}
		}
		else{
			mess = "你没有管段<" + spool_name + ">的修改权限";
			U_CONFIRM(mess);		
		}
	}
	
	/* refresh data grid */
	get_model_prod_info();
	publish_spool_info();
	/*
	Publish_Data(W_Data_Grid,Object_Number,Column_Number,Grid_SortColumn,Grid_SortDirection,Object_Info);
	*/
	temp = PM_INIT_SET();
	Selected_Objects = PM_COPY_SET(temp);
	PM_FREE_SET(temp);

}


add_or_remove_extra_length(spool)
{
	spool_type = PM_GET_OBJDATA(spool,0,Tag_Spool_Type);
	extra_start = PM_FIND_BY_NAME(".Extra Length At Start");
	extra_end = PM_FIND_BY_NAME(".Extra Length At End");
	
	pipes = PM_GET_OBJECTS_IN_GROUP(spool);
	pipe_number = PM_NR_MEMBERS_IN_SET(pipes);
	if(spool_type != "PRE"){		
		if(pipe_number == 1){
			pipe = PM_GET_MEMBER_IN_SET(pipes,0);
			add_extra_length(pipe);	
		}
		else{
			pipe = PM_GET_MEMBER_IN_SET(pipes,0);
			mas0 = PM_GET_OBJDATA(pipe,0,"MAS");
			for(i=1;i<pipe_number;i=i+1;){
				pipe1 = PM_GET_MEMBER_IN_SET(pipes,i);
				mas1 = PM_GET_OBJDATA(pipe1,0,"MAS");
				if(mas1>mas0){	
					pipe = pipe1;
					mas0 = mas1;
				}
			}
			add_extra_length(pipe);		
		}				
	}
	else{		
		for(i=0;i<pipe_number;i=i+1;){
			pipe = PM_GET_MEMBER_IN_SET(pipes,i);
			part_number = PM_NR_PARTS_IN_PIPE(pipe);
			for(k=0;k<part_number;k=k+1;){
				part_sequence = k+1;
				part_id = PM_GET_OBJDATA(pipe, part_sequence, "pid");
				gty = DM_PARTID_DATA(part_id,"GT");
				if(gty == "1"){
					extra = PM_GET_OBJDATA(pipe, part_sequence, "el1");
					if(!ISINT(extra)){					
						res = PM_DEASSIGN_ATTRIBUTE(extra_start,pipe,part_sequence);
					}
					extra = PM_GET_OBJDATA(pipe, part_sequence, "el2");
					if(!ISINT(extra)){					
						res = PM_DEASSIGN_ATTRIBUTE(extra_end,pipe,part_sequence);	
					}										
				}				
			}		
		}	
	}
}

add_extra_length(pipe)
{
	extra_start = PM_FIND_BY_NAME(".Extra Length At Start");
	extra_end = PM_FIND_BY_NAME(".Extra Length At End");	
	part_number = PM_NR_PARTS_IN_PIPE(pipe);
	find_start = 0;
	sequence = 1;
	while(!find_start){
		part_id = PM_GET_OBJDATA(pipe,sequence,"pid");
		gty = DM_PARTID_DATA(part_id,"GT");
		if(gty == "1"){
			res = PM_ASSIGN_ATTRIBUTE(extra_start,pipe,sequence,50);
			find_start = 1;
		}
		sequence = sequence + 1;
		if(sequence > part_number){		
			find_start = 1;
		}	
	}
	find_end = 0;
	sequence = part_number;
	while(!find_end){
		part_id = PM_GET_OBJDATA(pipe,sequence,"pid");
		gty = DM_PARTID_DATA(part_id,"GT");
		if(gty == "1"){
			res = PM_ASSIGN_ATTRIBUTE(extra_end,pipe,sequence,50);		
			find_end = 1;
		}
		sequence = sequence - 1;
		if(sequence == 0){		
			find_end = 1;
		}	
	}		
}

/*
**Merge selected spools to one spool.
*/
merge_spools_handler(item, event_type, button_value)
{
	/* check if alread select grid item */
	spool_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
	if (spool_number <= 1){
		U_CONFIRM("请先选择要合并的管段");
		return(0);
	}
	
	/*获取主管段及检查权限*/
	main_spool = PM_GET_MEMBER_IN_SET(Selected_Objects, 0);
	spool_name = PM_GET_OBJDATA(main_spool,0,Tag_Spool_Name);
	access = Get_Object_Access_Status(main_spool);
	if(access != "CheckOutByMe"){
		mess = "你没有主管段<" + spool_name + ">的修改权限";
		U_CONFIRM(mess);		
		return(0);
	}
	
	/*检查其他管段的写权限*/	
	for(i=1;i<spool_number;i=i+1){
		spool = PM_GET_MEMBER_IN_SET(Selected_Objects, i);
		spool_name = PM_GET_OBJDATA(spool,0,Tag_Spool_Name);
		access = Get_Object_Access_Status(spool);
		if(access != "CheckOutByMe"){
			mess = "你没有管段<" + spool_name + ">的修改权限";
			U_CONFIRM(mess);			
			return(0);
		}		
	}
	
	/*将其它管段合并到主管段并删除对应的管段*/
	spools_member = PM_INIT_SET();
	for(i=1;i<spool_number;i=i+1){
		spool = PM_GET_MEMBER_IN_SET(Selected_Objects, i);
		spool_name = PM_GET_OBJDATA(spool,0,Tag_Spool_Name);
		/* 将管段从相关的模型集中移除 */
		res = PM_RM_OBJECT_FROM_SET(spool,Object_List);
		if(res == 0){
			Object_Number = Object_Number - 1;
		}
		res = PM_RM_OBJECT_FROM_SET(spool,High_Light_List);
		if(res == 0){
			Highlight_Object(spool,FALSE);
		}
		
		spool_member = PM_GET_OBJECTS_IN_GROUP(spool);
		PM_SETOP_OR(spools_member,spool_member);
		PM_RM_SET_FROM_GROUP(spool_member,spool);
		res = PM_DELETE_OBJECT(spool);
		if(res<0){
			mess = "管段<" + spool_name + ">删除失败";
			U_MESSAGE(mess);
		}
	}

	PM_ADD_SET_TO_GROUP(spools_member,main_spool);

	PM_FREE_SET(spools_member);

	PM_SETOP_SUB(Selected_Objects,Selected_Objects);
	/* refresh data grid */
	get_model_prod_info();
	publish_spool_info();
}

/*
**Merge selected spools to one spool.
*/
access_right_handler(item, event_type, button_value)
{
	/* check if already select grid item */
	spool_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
	if (spool_number < 1){
		U_CONFIRM("请先选择要检查权限的管段");
	return(0);
	}

	for(i=0;i<spool_number;i=i+1){
		spool = PM_GET_MEMBER_IN_SET(Selected_Objects, i);
		PM_SHOW_COS_PROPERTIES(spool,0);
	}
}

/*
*delete selected spool.
*/
delete_spools_handler(item, event_type, button_value)
{
	/* 检查是否已经选择模型 */
	selected_spool_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
	if (selected_spool_number < 1){
		U_CONFIRM("请先选择要删除的管段");
		return(0);
	}
	else{
		for(i=0;i<selected_spool_number;i=i+1;){
			spool = PM_GET_MEMBER_IN_SET(Selected_Objects, i);
			spool_name = PM_GET_OBJDATA(spool,0,Tag_Spool_Name);
			access = Get_Object_Access_Status(spool);
			if(access != "CheckOutByMe"){
				mess = "你没有管段<" + spool_name + ">的修改权限";
				U_CONFIRM(mess);
			}
			else{
				/* 将管段从相关的模型集中移除 */
				res = PM_RM_OBJECT_FROM_SET(spool,Object_List);
				if(res == 0){
					Object_Number = Object_Number - 1;
				}
				res = PM_RM_OBJECT_FROM_SET(spool,High_Light_List);
				if(res == 0){
					Highlight_Object(spool,FALSE);
				}
				
				/*将管段包含的零件从管段中移除*/
				spool_member = PM_GET_OBJECTS_IN_GROUP(spool);
				PM_RM_SET_FROM_GROUP(spool_member,spool);
				/*删除管段*/
				res = PM_DELETE_OBJECT(spool);
				if(res<0){
					mess = "管段<" + spool_name + ">删除失败";
					U_MESSAGE(mess);
					res = PM_ADD_OBJECT_TO_SET(spool,Object_List);
					if(res == 0){
						Object_Number = Object_Number + 1;
					}
				}
			}	
		}	
	}
	
	PM_SETOP_SUB(Selected_Objects,Selected_Objects);
	get_model_prod_info();
	publish_spool_info();
}

model_browsing_handler(item, event_type, button_value)
{
	W_UNMAP_FRAME(MainWindow);
	/*
	selected_spool_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
	if (selected_spool_number > 0){
		current_model = PM_GET_MEMBER_IN_SET(High_Light_List, 0);
		parts = PM_GET_OBJECTS_IN_GROUP(current_model);
		part = PM_GET_MEMBER_IN_SET( parts, 0);
		x0 = PM_GET_OBJDATA(part, 0, MMT_TAG_COGX);
		y0 = PM_GET_OBJDATA(part, 0, MMT_TAG_COGY);
		z0 = PM_GET_OBJDATA(part, 0, MMT_TAG_COGZ);
		x = SCAN_QUANT(1,x0);
		y = SCAN_QUANT(1,y0);
		z = SCAN_QUANT(1,z0);
		PM_SET_CURRENT_LOC(x, y, z);
	}
	*/
	nth_part = 0;
	PM_PICK_OBJECT("浏览模型",nth_part);
	W_MAP_FRAME(MainWindow);
}


search_objects(item, event_type, button_value)
{
	/* query all model groups*/
	query = PM_INIT_QUERY("GROUP");
	groups = PM_EXECUTE_QUERY(query);

	/* Get the pipe spool group */
	temp_list = PM_INIT_SET();

	if (!ISINT(groups)){
		group_number = PM_NR_MEMBERS_IN_SET(groups);
		for (i = 0; i < group_number; i = i + 1;){
			group_handle = PM_GET_MEMBER_IN_SET(groups, i);
			group_type = PM_GET_OBJDATA(group_handle, 0, MMT_TAG_GROUPTYPE);
			/* Get rid of other type group*/
 			if (group_type == "0"){
				/* Get rid of group that contain nothing */
				parts = PM_GET_OBJECTS_IN_GROUP(group_handle);
				if (parts != 0){
					part_number = PM_NR_MEMBERS_IN_SET(parts);
					if (part_number !=0){
						/* Get rid of standard component*/
						if (part_number == 1){
							part = PM_GET_MEMBER_IN_SET(parts, 0);
							part_type = PM_GET_OBJDATA(part, 0, MMT_TAG_OBJTYPE);
							if(part_type != MMT_OBT_STANDC){
								result = PM_ADD_OBJECT_TO_SET(group_handle,temp_list);
							}
						}
						else{
							/* save result to set */
							result = PM_ADD_OBJECT_TO_SET(group_handle,temp_list);
						}
					}
				}
			}
		}
	}

	spool_number = PM_NR_MEMBERS_IN_SET(temp_list);
	if (spool_number <= 0){
		return 0;
	}
   
	filter_model(temp_list);

	/* add the search result to the result set according to the  */
	if (Model_Add_Mode == 0){
		PM_SETOP_OR(Object_List,temp_list);
	}

	if (Model_Add_Mode == 1){
        PM_FREE_SET(Object_List);
        Object_List = PM_INIT_SET();
		Object_List = PM_COPY_SET(temp_list);
	}

	Object_Number = PM_NR_MEMBERS_IN_SET(Object_List);

	if (Object_Number <= 0){
		PM_FREE_SET(temp_list);
		return 0;
	}

	PM_FREE_SET(temp_list);
	/* get pipe spool production information */
	get_model_prod_info();
	publish_spool_info();
	/*
	Publish_Data(W_Data_Grid,Object_Number,Column_Number,Grid_SortColumn,Grid_SortDirection,Object_Info);
	*/
}

publish_spool_info()
{
	/* Delete all the data in grid */	
	W_SET_WINDOW_ARGS(W_Data_Grid, W_LISTW_ROW, 0);
	W_SET_WINDOW_ARGS(W_Data_Grid, W_LISTW_DELETEROWS, -1);
	/* display part information in grid*/ 
	for (i = 0; i < Object_Number; i = i + 1;){
	    /* set current row and column*/
		W_SET_WINDOW_ARGS(W_Data_Grid, W_LISTW_ROW, 0);
		W_SET_WINDOW_ARGS(W_Data_Grid, W_LISTW_INSERTROWS, 1);
		/*set access status flag of group*/
		flag = A_GET(Access_List,i);
		icon = Icon_My_Check_Out;
		if(flag == "Local"){
		   icon = Icon_Local_Server;
		}
		else if(flag == "CheckOutByMe"){
		   icon = Icon_My_Check_Out;
		}
		else if(flag == "CheckOutByOther"){
		   icon = Icon_Other_Check_Out;
		}
		else if(flag == "Replica"){
		   icon = Icon_Replica_Server;
		}
		else if(flag == "CheckOutByReplicaUser"){
		   icon = Icon_Replica_Check_Out;
		}
		else{
		   icon = Icon_Error;
		}
		W_SET_WINDOW_ARGS(W_Data_Grid, W_LISTW_ROW, 0, W_LISTW_COLUMN, 0, W_LISTW_ICON, icon );
		for ( j = 0; j < Column_Number; j = j + 1;){
			Value = get_2darray(Object_Info,i,j);
			if (ISSTRING(Value)){
				W_SET_WINDOW_ARGS(W_Data_Grid, W_LISTW_ROW, 0, W_LISTW_COLUMN, j, W_LISTW_STRING, Value);
			}
			else if(ISFLOAT(Value)){
			    W_SET_WINDOW_ARGS(W_Data_Grid, W_LISTW_ROW, 0, W_LISTW_COLUMN, j, W_LISTW_STRING, FTOASCII(Value));
			}
			else if(ISINT(Value)){
			    W_SET_WINDOW_ARGS(W_Data_Grid, W_LISTW_ROW, 0, W_LISTW_COLUMN, j, W_LISTW_STRING, ITOASCII(Value));
			}
		}		
		W_SET_WINDOW_ARGS(W_Data_Grid, W_LISTW_ITEMID, i);		
	}
	
	W_SET_WINDOW_ARGS(W_Data_Grid, W_LISTW_ROW, 1);
	
	/* Adjust the width of column automatically*/
	for (i=0; i < Column_Number; i = i + 1;){
		W_SET_WINDOW_ARGS(W_Data_Grid, W_LISTW_COLUMN, i, W_LISTW_COLUMNWIDTH, -1);
	}
	
	/* sort grid */
	W_SET_WINDOW_ARGS(W_Data_Grid, W_LISTW_COLUMN, Grid_SortColumn, W_LISTW_SORT, Grid_SortDirection);
}

filter_model( models )
{
	/* Get filter conditions*/
	system_name = W_GET_PANELITEM_ARG(W_System_Name,W_PANEL_VALUE);
	block_name =  W_GET_PANELITEM_ARG(W_Block_Name,W_PANEL_VALUE);
	planning_unit =  W_GET_PANELITEM_ARG(W_Planning_Unit,W_PANEL_VALUE);

	temp = PM_INIT_SET();

	group_number = PM_NR_MEMBERS_IN_SET(models);
	for (i = 0; i < group_number; i = i + 1;){
		group_handle = PM_GET_MEMBER_IN_SET(models, i);
		parts = PM_GET_OBJECTS_IN_GROUP(group_handle);
		part_number = PM_NR_MEMBERS_IN_SET(parts);
		find = 0;
		sequence = 0;
		while(!find){
			part = PM_GET_MEMBER_IN_SET(parts,sequence);
			part_type = PM_GET_OBJDATA(part,0,MMT_TAG_OBJTYPE);
			if(part_type == "2" | part_type == "3"){
				find=1;
			}
			sequence = sequence + 1;
		}
		
		model_system_name = PM_GET_OBJDATA(part,0,MMT_TAG_SYSTEM_NAME);
		model_block_name = PM_GET_OBJDATA(part,0,Tag_BlockNumber);
		if(ISINT(model_block_name)){
			model_block_name = PM_GET_OBJDATA(part,0,Tag_SupperBlock);
		}
		if(!ISSTRING(model_block_name)){
		   model_block_name = "";
		}
		model_planning_unit = PM_GET_OBJDATA(part,0,Tag_Spool_PlanningUnit);
		if(!ISSTRING(model_planning_unit)){
		   model_planning_unit = "";
		}

		check_system = PATTERN_MATCH(model_system_name,system_name);
		check_block = PATTERN_MATCH(model_block_name,block_name);
		check_planning_unit = PATTERN_MATCH(model_planning_unit,planning_unit);
						
		if(check_system & check_block & check_planning_unit){
		   PM_ADD_OBJECT_TO_SET(group_handle,temp);
	   }
	}
	PM_SETOP_SUB(models,models);
	PM_SETOP_OR(models,temp);
	PM_FREE_SET(temp);
	return(0);
}


get_spool_handle(part)
{
	spool_number = PM_GET_OBJDATA(part, 0, MMT_COSA_SPOOL_NAME);
	if(spool_number ==0 ){
		U_CONFIRM("选择的零件不属于任何管段");
		return(0);
	}
	line_name = PM_GET_OBJDATA(part, 0, MMT_TAG_PIPELINE_NAME);
	member_path = PM_GET_OBJDATA(part, 0, MMT_TAG_MEMBERSHIPPATH);
	group_id = SUBSTRING(STRINGTERM(SEARCH(member_path,"@"),":"),1);
	obj_handle = PM_FIND_BY_OBJID(group_id);
	return(obj_handle);
}

pick_objects(item, event_type, button_value)
{
 	tmp = 0;
	flag = TRUE;
	temp = PM_INIT_SET();
	while(flag){
		pick_part = PM_PICK_OBJECT("请选择管段", tmp, "PIPE");
		if (pick_part != 0){
			groups_handle = get_spool_handle(pick_part);
			if (!ISINT(groups_handle)){
				PM_ADD_OBJECT_TO_SET(groups_handle,temp);
				Highlight_Object(groups_handle,TRUE);
			}
			else{
				PM_RM_OBJECT_FROM_SET(groups_handle,temp);
				Highlight_Object(groups_handle,FALSE);
			}
		}
		else{
			flag = FALSE;
		}
	}

	if (Model_Add_Mode == 0){
		PM_SETOP_OR(Object_List,temp);
	}

	if (Model_Add_Mode == 1){
	   PM_FREE_SET(Object_List);
		Object_List = PM_INIT_SET();
		Object_List = PM_COPY_SET(temp);
	}

	PM_FREE_SET(temp);

	Object_Number = PM_NR_MEMBERS_IN_SET(Object_List);
	if (Object_Number <= 0){
		return 0;
	}

	/* 获取并发布生产信息 */
	get_model_prod_info();
	publish_spool_info();
	/*
	Publish_Data(W_Data_Grid,Object_Number,Column_Number,Grid_SortColumn,Grid_SortDirection,Object_Info);
	*/
	for (i = 0; i < Object_Number; i = i + 1;){
		group = PM_GET_MEMBER_IN_SET(Object_List, i);
		Highlight_Object(group,FALSE);
	}

	return(0);
}


options_selected(item, event_type, dummy)
{
	s = W_GET_PANELITEM_ARG(item, W_PANEL_VALUE);
	if ( s == "00" ){
		AutoHighLight = 0;
		AutoScale = 0;
		/* 将已经加亮的模型恢复原来的颜色 */
		spool_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < spool_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			Highlight_Object(model,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);
		PM_FREE_SET(temp);
	}
	else if( s == "10"){
		AutoHighLight = 1;
		AutoScale = 0;
	}
	else if( s == "11"){
		AutoHighLight = 1;
		AutoScale = 1;
	}
	else if( s == "01"){
		AutoHighLight = 0;
		AutoScale = 1;
		/* 将已经加亮的模型恢复原来的颜色 */
		spool_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < spool_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			Highlight_Object(model,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);
		PM_FREE_SET(temp);
	}
	return(0);
}

clean_info_handler(item, event_type, button_value)
{
	W_SET_WINDOW_ARGS(W_Data_Grid, W_LISTW_ROW, 0);
	W_SET_WINDOW_ARGS(W_Data_Grid, W_LISTW_DELETEROWS, -1);
	Object_Number = 0;
	Object_List = PM_INIT_SET();
}

create_panel_upperpart(mainform)
{
	panel_upperpart = W_ADD_WINDOW(mainform, W_PANEL, "panel_upperpart");
	W_REALIZE_WINDOW(panel_upperpart,   W_FRAME_X,     0,
							            W_FRAME_Y,     0,
							            W_FRAME_ROWS,  2,
							            W_FRAME_COLS,  70);

	W_Block_Name = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "W_Block_Name");
	W_REALIZE_PANELITEM(W_Block_Name,  W_PANEL_ROW,      0, 
	                                   W_PANEL_COL,      0,
							           W_PANEL_LABEL,    "分段名称:     ",
							           W_PANEL_LENGTH,   15,
							           W_PANEL_VALUE,    "*",
							           W_PANEL_CALLBACK, 1);

	W_System_Name = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "W_System_Name");
	W_REALIZE_PANELITEM(W_System_Name, W_PANEL_ROW,      0, 
	                                   W_PANEL_COL,      28,
							           W_PANEL_LABEL,    "系统名称:     ",
							           W_PANEL_LENGTH,   15,
							           W_PANEL_VALUE,    "*",
							           W_PANEL_CALLBACK, 2);

	W_Search_Object = W_ADD_PANELITEM(panel_upperpart, W_PANEL_BUTTON, "W_Search_Object");
	W_REALIZE_PANELITEM(W_Search_Object,  W_PANEL_ROW, 	      0, 
	                                      W_PANEL_COL,         55,
							              W_PANEL_BUTTONIMAGE, "查找",
							              W_PANEL_WIDTH,       15,
							              W_PANEL_BUTTONVALUE, 210,
							              W_PANEL_CALLBACK,    1,
							              W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);

	W_Planning_Unit = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "W_Planning_Unit");
	W_REALIZE_PANELITEM(W_Planning_Unit,  W_PANEL_ROW,      1, 
	                                      W_PANEL_COL,      0,
							              W_PANEL_LABEL,    "托盘编号:     ",
							              W_PANEL_LENGTH,   15,
							              W_PANEL_VALUE,    "*",
							              W_PANEL_CALLBACK, 3);

	Pick_Object = W_ADD_PANELITEM(panel_upperpart, W_PANEL_BUTTON, "Pick_Object");
	W_REALIZE_PANELITEM(Pick_Object, W_PANEL_ROW, 	      1, 
	                                 W_PANEL_COL,         55,
							         W_PANEL_BUTTONIMAGE, "点选",
							         W_PANEL_WIDTH,       15,
							         W_PANEL_BUTTONVALUE, 210,
							         W_PANEL_CALLBACK,    1,
							         W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);

	element_add_flag = W_ADD_PANELITEM(panel_upperpart, W_PANEL_CHOICE, "element_add_flag");
	W_REALIZE_PANELITEM(element_add_flag,  W_PANEL_ROW,            2, 
	                                       W_PANEL_COL,            0,
							               W_PANEL_LABEL,          "模型信息列表模式:      ",
							               W_PANEL_CHOICESTRING,   "追加  ",
							               W_PANEL_CHOICESTRING,   "替换  ",
							               W_PANEL_ORDINALVALUE,   0,
							               W_PANEL_CHOICESTYLE,	   W_STYLE_PUSHBUTTONS,
							               W_PANEL_CALLBACK,       1);

	Options = W_ADD_PANELITEM(panel_upperpart, W_PANEL_TOGGLE, "options");
	W_REALIZE_PANELITEM(Options,  W_PANEL_ROW,            2, 
	                              W_PANEL_COL,            50,
							      W_PANEL_LABEL,          "",
							      W_PANEL_CHOICESTRING,   "自动加亮    ",
							      W_PANEL_CHOICESTRING,   "自动缩放    ",
							      W_PANEL_VALUE,          "10",
							      W_PANEL_CHOICESTYLE,	   W_STYLE_PUSHBUTTONS,
							      W_PANEL_CALLBACK,       1);

	W_SET_PANELITEM_HANDLER(W_Search_Object, "search_objects");
	W_SET_PANELITEM_HANDLER(Pick_Object, "pick_objects");
	W_SET_PANELITEM_HANDLER(element_add_flag, "model_list_mode");
	W_SET_PANELITEM_HANDLER(Options, "options_selected");

	return(panel_upperpart);
}

create_panel_underpart(mainform)
{
	panel_underpart = W_ADD_WINDOW(mainform, W_PANEL, "panel_underpart");
	W_REALIZE_WINDOW(panel_underpart,   W_FRAME_X, 0,
							            W_FRAME_Y, 0);

	modify_info = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "modify_info");
	W_REALIZE_PANELITEM(modify_info, W_PANEL_ROW,         21, 
	                                 W_PANEL_COL,         0,
							         W_PANEL_BUTTONIMAGE, "修改信息", 
							         W_PANEL_WIDTH,       10,
							         W_PANEL_BUTTONVALUE, 200,
							         W_PANEL_CALLBACK,    1,
							         W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);

	restore_default = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "restore_default");
	W_REALIZE_PANELITEM(restore_default,   W_PANEL_ROW, 	      21, 
	                                       W_PANEL_COL,         12,
							               W_PANEL_BUTTONIMAGE, "恢复默认值", 
							               W_PANEL_WIDTH,       10,
							               W_PANEL_BUTTONVALUE, 201,
							               W_PANEL_CALLBACK,    1,
							               W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);

	clean_info = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "clean_info");
	W_REALIZE_PANELITEM(clean_info,  W_PANEL_ROW, 	      21, 
	                                 W_PANEL_COL,         24,
							         W_PANEL_BUTTONIMAGE, "清空信息", 
							         W_PANEL_WIDTH,       10,
							         W_PANEL_BUTTONVALUE, 202,
							         W_PANEL_CALLBACK,    1,
							         W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);

	model_browsing = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "model_browsing");
	W_REALIZE_PANELITEM(model_browsing,    W_PANEL_ROW, 	      21, 
	                                       W_PANEL_COL,         36,
							               W_PANEL_BUTTONIMAGE, "模型浏览", 
							               W_PANEL_WIDTH,       10,
							               W_PANEL_BUTTONVALUE, 202,
							               W_PANEL_CALLBACK,    1,
							               W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);
							                     
	access_right = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "access_right");
	W_REALIZE_PANELITEM(access_right,   W_PANEL_ROW,         21, 
	                                    W_PANEL_COL,         48,
							            W_PANEL_BUTTONIMAGE, "显示权限", 
							            W_PANEL_WIDTH,       10,
							            W_PANEL_BUTTONVALUE, 200,
							            W_PANEL_CALLBACK,    1,
							            W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);							                     

	quit = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "quit");
	W_REALIZE_PANELITEM(quit,  W_PANEL_ROW, 	      21, 
	                           W_PANEL_COL,         61,
							   W_PANEL_BUTTONIMAGE, "退出", 
							   W_PANEL_WIDTH,       10,
							   W_PANEL_BUTTONVALUE, 207,
							   W_PANEL_CALLBACK,    1,
							   W_PANEL_CLOSEBUTTON, 1,
							   W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);

	merge_spools = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "merge_spools");
	W_REALIZE_PANELITEM(merge_spools,   W_PANEL_ROW,         22, 
	                                    W_PANEL_COL,         0,
							            W_PANEL_BUTTONIMAGE, "合并管段", 
							            W_PANEL_WIDTH,       10,
							            W_PANEL_BUTTONVALUE, 200,
							            W_PANEL_CALLBACK,    1,
							            W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);

	delete_spools = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "delete_spools");
	W_REALIZE_PANELITEM(delete_spools,  W_PANEL_ROW,         22, 
	                                    W_PANEL_COL,         12,
							            W_PANEL_BUTTONIMAGE, "删除管段", 
							            W_PANEL_WIDTH,       10,
							            W_PANEL_BUTTONVALUE, 200,
							            W_PANEL_CALLBACK,    1,
							            W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);
							            
	auto_page = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "auto_page");
	W_REALIZE_PANELITEM(auto_page,  W_PANEL_ROW,         22, 
	                                W_PANEL_COL,         24,
							        W_PANEL_BUTTONIMAGE, "自动页码", 
							        W_PANEL_WIDTH,       10,
							        W_PANEL_BUTTONVALUE, 200,
							        W_PANEL_CALLBACK,    1,
							        W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);							            

	W_SET_PANELITEM_HANDLER(quit, "quit_handler");
	W_SET_PANELITEM_HANDLER(modify_info, "modify_info_handler");
	W_SET_PANELITEM_HANDLER(restore_default, "restore_default_handler");
	W_SET_PANELITEM_HANDLER(clean_info, "clean_info_handler");
	W_SET_PANELITEM_HANDLER(model_browsing, "model_browsing_handler");
	W_SET_PANELITEM_HANDLER(merge_spools, "merge_spools_handler");
	W_SET_PANELITEM_HANDLER(access_right, "access_right_handler");
	W_SET_PANELITEM_HANDLER(delete_spools, "delete_spools_handler"); 
	W_SET_PANELITEM_HANDLER(auto_page, "auto_page_handler"); 

	return(panel_underpart);
}

main()
{
	if(!license()){
	    return(0);
	}
	init();
	mainform  = create_top_frame();
	Panel_upperpart = create_panel_upperpart(mainform);
	W_Data_Grid  = create_grid(mainform);
	Panel_underpart = create_panel_underpart(mainform);

	MainWindow = mainform;
	W_MAP_FRAME(mainform);
	W_RUN_FRAME(mainform);
	W_UNMAP_FRAME(mainform);
	W_DESTROY_FRAME(mainform);
}

exit()
{
	/* restore color of highlighted objects */
	spool_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
	for (i = 0 ; i < spool_number; i = i + 1){
		model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
		Highlight_Object(model,FALSE);
	}

	PM_FREE_SET(Object_List);
	PM_FREE_SET(High_Light_List);
	PM_FREE_SET(Selected_Objects);
	A_FREE(Tag_Array);
	A_FREE(Tag_Description_Array);
	A_FREE(Access_List);
}


license()
{
    if(!check_license()){
        U_CONFIRM("请使用正版软件！");
        return(0);
    }
    
    if(!check_date()){
        U_CONFIRM("软件已过有效期！");
        return(0);        
    }    
    return(1);
}

check_license()
{
    return(1);
}

check_date()
{
    year = 2019;
    month = 12;
    date = 31;
    
    current_time = GET_TIME();  
    current = CNV_DATE(current_time,7);
    int current_year;
    current_year = SCAN_QUANT(3,STRINGTERM(current,"-"));
    current = SUBSTRING(SEARCH(current,"-"),1);
    int current_month;
    current_month = SCAN_QUANT(3,STRINGTERM(current,"-"));
    int current_date;
    current_date = SCAN_QUANT(3,SUBSTRING(SEARCH(current,"-"),1));
    if(current_year > year){       
        return(0);
    }
    else if(current_month > month){
        return(0);
    }
    else if(current_date > date){
        return(0);
    }
    return(1);
}

auto_page_handler(item, event_type, button_value)
{
    U_INIT_DIALOG("请输入起始页码");
    i_i = U_SET_INT("",2, 2, 10000 );
	if( U_DIALOG() < 0 ){
		U_CONFIRM("操作取消");
		return(0);
	}        
    start_page = U_GET_INT(i_i);
    spool_number = PM_NR_MEMBERS_IN_SET(Object_List);
    total_number = start_page + spool_number - 1;
    for(i=0;i<Object_Number;i=i+1){               
        W_SET_WINDOW_ARGS(W_Data_Grid, W_LISTW_ROW, i, W_LISTW_COLUMN, 12, W_LISTW_STRING, ITOASCII(total_number));       
        W_SET_WINDOW_ARGS(W_Data_Grid, W_LISTW_ROW, i, W_LISTW_COLUMN, 11,  W_LISTW_STRING, ITOASCII(start_page + i));
        W_SET_WINDOW_ARGS(W_Data_Grid, W_LISTW_ROW, i);
        id = W_GET_WINDOW_ARG(W_Data_Grid, W_LISTW_ITEMID);
        spool = PM_GET_MEMBER_IN_SET(Object_List, id);
        Set_Attribute_Value(spool, Tag_Spool_Page, ITOASCII(start_page + i));  
        Set_Attribute_Value(spool, Tag_Spool_TotalPage, ITOASCII(total_number));     
    }
    return(0);
}

