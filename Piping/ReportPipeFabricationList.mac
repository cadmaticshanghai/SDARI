/* $Id: ReportPipeFabricationList.mac,v1.0.0 2018/11/03 Wallis.liu $ */

/*
**	这个程序用于浏览及生成管系内场托盘表.
*/

#include "include/dmutil.h"
#include "include/win.h"
#include "include/win_panel.h"
#include "include/PmMgeTags.h"
#include "include/pm.h"
#include "include/pm_errors.h"
#include "include/dm_errors.h"
#include "include/pm_drawings.h"
#include "include/pm_core_tags.h"
#include "include/array.mac"
#include "include/cos.h"
#include "include/dw.h"
#include "include/pm_annot.h"
#include	"include/dm_cos_schema.h"
#include	"include/geoutils.h"
#include "include/PmPipingUtils.h"
#include "opt/pm/EloTools/include/viewutilsELO.h"
#include "include/g2d_ext2df.h"
#include	"include/quants.h"
#include "include/pi_math.mac" 
#include "include/pi.h"
#include "include/geotypes.h"

#include "$MarineToolkit/Piping/PspoolProdInfo.h"
#include "$MarineToolkit/Piping/ReportPipeFabricationList.h"
#include "$MarineToolkit/include/String_Utility.h"
#include "$MarineToolkit/include/Common_Utility.h"
#include "$MarineToolkit/include/Grid_Utility.h"
#include "$MarineToolkit/include/Math_Utility.h"
#include "$MarineToolkit/include/Piping_Utility.h"

/*
**脚本语言中似乎无法直接获得一个数组的实际长度，定义一个全局变量用于保存生产信息的数量
*/

global  int 	Report1_Column_Number = 13;
global  int 	Report2_Column_Number = 7;
global  int 	Report3_Column_Number = 8;
global  int 	Grid_Column_Number = 13;

/*
**定义界面语言
**define interface language
*/
global  handle  Block_Name,Planning_Unit;
global  handle  DisplayGrid;
global  handle  NULL_HANDLE = 0;
global  int     Grid_SelectedItem = 0;
global  int     Grid_SortColumn = -1;
global  int     Grid_SortDirection = 1;
global  handle  Pspool_List;					/*管段handle列表*/
global  int     Pspool_Number=0;				/*管段数量*/
global  handle   Report1_Info;					/*报表信息列表*/
global  handle   Report1_Objects;				/*保存报表行对应的管段*/
global  handle   Report2_Info;					/*报表信息列表*/
global  handle   Report2_Objects;				/*保存报表行对应的管段*/
global  handle   Report3_Info;					/*报表信息列表*/
global  handle   Report3_Objects;				/*保存报表行对应的复板*/
global  int		Report1_Row_Number = 0;			/*报表行数*/
global  int		Report2_Row_Number = 0;			/*报表行数*/
global  int		Report3_Row_Number = 0;			/*报表行数*/
global  handle   High_Light_List;				/*模型加亮列表*/
global  handle   Selected_Objects;
global  int		Selected_Objects_Number = 0;
global  int		AutoScale = 1;
global  int		AutoHighLight = 1;
global  handle   MainWindow;
global  handle   Title1,Title2,Title3;
global  int		Report_Type = 0;
global  int		Maximum_Report_Row_Number = 2000;
global  handle   Report_Path,Report_Template;
global  string   DataFilePath = "";
global  handle   wobj;
global  string  DefaultReportPath = "";
global  string  DefaultTemplatePath = "";
global  string  DefaultModuleName = "PipeFabricationList";
/*
**初始化相关对象
*/
init()
{	
	Title1 = A_ALLOC(13, "STRING");
	A_PUT(Title1,0,"序号");
	A_PUT(Title1,1,"管名");
	A_PUT(Title1,2,"管材及规格");
	A_PUT(Title1,3,"内表面处理");
	A_PUT(Title1,4,"外表面处理");
	A_PUT(Title1,5,"试压(bar)");
	A_PUT(Title1,6,"管段类型");
	A_PUT(Title1,7,"长度(mm)");
	A_PUT(Title1,8,"管段1");
	A_PUT(Title1,9,"管段2");
	A_PUT(Title1,10,"管段3");
	A_PUT(Title1,11,"管段4");
	A_PUT(Title1,12,"管段5");
	
	Title2 = A_ALLOC(7, "STRING");
	A_PUT(Title2,0,"序号");
	A_PUT(Title2,1,"名称");
	A_PUT(Title2,2,"型号规格及标准号");
	A_PUT(Title2,3,"单位");
	A_PUT(Title2,4,"数量");
	A_PUT(Title2,5,"重量(kg)");
	A_PUT(Title2,6,"备注");

	Title3 = A_ALLOC(8, "STRING");
	A_PUT(Title3,0,"序号");
	A_PUT(Title3,1,"名称");
	A_PUT(Title3,2,"型号规格及标准号");
	A_PUT(Title3,3,"焊接类型");
	A_PUT(Title3,4,"材质");	
	A_PUT(Title3,5,"厚度");	
	A_PUT(Title3,6,"重量(kg)");
	A_PUT(Title3,7,"备注");
	
	DataFilePath = SYS_GETENV("TEMP");    
}

initiate()
{	
    username = "";
    machinename = "";
    SYS_GET_USERNAME(username);
    if(username != ""){
        DefaultReportPath = username + "PipeFabricationListPath";
        DefaultTemplatePath = username + "PipeFabricationTemplatePath";
    }
    else{
        if(machinename != ""){
            DefaultReportPath = machinename + "PipeFabricationListPath";
            DefaultTemplatePath = machinename + "PipeFabricationTemplatePath";
        }
        else{
            DefaultReportPath = "PipeFabricationListPath";
            DefaultTemplatePath = "PipeFabricationTemplatePath";
        
        }       
    }
    report_path = "";
    template_path = "";
    
    res = GET_STRING_DEFAULT(DefaultModuleName,DefaultReportPath,report_path);
    if(res == 0){
        W_SET_PANELITEM_ARGS(Report_Path, W_PANEL_VALUE, report_path);
    }
    else{
        W_SET_PANELITEM_ARGS(Report_Path, W_PANEL_VALUE, "C:/TEMP/");
    }
    
    res = GET_STRING_DEFAULT(DefaultModuleName,DefaultTemplatePath,template_path);
    if(res == 0){
        W_SET_PANELITEM_ARGS(Report_Template, W_PANEL_VALUE, template_path);
    }
    else{
        W_SET_PANELITEM_ARGS(Report_Template, W_PANEL_VALUE, "P:/报表模板/管系内场托盘表模板.xlsx");
    }    
		
    fresh();
}

fresh()
{
	Report1_Info = alloc_2darray(1,1);
	Report1_Objects = A_ALLOC(1);
    Report1_Row_Number = 0;
	Report2_Info = alloc_2darray(1,1);
	Report2_Objects = A_ALLOC(1);
    Report2_Row_Number = 0;
	Report3_Info = alloc_2darray(1,1);
	Report3_Objects = A_ALLOC(1);
    Report3_Row_Number = 0;	
	/*初始化模型集合*/
	Pspool_List = PM_INIT_SET();

	/*初始化加亮模型集合*/
	High_Light_List = PM_INIT_SET();
	
	/*初始化选中的模型集合*/
	Selected_Objects = PM_INIT_SET();
}


/*
**Get the selected objects in grid
*/
get_selected_items()
{
	PM_SETOP_SUB(Selected_Objects, Selected_Objects);
	selected_rows = W_GET_WINDOW_ARG( wobj, W_LISTW_MSVALUE );
	total_lines = STRLEN(selected_rows);
	k = 0;
	for (i = 0; i < total_lines; i = i + 1){
		temp_string = SUBSTRING(selected_rows,i);
		flag = HEAD(temp_string,1);
		if (flag == "1"){
			W_SET_WINDOW_ARGS( wobj, W_LISTW_ROW, i);
			selected_row = W_GET_WINDOW_ARG( wobj, W_LISTW_ITEMID );
			if(Report_Type == 0)
            {
				model_handle = A_GET(Report1_Objects, selected_row);				
			}
			else if(Report_Type == 1)
            {
				model_handle = A_GET(Report2_Objects, selected_row);
			}
			else if(Report_Type == 2)
            {
				model_handle = A_GET(Report3_Objects, selected_row);
			}
			/*model_handle = A_GET(Report1_Objects, selected_row);	*/
			PM_ADD_OBJECT_TO_SET(model_handle,Selected_Objects);
			k = k + 1;
		}
	}
	Selected_Objects_Number = k;
	return (0);
}

/*
**获取全局变量Pspool_List中保存的管段的信息，并将相关信息保存到全局变量ReportInfo中；
*/
get_report1_info()
{
   /*给报表信息分配一个临时数组*/
	report = alloc_2darray(Maximum_Report_Row_Number,Report1_Column_Number);
	spools = A_ALLOC(Maximum_Report_Row_Number);
	row_number = 0;
	for (i = 0; i < Pspool_Number; i = i + 1;){
		spool = PM_GET_MEMBER_IN_SET(Pspool_List, i);		
		/* 获取管段的相关信息并保存到临时数组 */
		get_spool_info(spool, report, row_number, spools);
	}	
	/*将报表信息保存到全局变量*/
	free_2darray(Report1_Info); 
	Report1_Row_Number = row_number;
	Report1_Info = alloc_2darray(Report1_Row_Number,Report1_Column_Number);
	Report1_Objects = A_ALLOC(Report1_Row_Number);
	for(i=0;i<Report1_Row_Number;i=i+1;){
	   for(j=0;j<Report1_Column_Number;j=j+1;){
	      value = get_2darray(report,i,j);
	      put_2darray(Report1_Info, i, j, value);	
	   }
	   spool = A_GET(spools,i);
	   A_PUT(Report1_Objects,i,spool);
	}
	A_FREE(spools);
	free_2darray(report);
	return 0;
}


/*
**生成内场加工配套表 Generate fabrication material list
*/
get_report2_info()
{
   /*给报表信息分配一个临时数组*/
	report = alloc_2darray(Maximum_Report_Row_Number,Report2_Column_Number);
	parts_id = A_ALLOC(Maximum_Report_Row_Number);
	row_number = 0;
	for (i = 0; i < Pspool_Number; i = i + 1;){
		spool = PM_GET_MEMBER_IN_SET(Pspool_List, i);		
		/* 获取管段的相关信息并保存到临时数组 */
		get_parts_info(spool, report, row_number, parts_id);
	}	
	/*将报表信息保存到全局变量*/
	free_2darray(Report2_Info); 
	Report2_Row_Number = row_number;
	Report2_Info = alloc_2darray(Report2_Row_Number,Report2_Column_Number);
	Report2_Objects = A_ALLOC(Report2_Row_Number);
	for(i=0;i<Report2_Row_Number;i=i+1;){
		for(j=0;j<Report2_Column_Number;j=j+1;){
			value = get_2darray(report,i,j);
			put_2darray(Report2_Info, i, j, value);
		}
		part_id = A_GET(parts_id,i);
		A_PUT(Report2_Objects,i,part_id);
	}
	A_FREE(parts_id);
	free_2darray(report);
	return 0;
}

get_report3_info()
{
   /*给报表信息分配一个临时数组*/
	report = alloc_2darray(Maximum_Report_Row_Number,Report3_Column_Number);
	penetrations_id = A_ALLOC(Maximum_Report_Row_Number);
	row_number = 0;
	for (i = 0; i < Pspool_Number; i = i + 1;){
		spool = PM_GET_MEMBER_IN_SET(Pspool_List, i);	
		double_plate = get_double_plate(spool);
		if(!ISINT(double_plate)){
            /* 获取复板的相关信息并保存到临时数组 */
            get_penetration_info(double_plate, report, row_number, penetrations_id);
        }
	}	
    if(row_number <= 0){    
        return(0);
    }
	/*将报表信息保存到全局变量*/
	free_2darray(Report3_Info); 
	Report3_Row_Number = row_number;
	Report3_Info = alloc_2darray(Report3_Row_Number,Report3_Column_Number);
	Report3_Objects = A_ALLOC(Report3_Row_Number);
	for(i=0;i<Report3_Row_Number;i=i+1;){
		for(j=0;j<Report3_Column_Number;j=j+1;){
			value = get_2darray(report,i,j);
			put_2darray(Report3_Info, i, j, value);
		}
		penetration_id = A_GET(penetrations_id,i);
		A_PUT(Report3_Objects,i,penetration_id);
	}
	A_FREE(penetrations_id);
	free_2darray(report);
	return 0;
}

/* 查找管段是否有穿舱复板，如果有，则返回复板的handle，否则返回-1*/
get_double_plate(spool)
{
    xmin = 0; xmax = 0; ymin = 0; ymax = 0; zmin = 0; zmax = 0;                 /* get bounding box of spool*/
	models = PM_GET_OBJECTS_IN_GROUP(spool);
    res = PM_GET_BBOX_OF_SET(models, xmin, xmax, ymin, ymax, zmin, zmax);
	obj_type = 4;                                                               /* search structural part in or intersect with bounding box of spool*/
	structural_parts = Search_Models_Intersect_Box(xmin,ymin,zmin,xmax,ymax,zmax,obj_type);    
    if(!ISINT(structural_parts)){
        part_number = PM_NR_MEMBERS_IN_SET(structural_parts);                   /* traverse all structural part and check if it is member of penetration*/
        for(i=0;i<part_number;i=i+1;){
            part = PM_GET_MEMBER_IN_SET(structural_parts,i);
            groups_handle = PM_GET_OBJECT_GROUP(part, Penetration_Group_Type);
            if(!ISINT(groups_handle)){
                nth = 0;
                pid = PM_GET_OBJDATA(part,nth,"pid");                           /* check shape */
                shape = DM_PARTID_DATA(pid,"SH");
                if(shape == 7){
                    thickness = 1.0 * get_thickness(part);
                    if(thickness > 0 & thickness < Maximum_Thickness){
                        return(part);                   
                    }                
                }
            }        
        }    
    }
    return(0);
}

get_thickness(double_plate)
{
	nth = 0;
	part_id = PM_GET_OBJDATA(double_plate, nth, "pid");
	thickness = DM_PARTID_DATA(part_id,"DD");
	if(ISSTRING(thickness)){
		thickness = SEARCH(STRINGTERM(thickness,"mm"),"=");
		thickness = TAIL(thickness,STRLEN(thickness)-1);
		return(thickness);	
	}
	else{	
		return("0.00");
	}
}

/*get information of penetration*/
get_penetration_info(double_plate, report, row_number, penetrations_id)
{
    /* 序号 */
    put_2darray(report,row_number,0,"0");
    /* 贯通件名称 - 所属管段名称 */
	data = get_penetration_name(double_plate);
	put_2darray(report,row_number,1,data);
    /* 复板制作图名称 */
    data = get_fabrication_DrawingNumber(double_plate);	
    put_2darray(report,row_number,2,data);
    /* 焊接类型 */
    data = get_welding_type(double_plate);
    put_2darray(report,row_number,3,data);
    /* 材料 */
    data = get_materail(double_plate);
    put_2darray(report,row_number,4,data);
    /* 厚度 */
    data = get_thickness(double_plate);
    put_2darray(report,row_number,5,data);
    /* 重量 */
    data = get_weight(double_plate);
    put_2darray(report,row_number,6,data);
    /*备注*/
    data = get_remark(double_plate);
    put_2darray(report,row_number,7,data);
    /* 将复板handle添加到数组中 */
    A_PUT(penetrations_id,row_number,double_plate);
    row_number = row_number + 1;
}

get_block_name(obj_h)
{
	block_name = PM_GET_OBJDATA(obj_h,0,Tag_BlockNumber);				/*抽取复板的分段名称*/
	if(ISINT(block_name)){										/*如果抽取不到复板的分段名称，则抽取其总段名称*/
		block_name = PM_GET_OBJDATA(obj_h,0,Tag_SupperBlock);	/*抽取复板的总段名称*/
		if(ISINT(block_name)){									/*如果抽取不到复板的总段名称，则返回默认分段名999 */
			return("999");		
		}
		else if(block_name == ""){								/* 如果总段名称为空字符串，返回默认分段名999 */
			return("999");
		}
		else{
			return(block_name);
		}
	}
	else if(block_name == ""){									/* 如果分段名称为空字符串，返回默认分段名999 */
		return("999");
	}
	else{
		return(block_name);
	}
}

/* 抽取复板的重量信息 */
get_weight(double_plate)
{
	nth = 0;
	weight = PM_GET_OBJDATA(double_plate, nth, "MAS");
	if(ISSTRING(weight)){
		return(weight);	
	}
	else{	
		return("0.00");
	}
}

/* 抽取复板的备注信息 */
get_remark(double_plate)
{
	nth = 0;
	remark = PM_GET_OBJDATA(double_plate, nth, Tag_Penetration_Remark);
	if(ISSTRING(remark)){
		return(remark);	
	}
	else{	
		return("");
	}
}

/* 抽取复板的材料信息，如果值为空，则返回Q235A */
get_materail(double_plate)
{
	nth = 0;
	part_id = PM_GET_OBJDATA(double_plate, nth, "pid");
	material = DM_PARTID_DATA(part_id,"MC");
	if(ISSTRING(material)){
		return(material);	
	}
	else{	
		return("Q235A");
	}
}

/* 抽取复板的焊接类型信息，如果值为空，值赋一个初始值 */
get_welding_type(obj_h)
{
	nth = 0;
	welding_type = PM_GET_OBJDATA(obj_h,nth,Tag_Penetration_WeldType);
	/* 抽取复板的焊接类型并根据返回值做相应处理 */
	if(ISSTRING(welding_type)){
		/* 复板已经具有有效的焊接类型信息 */
		if(welding_type != ""){
			return(welding_type);		
		}
		/* 复板焊接类型信息为空 */
		else{
			/*检查用户权限并做出相应处理*/
			access = Get_Object_Access_Status(obj_h);
			if(access == "CheckOutByMe"){
				Set_Attribute_Value(obj_h,Tag_Penetration_WeldType,"外场焊");
				return("外场焊");
			}
			else{
				return("未定义");
			}
		}	
	}
	/* 尚未给复板添加焊接类型信息 */
	else{
		/*检查用户权限并做出相应处理*/
		access = Get_Object_Access_Status(obj_h);
		if(access == "CheckOutByMe"){
			Set_Attribute_Value(obj_h,Tag_Penetration_WeldType,"外场焊");
			return("外场焊");
		}
		else{
			return("未定义");
		}		
	}
	return("外场焊");
}

/* 抽取复板的制作图号信息，如果值为空，值赋一个初始值 */
get_fabrication_DrawingNumber(obj_h)
{
	value1 = "FD0000001";
	value2 = "000000000";
	nth = 0;
	drawing_number = PM_GET_OBJDATA(obj_h,nth,Tag_Penetration_FabDn);
	/* 抽取复板的制作图号并根据返回值做相应处理 */
	if(ISSTRING(drawing_number)){
		/* 复板已经具有有效的制作图号信息 */
		if(drawing_number != ""){
			return(drawing_number);		
		}
		/* 复板制作图号信息为空 */
		else{
			/*检查用户权限并做出相应处理*/
			access = Get_Object_Access_Status(obj_h);
			if(access == "CheckOutByMe"){
				Set_Attribute_Value(obj_h,Tag_Penetration_FabDn,value1);
				return(value1);
			}
			else{
				return(value2);
			}
		}	
	}
	/* 尚未给复板添加制作图号信息 */
	else{
		/*检查用户权限并做出相应处理*/
		access = Get_Object_Access_Status(obj_h);
		if(access == "CheckOutByMe"){
			Set_Attribute_Value(obj_h,Tag_Penetration_FabDn,value1);
			return(value1);
		}
		else{
			return(value2);
		}		
	}
	return(value1);
}

/* 复板的名称为其所属的管段的名称 */
get_penetration_name(obj_h)
{
	block_name = get_block_name(obj_h);
	nth = 0;
	xmin = 0; xmax = 0; ymin = 0; ymax = 0; zmin = 0; zmax = 0;
	res = PM_GET_BBOX_OF_OBJECT(obj_h, xmin, xmax, ymin, ymax, zmin, zmax); 
	obj_type = 3;
	pipes = Search_Models_Intersect_Box(xmin,ymin,zmin,xmax,ymax,zmax,obj_type);
	if(ISINT(pipes)){
		name = "PB" + block_name + "-XXXXX-XX";	
	}
	else{
		pipe = PM_GET_MEMBER_IN_SET(pipes,0);
		spool_handle = PM_GET_OBJECT_GROUP(pipe,0);	/* 获取管段的handle */
		if(ISINT(spool_handle)){						/* 如果无法获取管段的handle，则管路尚未生成管段，返回管线名称 */
			pipe_line = PM_GET_OBJDATA(pipe,nth,"pli");
			if(ISSTRING(pipe_line)){
				name = "PB" + block_name + "-" + pipe_line + "-XX";				
			}
			else{
				name = "PB" + block_name + "-XXXXX-XX";		
			}	
		}
		else{
			spool_name = PM_GET_OBJDATA(pipe,nth,Tag_Spool_Name);	/* 抽取管段的管段名*/
			if(!ISSTRING(spool_name)){
				spool_number = PM_GET_OBJDATA(pipe,nth,"spn");
				if(ISSTRING(spool_number)){
					pipe_line = PM_GET_OBJDATA(pipe,nth,"pli");
					name = "PB" + block_name + "-" + pipe_line + "-" + spool_number;								
				}
				else{
					pipe_line = PM_GET_OBJDATA(pipe,nth,"pli");
					name = "PB" + block_name + "-" + pipe_line + "-XX";					
				}		
			}
			else{
				name = spool_name;	
			}
		}
	}
	return(name);	
}

/*get information of specified spool*/
get_spool_info(spool,report,row_number,spools)
{
    spool_name = PM_GET_OBJDATA(spool,0,Tag_Spool_Name);
	/*get all pipe object in the spool*/
	pipes = PM_GET_OBJECTS_IN_GROUP(spool);
	pipe_number = PM_NR_MEMBERS_IN_SET(pipes);
	/**/
	pieces_pid = A_ALLOC(50);
	pieces = alloc_2darray(10*pipe_number,13);                                  /*一个pipe里面如果包含了REDUCER,则可能会包含一种以上的管材*/
	piece_number = 0;
	/*traverse all pipes*/
	for(i=0;i<pipe_number;i=i+1;){
		pipe = PM_GET_MEMBER_IN_SET(pipes,i);
		part_number = PM_NR_PARTS_IN_PIPE(pipe);
		if(part_number != -1){
			previous_type = "";
			continue = 0;
			/*traverse all pipe parts*/
			for(nth=1;nth<=part_number;nth=nth +1;){
				part_obj_id = PM_GET_OBJDATA(pipe,nth,MMT_TAG_OBJID);
				part_handle = PM_FIND_BY_OBJID(part_obj_id);
				comp_type = Get_Pipe_Component_Type(part_handle);            
				length = PM_GET_OBJDATA(pipe,nth,MMT_TAG_LENGTH);				
				if(ISSTRING(length)){                                            /*check if it is tube part*/					
					if(nth>1){
						if(in_same_piece(pipe,nth)){                             /*check if it belong to same piece*/
							continue = 1;
						}					
					}
					if(!continue){                                               /*if not in same piece, then ...*/
						part_id = PM_GET_OBJDATA(pipe,nth,MMT_TAG_PARTID);
						if(piece_number == 0){                                   /*if it is first piece, get information directly*/
							A_PUT(pieces_pid,piece_number,part_id);
							get_piece_information(pieces,piece_number,pipe,nth);
						}
						else{                                                    /*if it isn't first piece, then check it is size*/
							loop_flag = 1;
							find_same_pid = 0;
							pos = 0;
							while(loop_flag){
								part_id0 = A_GET(pieces_pid,pos);
								if(part_id == part_id0){
									loop_flag = 0;
									find_same_pid = 1;
								}
								else{
									pos = pos + 1;								
								}	
								if(pos >= piece_number){
									loop_flag = 0;								
								}
							}
							if(find_same_pid){                                   /*if there is piece with same part, then...*/
								spool_type = PM_GET_OBJDATA(pipe,nth,Tag_Spool_Type);
								/*管材长度*/
								cutting_length = get_piece_cutting_length(pipe,nth);
								/*现校管加余量 - 检查这个piece两端的连接对象，如果是连接到其它对象的，则加50mm的余量*/
								if(spool_type != "PRE"){
									cutting_length = cutting_length + get_additional_length(pipe,nth);
								}
								length = get_2darray(pieces,pos,7) + cutting_length;
								put_2darray(pieces,pos,7,length);
								find_pos = 0;
								start = 0;
								while(!find_pos){
									value = get_2darray(pieces,pos,9+start);
									if(value == 0){
										put_2darray(pieces,pos,9+start,cutting_length);
										find_pos = 1;
									}
									start = start + 1;
									if(start >= 4){
										find_pos = 1;
									}
								}
							}
							else{
								A_PUT(pieces_pid,piece_number,part_id);
								get_piece_information(pieces,piece_number,pipe,nth);
							}
						}
					}
				}
				else{
					continue = 0;
				}
				previous_type = comp_type;
			}
		}
	}
	/* add spool information to global array*/
	for(i=0;i<piece_number;i=i+1;){
		for(k=0;k<13;k=k+1;){
			value = get_2darray(pieces,i,k);
			if(ISSTRING(value)){
				put_2darray(report,row_number,k,value);
			}
			else{
				value_s = "";
				S_PRINTF(value_s, "%.0f", value);
				put_2darray(report,row_number,k,value_s);
			}		
		}
		A_PUT(spools,row_number,spool);
		row_number = row_number + 1;
	}	
	/* release resourse */
	A_FREE(pieces_pid);
	free_2darray(pieces);
}


in_same_piece(pipe,nth)
{
	if(nth == 1){
		return(0);
	}
	part_id = PM_GET_OBJDATA(pipe,nth,MMT_TAG_PARTID);
	if(!is_tube(part_id)){
		return(0);
	}
    part_id = PM_GET_OBJDATA(pipe, nth-1, "pid"); 
    g_type = DM_PARTID_DATA(part_id, "GT");  
	if(g_type == DM_GT_PIPE){
		return(1);
	}
	return(0);
}


is_tube(part_id)
{ 
    g_type = DM_PARTID_DATA(part_id, "GT");  
	if(g_type == DM_GT_PIPE){
		return(1);
	}
	return(0);
}


/*get information of specified spool*/
get_parts_info(spool, report, row_number, parts_id)
{
	/*get all pipe object in the spool*/
	pipes = PM_GET_OBJECTS_IN_GROUP(spool);
	pipe_number = PM_NR_MEMBERS_IN_SET(pipes);
	/*traverse all pipes*/
	for(i=0;i<pipe_number;i=i+1;){
		pipe = PM_GET_MEMBER_IN_SET(pipes,i);
		part_number = PM_NR_PARTS_IN_PIPE(pipe);
		/*traverse all parts*/
		if(part_number != -1){
			for(nth=1;nth<=part_number;nth=nth+1;){
				/*first part*/
				part_id = PM_GET_OBJDATA(pipe,nth,MMT_TAG_PARTID);
				if(row_number == 0){
					get_part_information(report,row_number,parts_id,part_id,0,pipe,nth);				
				}
				else{
					/*check if part is in same piece with previous part*/
					if(!in_same_piece(pipe,nth)){
						find_part = 0;
						pos = 0;
						while(!find_part){
							part_id0 = A_GET(parts_id,pos);
							if(part_id == part_id0){
								find_part = 1;
							}
							else{
								pos = pos + 1;						
							}
							if(pos >= row_number){
								find_part = 1;
							}
						}
						get_part_information(report,row_number,parts_id,part_id,pos,pipe,nth);
					}
				}
			}
		}
		/*standard component*/
		else{
			part_id = PM_GET_OBJDATA(pipe,0,MMT_TAG_PARTID);
			if(row_number == 0){
				get_part_information(report,row_number,parts_id,part_id,0,pipe,0);				
			}
			else{
				find_part = 0;
				pos = 0;
				while(!find_part){
					part_id0 = A_GET(parts_id,pos);
					if(part_id == part_id0){
						find_part = 1;
					}
					else{
						pos = pos + 1;						
					}
					if(pos >= row_number){
						find_part = 1;
					}
				}
				get_part_information(report,row_number,parts_id,part_id,pos,pipe,0);
			}		
		
		}
	}
}


get_part_information(report,row_number,parts_id,part_id,pos,pipe,nth)
{
	is_tube_ = is_tube(part_id);
	if(row_number == pos){
		A_PUT(parts_id,pos,part_id);
		/*1.序号*/
		put_2darray(report,pos,0,"0");
		/*2.名称*/
		des = "未定义";
		data = DM_PARTID_DATA(part_id,"DE");
		if(ISSTRING(data)){
			des = data;
		}
		put_2darray(report,pos,1,des);
		/*3.型号规格及标准号*/
		size = "未定义";
		des = DM_PARTID_DATA(part_id,"DE");
		if(ISSTRING(des)){
			size = des;
		}
		dd = DM_PARTID_DATA(part_id,"DD");
		if(ISSTRING(dd)){
			if(size == "未定义"){
				size = dd;
			}
			else{
				size = size + " " + dd;
			}
		}	
		st = DM_PARTID_DATA(part_id,"ST");
		if(ISSTRING(st)){
			if(size == "未定义"){
				size = st;
			}
			else{
				size = size + " " + st;
			}
		}
		put_2darray(report,pos,2,size);
		/*4.单位*/
		if(is_tube_){
			put_2darray(report,pos,3,"mm");
		}
		else{		
			put_2darray(report,pos,3,"个");
		}	
		/*5.数量*/
		length = 0;
		if(is_tube_){
			length = get_piece_cutting_length(pipe,nth) + get_additional_length(pipe,nth);
			put_2darray(report,pos,4,length);
		}
		else{
			put_2darray(report,pos,4,1);
		}
		/*6.重量*/
		if(is_tube_){
			unit_weight = 1.0 * DM_PARTID_DATA(part_id,"DB1");
			weight = length * unit_weight;
			put_2darray(report,pos,5,weight);
		}
		else{
			weight = 1.0 * DM_PARTID_DATA(part_id,"D61");
			put_2darray(report,pos,5,weight);		
		}
		/*7.备注*/
		put_2darray(report,pos,6,"");
		row_number = row_number + 1;
	}
	else{
		if(is_tube_){
			length = get_2darray(report,pos,4) + get_piece_cutting_length(pipe,nth) + get_additional_length(pipe,nth);
			put_2darray(report,pos,4,length);
			unit_weight = 1.0 * DM_PARTID_DATA(part_id,"DB1");
			weight = length * unit_weight;
			put_2darray(report,pos,5,weight);
		}
		else{
			part_number = get_2darray(report,pos,4) + 1;
			put_2darray(report,pos,4,part_number);
			weight = part_number * DM_PARTID_DATA(part_id,"D61");
			put_2darray(report,pos,5,weight);
		}			
	}
}


get_piece_information(pieces,piece_number,pipe,nth)
{
	/*序号*/
	sequence = "0";
	put_2darray(pieces,piece_number,0,sequence);               
	/*管段名称*/
	spool_name = "Unset";
	data = PM_GET_OBJDATA(pipe,nth,Tag_Spool_Name);
	if(ISSTRING(data)){
		spool_name = data;
	}
    else{
        return(0);
    }
	put_2darray(pieces,piece_number,1,spool_name);
	/*管材规格*/
	size = "";
	part_id  = PM_GET_OBJDATA(pipe,nth,MMT_TAG_PARTID);
	data = DM_PARTID_DATA(part_id,"DE") + " " + DM_PARTID_DATA(part_id,"DD");                                         
	if(ISSTRING(data)){
		size = data;
	}
	put_2darray(pieces,piece_number,2,size);
	/*内表面处理*/
	surf_in = "未定义";
	data = PM_GET_OBJDATA(pipe,nth,Tag_Spool_SurfTreatmentIn);
	if(ISSTRING(data)){
		surf_in = data;
	}
	put_2darray(pieces,piece_number,3,surf_in);	
	/*外表面处理*/
	surf_out = "未定义";
	data = PM_GET_OBJDATA(pipe,nth,Tag_Spool_SurfTreatmentOut);
	if(ISSTRING(data)){
		surf_out = data;
	}
	put_2darray(pieces,piece_number,4,surf_out);	
	/*试压*/
	pressure = "0";
	data = PM_GET_OBJDATA(pipe,nth,Tag_Spool_TestPressure);
	if(ISSTRING(data)){
		pressure = data;
	}
	put_2darray(pieces,piece_number,5,pressure);	
	/*管种*/
	spool_type = "未定义";
	data = PM_GET_OBJDATA(pipe,nth,Tag_Spool_Type);
	if(ISSTRING(data)){
		spool_type = data;					
	}
	put_2darray(pieces,piece_number,6,spool_type);
	/*管材长度*/
	cutting_length = get_piece_cutting_length(pipe,nth);
	/*现校管加余量 - 检查这个piece两端的连接对象，如果是连接到其它对象的，则加50mm的余量*/
	if(spool_type != "PRE"){
		cutting_length = cutting_length + get_additional_length(pipe,nth);
	}             
	put_2darray(pieces,piece_number,7,cutting_length);
	put_2darray(pieces,piece_number,8,cutting_length);
	put_2darray(pieces,piece_number,9,0);
	put_2darray(pieces,piece_number,10,0);
	put_2darray(pieces,piece_number,11,0);
	put_2darray(pieces,piece_number,12,0);
	piece_number = piece_number + 1;
}


get_additional_length(pipe,nth)
{
	return(0);
}


/*

**将全局变量object_prod_info中保存的生产信息显示到列表中；
**根据全局变量Grid_SortColumn，Grid_SortDirection保存的信息对显示列表进行排序；
*/
publish_report_info()
{
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_DELETEROWS, -1); 
	/* 将报表信息显示到窗口中 */	
	if(Report_Type == 0){       
		for (i = 0; i < Report1_Row_Number; i = i + 1;){
			W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
			W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_INSERTROWS, 1);
			for ( j = 0; j < Report1_Column_Number; j = j + 1;){
				value = get_2darray(Report1_Info,i,j);
				val = translate_value(value);
				W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0, W_LISTW_COLUMN, j, W_LISTW_STRING, val);			
			}		
			W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ITEMID, i);	
            W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0, W_LISTW_COLUMN, 0, W_LISTW_STRING, ITOASCII(Report1_Row_Number-i));
		}
	}
	else if(Report_Type == 1){
		for (i = 0; i < Report2_Row_Number; i = i + 1;){
			W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
			W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_INSERTROWS, 1);
			for ( j = 0; j < Report2_Column_Number; j = j + 1;){
				value = get_2darray(Report2_Info,i,j);
				val = translate_value(value);
				W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0, W_LISTW_COLUMN, j, W_LISTW_STRING, val);
			}		
			W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ITEMID, i);
            W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0, W_LISTW_COLUMN, 0, W_LISTW_STRING, ITOASCII(Report2_Row_Number-i));            
		}
	}	
	else if(Report_Type == 2){
		for (i = 0; i < Report3_Row_Number; i = i + 1;){
			W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
			W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_INSERTROWS, 1);
			for ( j = 0; j < Report3_Column_Number; j = j + 1;){
				value = get_2darray(Report3_Info,i,j);
				val = translate_value(value);
				W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0, W_LISTW_COLUMN, j, W_LISTW_STRING, val);			
			}		
			W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ITEMID, i);
            W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0, W_LISTW_COLUMN, 0, W_LISTW_STRING, ITOASCII(Report3_Row_Number-i));            
		}
	}	
		
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 1);
	
	/* 自动调整列宽度 Adjust the width of column automatically*/
	for (i=0; i < Grid_Column_Number; i = i + 1;){
		W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_COLUMN, i, W_LISTW_COLUMNWIDTH, -1);
	}
	
	/* 对生产信息列表进行排序 */
	/*W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_COLUMN, Grid_SortColumn, W_LISTW_SORT, Grid_SortDirection);*/
}


translate_value(value)
{
	if(ISSTRING(value)){
		return(value);
	}
	else if(ISINT(value)){
		return(ITOASCII(value));				
	}				
	else if(ISFLOAT(value)){
		value_s = "";
		S_PRINTF(value_s,"%.2f",value);
		return(value_s);				
	}
	return(value);
}


/*

**创建顶层窗体
**Create Top frame
*/
create_top_frame()
{
	mainform = W_INIT_FRAME();
	W_REALIZE_WINDOW(mainform,  W_FRAME_TITLE, 		"管系内场托盘表",
								W_FRAME_RESIZABLE,  W_RESIZE_HORIZONTALLY);	
	return(mainform);
}

/*
**创建显示报表内容的格栅
*/
create_grid(main_form)
{
	wobj = W_ADD_WINDOW(main_form, W_MULTISELECT, "DisplayGrid");
						   
	W_REALIZE_WINDOW(wobj,  W_FRAME_RIGHT_OF,    "Block_Name",
							W_FRAME_BELOW,       "panel_upperpart",
							W_LISTW_COLUMNS,     Grid_Column_Number,
							W_FRAME_SCROLLBAR,   W_SCROLLBAR_RIGHTEDGE,
							W_LISTW_HEADER_MODE, W_LISTW_HEADER_BUTTONS,
							W_FRAME_RESIZABLE,   W_RESIZE_HORIZONTALLY,
							W_LISTW_MODE_REPORT, 0,
							W_FRAME_COLS,        73, 
							W_FRAME_ROWS,        17,
							W_LISTW_CALLBACK,    1);						   
	W_SET_WINDOW_HANDLER(wobj, "grid_handler");
	
	/*
	**设置格栅的列标题
	*/	
	Set_Column_Title(wobj, Title1, Grid_Column_Number);				
	return(wobj);
}



quit_handler(item, event_type, button_value)
{
	exit();
	return(99);
}


grid_handler(window, event_type, row, column, item_id)
{  	
	if (event_type == W_EVENT_ITEM_SELECTED) {
		/* 处理格栅的排序 */
		if (row < 0 & column >= 0) {
			sort_grid(column,window);
		}		
		else if(row >= 0 & column == 0){		
			/* 获取选中的模型 */				
			get_selected_items();			
			auto_highlight();
			auto_scale_model();			
		}		
	}	
	/* 处理双击数据行的事件 */
	else if (event_type == W_EVENT_ITEM_DOUBLECLICKED) {	
		/* 获取选中的模型 */			
		get_selected_items();			
		auto_highlight();
		auto_scale_model();			
	}
	return(0);
}

auto_highlight()
{
	/* 处理模型加亮 */
	if (AutoHighLight == 1){
		/* 将已经加亮的模型恢复原来的颜色 */
		model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			highlight_object(model,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);
		PM_FREE_SET(temp);
		
		/* 加亮选中的模型 */
		model_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
		for (i = 0; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(Selected_Objects,i);
			highlight_object(model,TRUE);
			PM_ADD_OBJECT_TO_SET(model,High_Light_List);			
		}
	}
}

highlight_object(handle object_handle, int flag)
{
   obj_type = PM_GET_OBJDATA(object_handle,0,MMT_TAG_OBJTYPE);
   if(obj_type == MMT_OBT_GROUP){
	   group_members = PM_GET_OBJECTS_IN_GROUP(object_handle);
	   member_numbers = PM_NR_MEMBERS_IN_SET(group_members);
	   for (i = 0; i < member_numbers; i = i + 1;){
		   part_handle = PM_GET_MEMBER_IN_SET(group_members, i);
		   PM_HIGHLIGHT_OBJECT(part_handle, 0, flag);
		}
	}
	else{
	   PM_HIGHLIGHT_OBJECT(object_handle, 0, flag);
	}
}

auto_scale_model()
{
	/* 处理模型自动缩放 */
	if (AutoScale == 1){				
		model_number = PM_NR_MEMBERS_IN_SET(Selected_Objects);
		if (model_number == 1){
			model_handle = PM_GET_MEMBER_IN_SET(Selected_Objects,0);
			auto_scale(model_handle);
		}
	}
}

reorder_grid()
{
	if(Report_Type == 0){       
		for (i = 0; i < Report1_Row_Number; i = i + 1;){
            W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, i, W_LISTW_COLUMN, 0, W_LISTW_STRING, ITOASCII(i+1));            
		}
	}
	else if(Report_Type == 1){
		for (i = 0; i < Report2_Row_Number; i = i + 1;){	
            W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, i, W_LISTW_COLUMN, 0, W_LISTW_STRING, ITOASCII(i+1));             
		}
	}	
	else if(Report_Type == 2){
		for (i = 0; i < Report3_Row_Number; i = i + 1;){
            W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, i, W_LISTW_COLUMN, 0, W_LISTW_STRING, ITOASCII(i+1)); 
		}
	}	
}

sort_grid(column,window)
{
	/* A column header was clicked; sort the items */
	if (Grid_SortColumn == column) {
		if (Grid_SortDirection == 0) {
			Grid_SortDirection = 1;
		}
		else {
			Grid_SortDirection = 0;
		}
	}
	else {
		Grid_SortDirection = 1;
	}
	Grid_SortColumn = column;
	W_SET_WINDOW_ARGS(window, W_LISTW_COLUMN, column, W_LISTW_SORT, Grid_SortDirection);
    reorder_grid();
}

model_browsing_handler(item, event_type, button_value)
{
	W_UNMAP_FRAME(MainWindow);	
	/*selected_model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
	if (selected_model_number > 0){
		current_model = PM_GET_MEMBER_IN_SET(High_Light_List, 0);
		parts = PM_GET_OBJECTS_IN_GROUP(current_model);
		part = PM_GET_MEMBER_IN_SET( parts, 0);
		x0 = PM_GET_OBJDATA(part, 0, MMT_TAG_COGX);
		y0 = PM_GET_OBJDATA(part, 0, MMT_TAG_COGY);
		z0 = PM_GET_OBJDATA(part, 0, MMT_TAG_COGZ);
		x = SCAN_QUANT(1,x0);
		y = SCAN_QUANT(1,y0);
		z = SCAN_QUANT(1,z0);
		PM_SET_CURRENT_LOC(x, y, z);	
	}*/
	nth_part = 0;
	PM_PICK_OBJECT("浏览模型",nth_part);
	W_MAP_FRAME(MainWindow);
}


search_objects(item, event_type, button_value)
{
    fresh();
	query = PM_INIT_QUERY("GROUP");
	groups = PM_EXECUTE_QUERY(query);
		
	/* 获取管段 Get the pipe spool group */
	temp_list = PM_INIT_SET();
	
	if (!ISINT(groups)){
		group_number = PM_NR_MEMBERS_IN_SET(groups);
		for (i = 0; i < group_number; i = i + 1;){
			group_handle = PM_GET_MEMBER_IN_SET(groups, i);
			group_type = PM_GET_OBJDATA(group_handle, 0, MMT_TAG_GROUPTYPE);
			/* 过滤其它类型的组 Get rid of other type group*/
 			if (group_type == "0"){
                nth = 0;
                spool_name = PM_GET_OBJDATA(group_handle,nth,Tag_Spool_Name);   
                if(ISSTRING(spool_name)){                                        /*过滤掉未添加生产信息的管段*/                    	
                    parts = PM_GET_OBJECTS_IN_GROUP(group_handle);              
                    if (parts != 0){                                             /* 过滤不包含零件的组Get rid of group that content nothing */
                        part_number = PM_NR_MEMBERS_IN_SET(parts);
                        if (part_number !=0){
                            /* Get rid of valve*/
                            if (part_number == 1){
                                part = PM_GET_MEMBER_IN_SET(parts, 0);
                                part_type = PM_GET_OBJDATA(part, 0, MMT_TAG_OBJTYPE);
                                if(part_type != MMT_OBT_STANDC){
                                    result = PM_ADD_OBJECT_TO_SET(group_handle,temp_list);
                                }
                            }
                            else{
                                /* 将管段的handle保存到全局数组 */
                                result = PM_ADD_OBJECT_TO_SET(group_handle,temp_list);
                            }
                        }
                    }
                }
			}			
		}
	}
	
	model_number = PM_NR_MEMBERS_IN_SET(temp_list);
	if (model_number <= 0){
		return 0;
	}
	
	filter_model(temp_list);
		
	/* 将获得的模型添加到全局变量Pspool_List中 */
	PM_FREE_SET(Pspool_List);
	Pspool_List = PM_INIT_SET();		
	Pspool_List = PM_COPY_SET(temp_list); 	
	
	Pspool_Number = PM_NR_MEMBERS_IN_SET(Pspool_List);
	
	if (Pspool_Number <= 0){
		PM_FREE_SET(temp_list);
		return 0;
	}
	
	PM_FREE_SET(temp_list);
	/* 获取并发布生产信息 */
	get_report1_info();
	get_report2_info();
	get_report3_info();
	publish_report_info();
}

filter_model( models )
{
	/* 获取过滤条件 Get filter conditions*/
	block_name    =	W_GET_PANELITEM_ARG(Block_Name,		W_PANEL_VALUE);
	planning_unit = W_GET_PANELITEM_ARG(Planning_Unit,	W_PANEL_VALUE);	
	
	temp = PM_INIT_SET();
	
	/* 过滤掉不符合条件的模型 */
	group_number = PM_NR_MEMBERS_IN_SET(models);	
	for (i = 0; i < group_number; i = i + 1;){
		group_handle = PM_GET_MEMBER_IN_SET(models, i);	
		pipes = PM_GET_OBJECTS_IN_GROUP(group_handle);
		pipe = PM_GET_MEMBER_IN_SET(pipes,0);		
		model_block_name = PM_GET_OBJDATA(pipe,0,Tag_BlockNumber);
		if(!ISSTRING(model_block_name)){
            model_block_name = PM_GET_OBJDATA(pipe,0,Tag_SupperBlock);
            if(!ISSTRING(model_block_name)){
                model_block_name = "Unset";
            }			
		}
      		
		model_planning_unit = Get_Attribute_Value(group_handle, Tag_Spool_PlanningUnit);
		if(!ISSTRING(model_planning_unit)){
			model_planning_unit = "Unset";
		}
            
		check_block =  PATTERN_MATCH(model_block_name,block_name);
		check_planning = PATTERN_MATCH(model_planning_unit,planning_unit);
		
		if(check_block & check_planning){		
		   PM_ADD_OBJECT_TO_SET(group_handle,temp);
		}							
	}
	PM_SETOP_SUB(models,models);
	PM_SETOP_OR(models,temp);
	PM_FREE_SET(temp);
	return(0);
}

options_selected(item, event_type, dummy)
{
	s = W_GET_PANELITEM_ARG(item, W_PANEL_VALUE);
	if ( s == "00" ){
		AutoHighLight = 0;
		AutoScale = 0;	
		/* 将已经加亮的模型恢复原来的颜色 */
		model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			Highlight_Object(model,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);	
		PM_FREE_SET(temp);		
	}
	else if( s == "10"){
		AutoHighLight = 1;
		AutoScale = 0;	
	}
	else if( s == "11"){
		AutoHighLight = 1;
		AutoScale = 1;	
	}
	else if( s == "01"){
		AutoHighLight = 0;
		AutoScale = 1;
		/* 将已经加亮的模型恢复原来的颜色 */
		model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
		for (i = 0 ; i < model_number; i = i + 1){
			model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
			Highlight_Object(model,FALSE);
		}
		temp = PM_INIT_SET();
		High_Light_List = PM_COPY_SET(temp);
		PM_FREE_SET(temp);
	}		
	return(0);
}

create_panel_upperpart(mainform)
{
	panel_upperpart = W_ADD_WINDOW(mainform, W_PANEL, "panel_upperpart");
	W_REALIZE_WINDOW(panel_upperpart,   W_FRAME_X, 0,
										W_FRAME_Y, 0,
										W_FRAME_ROWS, 2,
										W_FRAME_COLS, 70);
							                  					
	Block_Name = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Block_Name");
	W_REALIZE_PANELITEM(Block_Name,	W_PANEL_ROW, 0, 
									W_PANEL_COL, 0,
									W_PANEL_LABEL, "分段名称:     ",
									W_PANEL_LENGTH, 15,
									W_PANEL_VALUE, "*",
									W_PANEL_CALLBACK, 1);
							              
	Planning_Unit = W_ADD_PANELITEM(panel_upperpart, W_PANEL_FILL, "Planning_Unit");
	W_REALIZE_PANELITEM(Planning_Unit,  W_PANEL_ROW,      0, 
	                                    W_PANEL_COL,      28,
										W_PANEL_LABEL,    "托盘代号:     ",
										W_PANEL_LENGTH,   15,
										W_PANEL_VALUE,    "*",
										W_PANEL_CALLBACK, 3);
							            						                  							                							                  
	search_stru = W_ADD_PANELITEM(panel_upperpart, W_PANEL_BUTTON, "search_stru");
	W_REALIZE_PANELITEM(search_stru,	W_PANEL_ROW, 	      0, 
										W_PANEL_COL,         55,
										W_PANEL_BUTTONIMAGE, "查找", 
										W_PANEL_WIDTH,       8,
										W_PANEL_BUTTONVALUE, 210,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);	
							               
	pick_spool = W_ADD_PANELITEM(panel_upperpart, W_PANEL_BUTTON, "pick_spool");
	W_REALIZE_PANELITEM(pick_spool,	W_PANEL_ROW,            0, 
	                                W_PANEL_COL,            65,
									W_PANEL_BUTTONIMAGE,    "点选", 
									W_PANEL_WIDTH,          8,
									W_PANEL_BUTTONVALUE,    210,
									W_PANEL_CALLBACK,       1,
                                    W_PANEL_SENSITIVITY,    0,
									W_PANEL_LAYOUT,         W_LAYOUT_HORIZONTAL);	


	report_type = W_ADD_PANELITEM(panel_upperpart, W_PANEL_CHOICE, "report_type");
	W_REALIZE_PANELITEM(report_type,	W_PANEL_ROW,            1, 
										W_PANEL_COL,            0,
										W_PANEL_LABEL,          "报表:  ",
										W_PANEL_CHOICESTRING,   "管子制造清册    ",
										W_PANEL_CHOICESTRING,   "内场加工配套表       ",
										W_PANEL_CHOICESTRING,   "复板清册  ",
										W_PANEL_ORDINALVALUE,   0,
										W_PANEL_CHOICESTYLE,	   W_STYLE_PUSHBUTTONS,
										W_PANEL_CALLBACK,       1);
										   
	Options = W_ADD_PANELITEM(panel_upperpart, W_PANEL_TOGGLE, "options");
	W_REALIZE_PANELITEM(Options, W_PANEL_ROW, 1, W_PANEL_COL, 58,
							 W_PANEL_LABEL, "",
							 W_PANEL_CHOICESTRING, "加亮   ",
							 W_PANEL_CHOICESTRING, "缩放   ",
							 W_PANEL_VALUE, "11",
							 W_PANEL_CHOICESTYLE,	W_STYLE_PUSHBUTTONS,
							 W_PANEL_CALLBACK, 1);			
					 							 
	W_SET_PANELITEM_HANDLER(search_stru, "search_objects");
	W_SET_PANELITEM_HANDLER(Options, "options_selected");
	W_SET_PANELITEM_HANDLER(pick_spool, "pick_objects");
	W_SET_PANELITEM_HANDLER(report_type, "report_type_handler");
	
	return(panel_upperpart);
}

pick_objects(item, event_type, button_value)
{
 	tmp = 0;
	flag = TRUE;
	temp = PM_INIT_SET();
	while(flag){	
		pick_part = PM_PICK_OBJECT("请选择管段", tmp, "PIPE");
		if (!ISINT(pick_part)){
			groups_handle = PM_GET_OBJECT_GROUP(pick_part, 0);
			if (!ISINT(groups_handle)){
				PM_ADD_OBJECT_TO_SET(groups_handle,temp);
				Highlight_Object(groups_handle,TRUE);
			}
			else{
				PM_RM_OBJECT_FROM_SET(groups_handle,temp);
				Highlight_Object(groups_handle,FALSE);			
			}	
		}	
		else{
			flag = FALSE;		
		}
	}
		
	res = PM_SETOP_OR(Pspool_List,temp);
	
	Pspool_Number = PM_NR_MEMBERS_IN_SET(Pspool_List);
	
	if (Pspool_Number <= 0){
		PM_FREE_SET(temp);
		return 0;
	}
	
	/* 获取并发布生产信息 */
	PM_FREE_SET(temp);
	/* 获取并发布生产信息 */
	get_report1_info();
	get_report2_info();
	get_report3_info();
	publish_report_info();

	for (i = 0 ; i < Pspool_Number; i = i + 1){
		model = PM_GET_MEMBER_IN_SET(Pspool_List,i);
		Highlight_Object(model,FALSE);
	}
		
	return(0);
}

report_type_handler(item, event_type, selection)
{
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_ROW, 0);
	W_SET_WINDOW_ARGS(DisplayGrid, W_LISTW_DELETEROWS, -1);
	if(selection == 0){
		Report_Type = 0;
		Grid_Column_Number = Report1_Column_Number;
		W_SET_WINDOW_ARGS(wobj,	W_LISTW_COLUMNS,	Grid_Column_Number);
		Set_Column_Title(wobj, Title1, Grid_Column_Number);        
		if(Report1_Row_Number != 0){
			publish_report_info();
		}
	}
	else if(selection == 1){
		Report_Type = 1;
		Grid_Column_Number = Report2_Column_Number;
		W_SET_WINDOW_ARGS(wobj,	W_LISTW_COLUMNS,	Grid_Column_Number);
		Set_Column_Title(wobj, Title2, Grid_Column_Number);
		if(Report2_Row_Number != 0){
			publish_report_info();
		}
	}
	else if(selection == 2){
		Report_Type = 2;
		Grid_Column_Number = Report3_Column_Number;
		W_SET_WINDOW_ARGS(wobj,	W_LISTW_COLUMNS,	Grid_Column_Number);
		Set_Column_Title(wobj, Title3, Grid_Column_Number);
		if(Report3_Row_Number != 0){
			publish_report_info();
		}
	}
	return(0);
}

create_panel_underpart(mainform)
{	
	panel_underpart = W_ADD_WINDOW(mainform, W_PANEL, "panel_underpart");
	W_REALIZE_WINDOW(panel_underpart,   W_FRAME_X, 0,
							            W_FRAME_Y, 0);

	Report_Template = W_ADD_PANELITEM(panel_underpart, W_PANEL_FILL, "Report_Template");
	W_REALIZE_PANELITEM(Report_Template,	W_PANEL_ROW,         20, 
											W_PANEL_COL,         0,
											W_PANEL_LABEL,       "报表模板:     ",
											W_PANEL_LENGTH,      52,
											W_PANEL_VALUE,       "*",
											W_PANEL_SENSITIVITY, 1,
											W_PANEL_CALLBACK,    1);

	select_template = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "select_template");
	W_REALIZE_PANELITEM(select_template,	W_PANEL_ROW, 	     20, 
											W_PANEL_COL,         63,
											W_PANEL_BUTTONIMAGE, "选择模板", 
											W_PANEL_WIDTH,       10,
											W_PANEL_BUTTONVALUE, 201,
											W_PANEL_CALLBACK,    1,
											W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);							                     

	Report_Path = W_ADD_PANELITEM(panel_underpart, W_PANEL_FILL, "Report_Path");
	W_REALIZE_PANELITEM(Report_Path,	W_PANEL_ROW,         21, 
										W_PANEL_COL,         0,
										W_PANEL_LABEL,       "报表路径:     ",
										W_PANEL_LENGTH,      52,
										W_PANEL_VALUE,       "*",
										W_PANEL_SENSITIVITY, 1,
										W_PANEL_CALLBACK,    1);	
							                     
	select_path = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "select_path");
	W_REALIZE_PANELITEM(select_path,	W_PANEL_ROW, 	     21, 
										W_PANEL_COL,         63,
										W_PANEL_BUTTONIMAGE, "选择路径", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 202,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);						                     
							                  
	export_report = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "export_report");
	W_REALIZE_PANELITEM(export_report,  W_PANEL_ROW, 	      22, 
	                                    W_PANEL_COL,         0,
										W_PANEL_BUTTONIMAGE, "导出报表", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 203,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);							    
														 							 
	model_browsing = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "model_browsing");
	W_REALIZE_PANELITEM(model_browsing, W_PANEL_ROW, 	     22, 
										W_PANEL_COL,         52,
										W_PANEL_BUTTONIMAGE, "模型浏览", 
										W_PANEL_WIDTH,       10,
										W_PANEL_BUTTONVALUE, 204,
										W_PANEL_CALLBACK,    1,
										W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);
							 						 							 							 
	quit = W_ADD_PANELITEM(panel_underpart, W_PANEL_BUTTON, "quit");
	W_REALIZE_PANELITEM(quit,	W_PANEL_ROW, 	     22, 
								W_PANEL_COL,         63,
								W_PANEL_BUTTONIMAGE, "退出", 
								W_PANEL_WIDTH,       10,
								W_PANEL_BUTTONVALUE, 205,
								W_PANEL_CALLBACK,    1,
								W_PANEL_CLOSEBUTTON, 1,
								W_PANEL_LAYOUT,      W_LAYOUT_HORIZONTAL);	
							 
	W_SET_PANELITEM_HANDLER(quit, "quit_handler");
	W_SET_PANELITEM_HANDLER(model_browsing, "model_browsing_handler");
	W_SET_PANELITEM_HANDLER(export_report, "export_to_excel");
	W_SET_PANELITEM_HANDLER(select_path, "select_path_handler");
	W_SET_PANELITEM_HANDLER(select_template, "select_template_handler");
	W_SET_PANELITEM_HANDLER(Report_Path, "report_path_handler");
	
	return(panel_underpart);
}

report_path_handler(item, event_type, dummy)
{
	init_value = W_GET_PANELITEM_ARG(Report_Path,W_PANEL_VALUE);
	U_CONFIRM(init_value);
}




select_path_handler(item, event_type, dummy)
{
   path = U_GET_DIRECTORY("选择报表保存路径","C:/TEMP/","",0);
   if(ISSTRING(path)){
      W_SET_PANELITEM_ARGS(Report_Path,W_PANEL_VALUE,path+"/");
      SET_STRING_DEFAULT(DefaultModuleName,DefaultReportPath,path);
   }
}

select_template_handler(item, event_type, dummy)
{
   flag = 0;
   template = U_GET_FILENAME("请选择模板文件", "P:\\报表模板\\","管系内场托盘表模板.xlsx", "Excel File(*.xlsx)",2 ,flag);
   if(ISSTRING(template)){
      W_SET_PANELITEM_ARGS(Report_Template,W_PANEL_VALUE,template);
      SET_STRING_DEFAULT(DefaultModuleName,DefaultTemplatePath,template);
   }
}


export_to_excel(item, event_type, dummy)
{
	random_string = Get_Random_String();
	DataFileName = DataFilePath + "\\PipingReport_" + random_string + ".txt";
   
	if ( F_EXIST(DataFileName) ){
		check = F_DELETE_FILE(DataFileName);
		if (check == -1){
			U_MESSAGEBOX("请先关闭文件" + DataFileName, U_MB_ERROR, U_MB_OK, U_MB_OK);
			return(-1);
		}
	}
	
	flag = F_CREATE_FILE(DataFileName);
	if (flag == -1){
		U_CONFIRM("用户对文件:" + DataFileName + "所在路径没有写权限" );
		return(-1);
	}

	file = F_OPEN_FILE(DataFileName,"w");
	
	/* 获取模板文件 */
	unix_tmp_path = W_GET_PANELITEM_ARG(Report_Template,W_PANEL_VALUE);

	if(!F_EXIST(unix_tmp_path)){
		msg = "模板文件 <" + unix_tmp_path + "> 不存在";
		U_CONFIRM(msg);
		return(-1);
	}	
	
	/* 获取.NET程序路径 */
	unix_exe_path = SYS_GETENV("MarineToolkit") + "\\NET_Programs\\SDARI_Piping_Report.exe";

	/*获取报表文件(excel)名称*/
	U_INIT_DIALOG("请输入报表文件名称");
	name_f = U_SET_STR("Excel文件名:", "", 20);
	if(U_DIALOG() < 0){
		return(0);
	}
	doc_name = U_GET_STR(name_f);
	if(doc_name == ""){
		msg = "文件名不能为空";
		U_MESSAGEBOX(msg, U_MB_WARNING, U_MB_OK, U_OK);
		return(0);
	}
	
	/*获取报表文件的保存路径*/
	unix_rep_path = W_GET_PANELITEM_ARG(Report_Path,W_PANEL_VALUE);
	if(!F_EXIST(unix_rep_path)){
		msg = "路径 <" + unix_rep_path + "> 不存在";
		U_MESSAGEBOX(msg, U_MB_ERROR, U_MB_OK, U_OK);
		return(-1);
	}	
	
	unix_rep_file = unix_rep_path + "/" + doc_name + ".xlsx";
	
	win_tmp_path = S_REPLACE(unix_tmp_path, "/", "\\");
	win_exe_path = S_REPLACE(unix_exe_path, "/", "\\");
	win_rep_file = S_REPLACE(unix_rep_file, "/", "\\");
	
	write_to_temp_file(file);
	F_CLOSE_FILE(file);
	
	cmd = win_exe_path + " " + win_tmp_path + " " + DataFileName + " " + win_rep_file;
	SYS_EXEC_CMND(cmd);		
	
	return(0);
}


get_piece_cutting_length(pipe,nth_part)
{
   length   = PM_GET_OBJDATA(pipe,nth_part,MMT_TAG_LENGTH);
   return(String_To_Float(length));
}


write_to_temp_file(file)
{   
	/*项目信息*/
	project_number = "H490000";
	planning_unit = "E41PA";
	drawing_number = "D00000001";
	info = "管系内场托盘表" + ",#" + project_number + ",#" + planning_unit + ",#" + drawing_number;
   	F_WRITE_STR(file,info);
   	F_WRITE_NEWLINE(file);	
	
	info = "Table,#管子制造清册" + ",#4,#1,#13";
   	F_WRITE_STR(file,info);
   	F_WRITE_NEWLINE(file);	 
	for(i=0;i<Report1_Row_Number;i=i+1;){
		info = "Line,#";
		for(k=0;k<Report1_Column_Number;k=k+1;){
			value = get_2darray(Report1_Info,i,k);
			info = info + value + ",#";	
		}
		F_WRITE_STR(file,info);
		F_WRITE_NEWLINE(file);	
	}
	
	info = "Table,#内场加工配套表" + ",#4,#1,#7";
   	F_WRITE_STR(file,info);
   	F_WRITE_NEWLINE(file);	

	for(i=0;i<Report2_Row_Number;i=i+1;){
		info = "Line,#";
		for(k=0;k<Report2_Column_Number;k=k+1;){
			value = get_2darray(Report2_Info,i,k);
			val = translate_value(value);
			info = info + val + ",#";	
		}
		F_WRITE_STR(file,info);
		F_WRITE_NEWLINE(file);	
	}

	info = "Table,#复板清册" + ",#4,#1,#8";
   	F_WRITE_STR(file,info);
   	F_WRITE_NEWLINE(file);	

	for(i=0;i<Report3_Row_Number;i=i+1;){
		info = "Line,#";
		for(k=0;k<Report3_Column_Number;k=k+1;){
			value = get_2darray(Report3_Info,i,k);
			val = translate_value(value);
			info = info + val + ",#";	
		}
		F_WRITE_STR(file,info);
		F_WRITE_NEWLINE(file);	
	}
	
	return(0);   
}


main()
{
	init();
	mainform  = create_top_frame();	
	Panel_upperpart = create_panel_upperpart(mainform);	
	DisplayGrid  = create_grid(mainform);
	Panel_underpart = create_panel_underpart(mainform);		
	initiate();
	MainWindow = mainform;
	
	
	W_MAP_FRAME(mainform);
	W_RUN_FRAME(mainform);
	W_UNMAP_FRAME(mainform);
	W_DESTROY_FRAME(mainform);
}


exit()
{
	/* 将已经加亮的模型恢复原来的颜色 */
	model_number = PM_NR_MEMBERS_IN_SET(High_Light_List);
	for (i = 0 ; i < model_number; i = i + 1){
		model = PM_GET_MEMBER_IN_SET(High_Light_List,i);
		Highlight_Object(model,FALSE);
	}
	PM_FREE_SET(Pspool_List);
	PM_FREE_SET(High_Light_List);
	PM_FREE_SET(Selected_Objects);
	A_FREE(Report1_Objects);
}

/*
**将指定的模型自动放大到整个视口
*/
auto_scale(model_handle)
{
	next = 0;
	while (TRUE){
		source = "";
		status = 0;
		view_name = PM_GET_NAME_OF_NEXT_VIEW(source, next, status);
		if ( ISINT(view_name)){
			return(0);
		}
		else{
			if (status == 1){
				flag = 0;
				view_handle = PM_GET_HANDLE_OF_OPENED_VIEW(view_name,flag);
				if ( !ISINT(view_handle)){
					type = PM_GET_OBJDATA( model_handle, 0, MMT_TAG_OBJTYPE);
					if (type == MMT_OBT_GROUP){
						umin = 0;
						umax = 0;
						vmin = 0;
						vmax = 0;
						wmin = 0;
						wmax = 0;
						result = Get_Bbox_Of_Group_In_View(model_handle, view_handle, umin, umax, vmin, vmax, wmin, wmax);
						if ( result >= 0 ){
							PM_SET_VIEW_PARAMETERS(view_handle,"WINDOW",umin,umax, vmin,vmax);
						}
                        models = PM_GET_OBJECTS_IN_GROUP(model_handle);
                        if(!ISINT(models)){
                            PM_GET_BBOX_OF_SET(models,umin, umax, vmin, vmax, wmin, wmax);
                            x = (umin+umax)/2;
                            y = (vmin+vmax)/2;
                            z = (wmin+wmax)/2;
                            PM_SET_CURRENT_LOC(x,y,z);                        
                        }
					}
					else{
						umin = 0;
						umax = 0;
						vmin = 0;
						vmax = 0;
						wmin = 0;
						wmax = 0;
						result = PM_GET_BBOX_OF_OBJECT_IN_VIEW(model_handle, view_handle, umin, umax, vmin, vmax, wmin, wmax);
						if ( result >= 0){
							PM_SET_VIEW_PARAMETERS(view_handle,"WINDOW",umin,umax, vmin,vmax);
						}
                        PM_GET_BBOX_OF_OBJECT(model_handle,umin, umax, vmin, vmax, wmin, wmax);
                        x = (umin+umax)/2;
                        y = (vmin+vmax)/2;
                        z = (wmin+wmax)/2;
                        PM_SET_CURRENT_LOC(x,y,z);                        
					}
				}
			}
		}
	}
	return(0);
}