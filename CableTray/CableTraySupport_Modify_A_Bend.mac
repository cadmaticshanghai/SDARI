/* $Id: CableTraySupport_A_Bend.mac,v1.0.0 2019/07/07 Jack.Leng $ */

/*
**	这个程序用于参数化生成电缆桥架平面弯的支架.
*/

#include "include/dmutil.h"
#include "include/win.h"
#include "include/win_panel.h"
#include "include/PmMgeTags.h"
#include "include/pm.h"
#include "include/pm_core_tags.h"
#include "include/array.mac"
#include "include/geoutils.h"
#include "include/cos.h"
#include "include/dw.h"
#include "include/PmDirectionUtils.h"
#include "include/quants.h"

#include "$MarineToolkit/CableTray/CableTraySupport_A.h"

global string  Support_Type  = "CTS_A_Bend";
global handle Support_Handle;
global handle MainWindow;
global string  Icon_Path = "$MarineToolkit/ICONS/CableTraySupport/";

/* panel */
global handle Template, Information, Material, Command, Parameters, Position, Orientation;

/* panel items */
global handle System_Name, Select_System, Support_Name, Pick_Support, Support_Description, Planning_Unit;
global handle Support_Leg, Support_Pad, Support_Pad_Switch, Support_Pad_Type;
global handle Select_Support_Leg, Select_Support_Pad, Pad_Clearance, Pad_Radius;
global handle Create_Support, Move_Legs;
global handle Support_Align_Option;
global handle Support_Direction_Option;
global handle Support_Layer_Option;
global handle Support_Layer_H1,Support_Layer_H2;
global handle Support_Leg1_L,Support_Leg1_R;
global handle Support_Leg2_L,Support_Leg2_R;
global handle Support_Leg3_L,Support_Leg3_R;
global handle Support_Interval1,Support_Interval2,Support_Interval3;
global handle Support_Leg_Number;

/* support Information */
global string SystemName = "";
global int    SystemId = 0;
global string SupportName = "";
global string SupportDescription = "Undefined";
global string Pad_Switch = "on";
global string Pad_Type = "R";
global string Align_Position = "T";

/* material */
global string Support_Leg_Pid = "";
global string Support_Pad_Pid = "";

/*  */
global handle Leg_Heights;              /* 支撑脚高度 */
global handle Pads,Legs,Leg_Position;   /* 垫板，支撑脚零件参数，支撑脚起点位置 */
global handle Panel_Handle;             /* 支撑脚落脚船体结构 */
global int    Leg_Number    = 3;        /* 支撑脚对数 */
global handle Intervals;                /* 用于保存支持脚距离 */
global handle Leg_Direction;            /* 支撑脚角钢开口方向 */

/*data of cable tray*/
global handle Cable_Tray_Handle;        /* 电缆托架的handle */
global handle Null_Handle   = 0;        /* 空的handle */
global handle Cable_Tray_Data;          /* 托架数据 */
global float  Tray_Dx     = 0;          /* 托架敷线面的法线方向 */
global float  Tray_Dy     = 0;          /* 托架敷线面的法线方向 */
global float  Tray_Dz     = 0;          /* 托架敷线面的法线方向 */ 
global float  Tray_Ori_x  = 0;          /* 托架圆心点坐标 */
global float  Tray_Ori_y  = 0;          /* 托架圆心点坐标 */
global float  Tray_Ori_z  = 0;          /* 托架圆心点坐标 */ 
global float  Tray_OR_x   = 0;          /* 托架端面外侧基准点坐标 */
global float  Tray_OR_y   = 0;          /* 托架端面外侧基准点坐标 */
global float  Tray_OR_z   = 0;          /* 托架端面外侧基准点坐标 */ 
global float  Tray_IR_x   = 0;          /* 托架端面内侧基准点坐标 */
global float  Tray_IR_y   = 0;          /* 托架端面内侧基准点坐标 */
global float  Tray_IR_z   = 0;          /* 托架端面内侧基准点坐标 */ 

/* data of support*/
global float Support_Dx     = 0;        /* 支架方向（从托架指向支撑面） */
global float Support_Dy     = 0;        /* 支架方向（从托架指向支撑面） */
global float Support_Dz     = 0;        /* 支架方向（从托架指向支撑面） */ 

/*hull panel data*/
global float Panel_X        = 0;        /* 支架支撑结构的原点坐标 */
global float Panel_Y        = 0;        /* 支架支撑结构的原点坐标 */
global float Panel_Z        = 0;        /* 支架支撑结构的原点坐标 */
global float Panel_Dx       = 0;        /* 支架支撑面的法线方向 */
global float Panel_Dy       = 0;        /* 支架支撑面的法线方向 */
global float Panel_Dz       = 0;        /* 支架支撑面的法线方向 */
global float Panel_Thk      = 0;        /* 支架支撑结构的厚度 */

global int   Modify_flag        = 0;
global float Angle_Tolerance    = 1;
global int   PickPosition       = 0;      /*if user pick support position directly, then value = 1*/
global int   Support_Direction  = 1;      /* 如果托架敷线面朝向支撑面则为1，否则为0 */
global int   Support_Layer      = 1;      /* 单层托架 1，双层托架2，三层托架3*/
/*
**创建顶层窗体
**Create Top frame
*/
create_top_frame()
{
	mainform = W_INIT_FRAME();
	W_REALIZE_WINDOW(mainform, W_FRAME_TITLE, "电缆托架支吊架 - 平面弯头");
	return(mainform);
}

/*
**创建用于显示灯架模板的面板
**
*/
create_template_panel(mainform)
{
    /* 获取图标保存路径 */
    icon_path = Icon_Path;
    /* 图标完整文件名（包含路径） */
    pic = icon_path + "CTS_A_Bend.bmp";

    /* 向主窗体添加一个面板，用于显示参数化模型样板 */
	Template = W_ADD_WINDOW(mainform, W_PANEL, "Template");
	W_REALIZE_WINDOW(Template,  W_FRAME_X,      0,
							    W_FRAME_Y,      0,
							    W_FRAME_WIDTH,  600,
							    W_FRAME_HEIGHT, 300);

	LblImage_h = W_ADD_PANELITEM(Template, W_PANEL_MESSAGE, "LblImage_h");

	W_REALIZE_PANELITEM(LblImage_h,  W_PANEL_X,         0,
	                                 W_PANEL_Y,         0,
	                                 W_PANEL_WIDTH,     600,
	                                 W_PANEL_HEIGHT,    300);

	W_SET_PANELITEM_ARGS(LblImage_h,  W_PANEL_LABELIMAGE,   pic,
	                                  W_PANEL_SHOW,         1);
	return(Template);
}

/*
**panel for basic information of support
**
*/
create_info_panel(mainform)
{
    /* create panel for basic information of support  */
    Information = W_ADD_WINDOW(mainform, W_PANEL, "Information");

    /* 设置面板参数 */
	W_REALIZE_WINDOW(Information,   W_FRAME_X,      0,
							        W_FRAME_Y,      310,
							        W_FRAME_WIDTH,  410,
							        W_FRAME_HEIGHT, 100);

	title = W_ADD_PANELITEM(Information, W_PANEL_MESSAGE, "title");

	W_REALIZE_PANELITEM(title,  W_PANEL_ROW,	0,
		                        W_PANEL_COL,	0,
		                        W_PANEL_LABEL,	"支吊架信息");

    seperate_line = W_ADD_PANELITEM(Information, W_PANEL_MESSAGE, "seperate_line");
	W_REALIZE_PANELITEM(seperate_line,  W_PANEL_ROW,        0,
	                                    W_PANEL_COL,        7,
		                                W_PANEL_LABEL,      "",
		                                W_PANEL_SEPARATOR,  1);

    /* support system */
	System_Name = W_ADD_PANELITEM(Information, W_PANEL_FILL, "System_Name");
	W_REALIZE_PANELITEM(System_Name,    W_PANEL_ROW,        1,
	                                    W_PANEL_COL,        0,
							            W_PANEL_LABEL,      "所属系统:     ",
							            W_PANEL_LENGTH,     23,
							            W_PANEL_VALUE,      "Undefined",
							            W_PANEL_CALLBACK,   1);
	W_SET_PANELITEM_HANDLER(System_Name, "system_name_handler");

	Select_System = W_ADD_PANELITEM(Information, W_PANEL_BUTTON, "Select_System");
	W_REALIZE_PANELITEM(Select_System,  W_PANEL_ROW,            1,
	                                    W_PANEL_COL,            34,
                  						W_PANEL_BUTTONIMAGE,    "选择系统",
                  						W_PANEL_WIDTH,          10,
                  						W_PANEL_BUTTONVALUE,    100,
                  						W_PANEL_CALLBACK,       1,
                  						W_PANEL_LAYOUT,         W_LAYOUT_HORIZONTAL);
    W_SET_PANELITEM_HANDLER(Select_System, "select_system_handler");

    /* support name */
	Support_Name = W_ADD_PANELITEM(Information, W_PANEL_FILL, "Support_Name");
	W_REALIZE_PANELITEM(Support_Name,   W_PANEL_ROW,        2,
                                        W_PANEL_COL,        0,
							            W_PANEL_LABEL,      "支架编号:     ",
							            W_PANEL_LENGTH,     23,
							            W_PANEL_VALUE,      "Undefined",
							            W_PANEL_CALLBACK,   1);
	W_SET_PANELITEM_HANDLER(Support_Name, "support_name_handler");

	Pick_Support = W_ADD_PANELITEM(Information, W_PANEL_BUTTON, "Pick_Support");
	W_REALIZE_PANELITEM(Pick_Support,   W_PANEL_ROW,            2,
	                                    W_PANEL_COL,            34,
                  						W_PANEL_BUTTONIMAGE,    "选择支架",
                  						W_PANEL_WIDTH,          10,
                  						W_PANEL_BUTTONVALUE,    101,
                  						W_PANEL_CALLBACK,       1,
                  						W_PANEL_LAYOUT,         W_LAYOUT_HORIZONTAL);
    W_SET_PANELITEM_HANDLER(Pick_Support, "pick_support_handler");

    /* support description */
	Support_Description = W_ADD_PANELITEM(Information, W_PANEL_FILL, "Support_Description");
	W_REALIZE_PANELITEM(Support_Description,    W_PANEL_ROW,        3,
                                                W_PANEL_COL,        0,
							                    W_PANEL_LABEL,      "支架名称:     ",
							                    W_PANEL_LENGTH,     23,
							                    W_PANEL_VALUE,      "Undefined",
							                    W_PANEL_CALLBACK,   1);
	W_SET_PANELITEM_HANDLER(Support_Description, "support_description_handler");

    /* support planning unit */
	Planning_Unit = W_ADD_PANELITEM(Information, W_PANEL_FILL, "Planning_Unit");
	W_REALIZE_PANELITEM(Planning_Unit,  W_PANEL_ROW,        4,
                                        W_PANEL_COL,        0,
							            W_PANEL_LABEL,      "托盘编号:     ",
							            W_PANEL_LENGTH,     23,
							            W_PANEL_VALUE,      "9999",
							            W_PANEL_CALLBACK,   1);
	W_SET_PANELITEM_HANDLER(Planning_Unit, "support_planning_unit_handler");

   return(Information);
}

system_name_handler(item, event_type, dummy)
{
    return(0);
}

support_name_handler(item, event_type, dummy)
{
    if(event_type == W_EVENT_ITEM_LEFT){
        support_name = W_GET_PANELITEM_ARG(item, W_PANEL_VALUE);
        support_handle = PM_FIND_BY_NAME(support_name);

        /* if the model group with input name already exist, then ...*/
        if(support_handle != 0){
            group_type = PM_GET_OBJDATA(support_handle, 0, MMT_TAG_GROUPTYPE);
            /* model group with input name isn't cable tray support */
            if(group_type != Group_Type){
                U_CONFIRM("模型已经存在，但不是电缆托架支架");
                W_SET_PANELITEM_ARGS(Support_Name, W_PANEL_VALUE, "Undefined");
                return(0);
            }
            /* if the model group with input name is cable tray support  */
            else{
                type = PM_GET_OBJDATA(support_handle, 0, SupportType);
                if(type != Support_Type){
                    info = "模型已经存在且类型为" + type + ",这个程序只能处理类型为" + Support_Type + "的电缆托架支架。";
	                U_CONFIRM(info);
	                return(0);
	            }
                res = U_YESNO("模型已经存在，是否修改？",1);
                if (res == 1){
                    load_support_data(support_name);
	                W_SET_PANELITEM_ARGS(Create_Support, W_PANEL_SENSITIVITY,0);
                    W_SET_PANELITEM_ARGS(Move_Legs, W_PANEL_SENSITIVITY,1);
	                Modify_flag = 1;
                    return(0);
                }
                else{
                   W_SET_PANELITEM_ARGS(item, W_PANEL_VALUE, "Undefined");
                   return(0);
                }
            }
        }
        else{
	        W_SET_PANELITEM_ARGS(Create_Support, W_PANEL_SENSITIVITY,1);
            W_SET_PANELITEM_ARGS(Move_Legs, W_PANEL_SENSITIVITY,0);
            Modify_flag = 0;
        }
    }
    return(0);
}

support_description_handler(item, event_type, dummy)
{
    if (event_type == W_EVENT_ITEM_LEFT){
        SupportDescription = W_GET_PANELITEM_ARG(item, W_PANEL_VALUE);
        SET_STRING_DEFAULT("CableTraySupport_Bend", "Support_Description", SupportDescription);
        if(Modify_flag){
            /* define undo cache */
            st = PM_UM_OPEN_CHANGE("修改电缆托架支吊架:[" + SupportName+"]的名称为<"+SupportDescription+">");
            Set_Attribute_Value(Support_Handle,SupportDes,SupportDescription);

            supp_parts = PM_GET_OBJECTS_IN_GROUP(Support_Handle);
            part_number = PM_NR_MEMBERS_IN_SET(supp_parts);        
            for(i=0;i<part_number;i=i+1;){
                part = PM_GET_MEMBER_IN_SET(supp_parts,i);
                /*part_id = PM_GET_OBJDATA(part,0, MMT_TAG_PARTID);*/
                obj_type = PM_GET_OBJDATA(part,0, MMT_TAG_OBJTYPE);
                if (obj_type==5){
                    xmin = 0; xmax = 0; ymin = 0; ymax = 0; zmin = 0; zmax = 0;
                    res = PM_GET_BBOX_OF_OBJECT(part, xmin, xmax, ymin, ymax, zmin, zmax); 
                    trays = search_mdels_intersect_box(xmin,ymin,zmin,xmax,ymax,zmax,7);
                    if(!ISINT(trays)){
                    tray_number = PM_NR_MEMBERS_IN_SET(trays); 
                        for(j=0;j<tray_number;j=j+1;){
                            tray_handle = PM_GET_MEMBER_IN_SET(trays,j);
                            Set_Attribute_Value(tray_handle,Tag_Tray_Label,SupportDescription); 
                        }
                    }
                }
            }
            st = PM_UM_CLOSE_CHANGE();
        }
    }
    return(0);
}

support_planning_unit_handler(item, event_type, dummy)
{
    if (event_type == W_EVENT_ITEM_LEFT){
        planning_unit = W_GET_PANELITEM_ARG(item, W_PANEL_VALUE);
        SET_STRING_DEFAULT("CableTraySupport_Bend", "Planning_Unit", planning_unit);
        if(Modify_flag){
            /* define undo cache */
            st = PM_UM_OPEN_CHANGE("修改电缆托架支吊架:[" + SupportName+"]的托盘编号为<"+planning_unit+">");
            Set_Attribute_Value(Support_Handle,PlanningUnit,planning_unit);
            st = PM_UM_CLOSE_CHANGE();
        }
    }
    return(0);
}

select_system_handler(item, event_type, button_value)
{
    system_name = PM_SELECT_SYSTEM();
	if(ISINT(system_name)){
	    U_MESSAGE("系统选择取消");
		return(0);
	}
	else {
		U_MESSAGE("选择系统<" + system_name + ">");
		SystemName = system_name;
		SystemId = PM_GET_SYSTEM_ID(system_name);
		W_SET_PANELITEM_ARGS(System_Name, W_PANEL_VALUE, system_name);
		SET_STRING_DEFAULT("CableTraySupport_Bend", "System_Name", system_name);
		if(Modify_flag){
            /* define undo cache */
            st = PM_UM_OPEN_CHANGE("修改电缆托架支吊架:[" + SupportName+"]所属系统为<"+system_name+">");
		    models = PM_GET_OBJECTS_IN_GROUP(Support_Handle);
		    model_number = PM_NR_MEMBERS_IN_SET(models);
		    for(i=0;i<model_number;i=i+1;){
		        object = PM_GET_MEMBER_IN_SET(models,i);
		        PM_SET_OBJECT_SYSTEM(object,system_name);
		    }
		    st = PM_UM_CLOSE_CHANGE();
		}
	}
	return(0);
}

pick_support_handler(item, event_type, button_value)
{
    tmp = 0;
    picked_object_handle = PM_PICK_OBJECT("请选择电缆托架支吊架", tmp, "STRUCTCMP","BEAM");
	if (!ISINT(picked_object_handle)){
        /*get name of support group*/
		group_handle = PM_GET_OBJECT_GROUP(picked_object_handle, Group_Type_I);
	    if (ISINT(group_handle)){
	        U_CONFIRM("此零件不属于任何电缆托架支吊架");
	        W_SET_PANELITEM_ARGS(Support_Name, W_PANEL_VALUE, "Undefined");
	        return(0);
	    }

		group_name = PM_GET_OBJDATA(group_handle,0,MMT_TAG_OBJNAME);
	    /* is the type of support match with this script */
	    type = PM_GET_OBJDATA(group_handle, 0, SupportType);
	    if(ISINT(type)){
	        U_CONFIRM("此零件不属于任何电缆托架支吊架");
	        W_SET_PANELITEM_ARGS(Support_Name, W_PANEL_VALUE, "Undefined");
	        return(0);
	    }
	    if(type != Support_Type){
	        info = "选择的电缆托架支吊架类型为" + type + ",这个程序只能处理类型为" + Support_Type + "的电缆托架支吊架。";
	        U_CONFIRM(info);
	        return(0);
	    }
		/*get necessary data of support*/
		load_support_data(group_name);
        W_SET_PANELITEM_ARGS(Create_Support, W_PANEL_SENSITIVITY,0);
        W_SET_PANELITEM_ARGS(Move_Legs, W_PANEL_SENSITIVITY,1);
        Modify_flag = 1;
	}
	else{
	    return(0);
	}
    return(0);
}

load_support_data(string support_name)
{
    W_SET_PANELITEM_ARGS(Support_Name, W_PANEL_VALUE, support_name);
    group_handle = PM_FIND_BY_NAME(support_name);
    Support_Handle = group_handle;

    /*get support parts handle */
    parts = PM_GET_OBJECTS_IN_GROUP(Support_Handle);
    p_number = PM_NR_MEMBERS_IN_SET(parts);
    part1_0 = "";
    part1_1 = "";
    part1_2 = "";
    part1_3 = "";
    part1_4 = "";
    part1_5 = "";
    part2_0 = "";
    part2_1 = "";
    part2_2 = "";
    part2_3 = "";
    part2_4 = "";
    part2_5 = "";
    bar_part = "";
    pad_part = "";
    for (i = 0; i < p_number; i = i + 1;){
        part = PM_GET_MEMBER_IN_SET(parts, i);
        obj_type = PM_GET_OBJDATA(part, 0, MMT_TAG_OBJTYPE);
        if(obj_type == "5"){	
            bar_part = part;
        }
        if(obj_type == "4"){	
            pad_part = part;
        }
        part_number = Get_Attribute_Value(part,Part_Number);
        if(part_number == "1-0"){
            part1_0 = part;
        }
        else if(part_number == "1-1"){
            part1_1 = part;
        }
        else if(part_number == "1-2"){
            part1_2 = part;
        }
        else if(part_number == "1-3"){
            part1_3 = part;
        }
        else if(part_number == "1-4"){
            part1_4 = part;
        }
        else if(part_number == "1-5"){
            part1_5 = part;
        }
        else if(part_number == "2-0"){
            part2_0 = part;
        }
        else if(part_number == "2-1"){
            part2_1 = part;
        }
        else if(part_number == "2-2"){
            part2_2 = part;
        }
        else if(part_number == "2-3"){
            part2_3 = part;
        }
        else if(part_number == "2-4"){
            part2_4 = part;
        }
        else if(part_number == "2-5"){
            part2_5 = part;
        }
    }

    /* get support description*/
    des = Get_Attribute_Value(group_handle, SupportDes);
    if(!ISINT(des)){
        SupportDescription = des;
        W_SET_PANELITEM_ARGS(Support_Description, W_PANEL_VALUE, des);
    }

    /* get support planning unit*/
    planning_unit = Get_Attribute_Value(group_handle, PlanningUnit);
    if(!ISINT(planning_unit)){
        W_SET_PANELITEM_ARGS(Planning_Unit, W_PANEL_VALUE, planning_unit);
    }

    /* get support part system */
	part0 = PM_GET_MEMBER_IN_SET(parts, 0);
	sys = PM_GET_OBJDATA(part0,0,"sys");
	if (!ISINT(sys)){
        SystemName = sys;
        SystemId = PM_GET_SYSTEM_ID(SystemName);
		W_SET_PANELITEM_ARGS(System_Name, W_PANEL_VALUE, SystemName);
		SET_STRING_DEFAULT("CableTraySupport_Bend", "System_Name", SystemName);
    }

    /*get support leg part id 获取角钢零件的ID，存入相关变量并设置面板参数*/
    if(!ISSTRING(bar_part)){
        part_id = PM_GET_OBJDATA(bar_part,0,MMT_TAG_PARTID);
        Support_Leg_Pid = part_id;
        descr = Pid_To_Description(part_id);
        W_SET_PANELITEM_ARGS(Support_Leg, W_PANEL_VALUE, descr);
        SET_STRING_DEFAULT("CableTraySupport_Bend", "Support_Leg_Pid", part_id);
        part_code = STRINGTERM(part_id,"-");
        AngleBar_Part_Code = part_code;
    }

    /*get support pad part id 获取垫板零件的ID，存入相关变量并设置面板参数 */
    pad_thickness = 0;
    pad_part_type = "";
    if(!ISSTRING(pad_part)){
        Pad_Switch = "on";
        SET_STRING_DEFAULT("CableTraySupport_Bend", "Pad_Switch", "on");
        W_SET_PANELITEM_ARGS(Support_Pad_Switch, W_PANEL_VALUE,"1");
        W_SET_PANELITEM_ARGS(Support_Pad_Type, W_PANEL_SENSITIVITY,1);
        W_SET_PANELITEM_ARGS(Support_Pad, W_PANEL_SENSITIVITY,1);
        W_SET_PANELITEM_ARGS(Select_Support_Pad, W_PANEL_SENSITIVITY,1);
        W_SET_PANELITEM_ARGS(Pad_Clearance, W_PANEL_SENSITIVITY,1);
        W_SET_PANELITEM_ARGS(Pad_Radius, W_PANEL_SENSITIVITY,1);

        part_id = PM_GET_OBJDATA(pad_part, 0, MMT_TAG_PARTID);
        Support_Pad_Pid = part_id;
        pad_thickness = DM_PARTID_DATA(Support_Pad_Pid,"D31");
        SET_STRING_DEFAULT("CableTraySupport_Bend", "Support_Pad_Pid", part_id);
        descr = Pid_To_Description(part_id);
        W_SET_PANELITEM_ARGS(Support_Pad, W_PANEL_VALUE, descr);
        part_code = STRINGTERM(part_id,"-");
        pad_type = PM_GET_OBJDATA(pad_part,0,PadType);
        type = HEAD(pad_type,1);
        pad_part_type = type;
        if(type == "R"){
            W_SET_PANELITEM_ARGS(Support_Pad_Type,W_PANEL_ORDINALVALUE,0);
            W_SET_PANELITEM_ARGS(Select_Support_Pad,W_PANEL_BUTTONIMAGE,"选择钢板",W_PANEL_WIDTH, 10);
            Plate_Part_Code = part_code;
            length = String_To_Int(STRINGTERM(SUBSTRING(pad_type,1),"X"));
            size = 1.0*DM_PARTID_DATA(Support_Leg_Pid,"D31");
            gap = (length - size)/2;
            radius_string = SEARCH(SUBSTRING(SEARCH(SUBSTRING(pad_type,1),"X"),1),"X");
            string_length = STRLEN(radius_string);
            radius = String_To_Int(TAIL(radius_string,string_length-1));
            Pad_Gap = gap;
            Pad_Corner_Radius = radius;
		    W_SET_NUMERIC_VALUE(Pad_Radius, Pad_Corner_Radius);
		    SET_INT_DEFAULT("CableTraySupport_Bend","Pad_Radius",Pad_Corner_Radius);
   	        W_SET_NUMERIC_VALUE(Pad_Clearance, Pad_Gap);
		    SET_INT_DEFAULT("CableTraySupport_Bend","Pad_Clearance",Pad_Gap);
        }
        else if(type == "C"){
   	        W_SET_PANELITEM_ARGS(Support_Pad_Type,W_PANEL_ORDINALVALUE,1);
   	        W_SET_PANELITEM_ARGS(Select_Support_Pad,W_PANEL_BUTTONIMAGE,"选择钢板",W_PANEL_WIDTH, 10);
   	        Plate_Part_Code = part_code;
   	        radius = String_To_Float(SUBSTRING(pad_type,1))/2;
   	        size = 1.0*DM_PARTID_DATA(Support_Leg_Pid,"D31");
   	        gap = radius - size/(2*COS(45))+ 0.5;
   	        Pad_Gap = gap;
   	        Pad_Corner_Radius = gap;
		    W_SET_NUMERIC_VALUE(Pad_Radius, Pad_Corner_Radius);
		    SET_INT_DEFAULT("CableTraySupport_Bend","Pad_Radius",Pad_Corner_Radius);
   	        W_SET_NUMERIC_VALUE(Pad_Clearance, Pad_Gap);
		    SET_INT_DEFAULT("CableTraySupport_Bend","Pad_Clearance",Pad_Gap);
        }
        else if(type == "T"){
   	        W_SET_PANELITEM_ARGS(Support_Pad_Type,W_PANEL_ORDINALVALUE,2);
   	        W_SET_PANELITEM_ARGS(Select_Support_Pad,W_PANEL_BUTTONIMAGE,"选择钢板",W_PANEL_WIDTH, 10);
   	        Plate_Part_Code = part_code;
   	        length = String_To_Int(STRINGTERM(SUBSTRING(pad_type,1),"X"));
   	        t = 1.0*DM_PARTID_DATA(Support_Leg_Pid,"D32");
   	        w = 1.0*DM_PARTID_DATA(Support_Leg_Pid,"D31");
   	        gap = (length-w-t)/(2+SQRT(2))+0.5;
   	        radius_string = SEARCH(SUBSTRING(SEARCH(SUBSTRING(pad_type,1),"X"),1),"X");
   	        string_length = STRLEN(radius_string);
   	        radius = String_To_Int(TAIL(radius_string,string_length-1));
   	        Pad_Gap = gap;
   	        Pad_Corner_Radius = radius;
		    W_SET_NUMERIC_VALUE(Pad_Radius, Pad_Corner_Radius);
		    SET_INT_DEFAULT("CableTraySupport_Bend","Pad_Radius",Pad_Corner_Radius);
   	        W_SET_NUMERIC_VALUE(Pad_Clearance, Pad_Gap);
		    SET_INT_DEFAULT("CableTraySupport_Bend","Pad_Clearance",Pad_Gap);
   	    }
        else if(type == "S"){
   	        W_SET_PANELITEM_ARGS(Support_Pad_Type,W_PANEL_ORDINALVALUE,3);
   	        W_SET_PANELITEM_ARGS(Select_Support_Pad,W_PANEL_BUTTONIMAGE,"选择垫板",W_PANEL_WIDTH, 10);
	        W_SET_PANELITEM_ARGS(Pad_Clearance, W_PANEL_SENSITIVITY,0);
	        W_SET_PANELITEM_ARGS(Pad_Radius, W_PANEL_SENSITIVITY,0);
   	        Pad_Part_Code = part_code;
        }
    }
    else{
        Pad_Switch = "off";
        SET_STRING_DEFAULT("CableTraySupport_Bend", "Pad_Switch", "off");
	    W_SET_PANELITEM_ARGS(Support_Pad, W_PANEL_SENSITIVITY,0);
	    W_SET_PANELITEM_ARGS(Select_Support_Pad, W_PANEL_SENSITIVITY,0);
	    W_SET_PANELITEM_ARGS(Support_Pad_Type, W_PANEL_SENSITIVITY,0);
	    W_SET_PANELITEM_ARGS(Pad_Clearance, W_PANEL_SENSITIVITY,0);
	    W_SET_PANELITEM_ARGS(Pad_Radius, W_PANEL_SENSITIVITY,0);
	    W_SET_PANELITEM_ARGS(Support_Pad_Switch, W_PANEL_VALUE,"0");
    }

    /* load leg data 读取支撑脚的数据并存入对应的数组 */
	x1=0.0;y1=0.0;z1=0.0;x2=0.0;y2=0.0;z2=0.0;
    x_dx = 0.0;x_dy = 0.0;x_dz = 0.0;
	end1x = 0.0;end1y = 0.0;end1z = 0.0;
    end2x = 0.0;end2y = 0.0;end2z = 0.0;
    if(!ISSTRING(part1_0)){
   	    Get_Beam_Para(part1_0,x1,y1,z1,x2,y2,z2,x_dx,x_dy,x_dz,end1x,end1y,end1z,end2x,end2y,end2z);
   	    Put_Beam_Data_To_Arrary(Legs,0,x1,y1,z1,x2,y2,z2,x_dx,x_dy,x_dz,end1x,end1y,end1z,end2x,end2y,end2z); 
    }
    if(!ISSTRING(part1_1)){
   	    Get_Beam_Para(part1_1,x1,y1,z1,x2,y2,z2,x_dx,x_dy,x_dz,end1x,end1y,end1z,end2x,end2y,end2z);
   	    Put_Beam_Data_To_Arrary(Legs,1,x1,y1,z1,x2,y2,z2,x_dx,x_dy,x_dz,end1x,end1y,end1z,end2x,end2y,end2z); 
    }
    if(!ISSTRING(part1_2)){
   	    Get_Beam_Para(part1_2,x1,y1,z1,x2,y2,z2,x_dx,x_dy,x_dz,end1x,end1y,end1z,end2x,end2y,end2z);
   	    Put_Beam_Data_To_Arrary(Legs,2,x1,y1,z1,x2,y2,z2,x_dx,x_dy,x_dz,end1x,end1y,end1z,end2x,end2y,end2z); 
    }
    if(!ISSTRING(part1_3)){
   	    Get_Beam_Para(part1_3,x1,y1,z1,x2,y2,z2,x_dx,x_dy,x_dz,end1x,end1y,end1z,end2x,end2y,end2z);
   	    Put_Beam_Data_To_Arrary(Legs,3,x1,y1,z1,x2,y2,z2,x_dx,x_dy,x_dz,end1x,end1y,end1z,end2x,end2y,end2z); 
    }
    if(!ISSTRING(part1_4)){
   	    Get_Beam_Para(part1_4,x1,y1,z1,x2,y2,z2,x_dx,x_dy,x_dz,end1x,end1y,end1z,end2x,end2y,end2z);
   	    Put_Beam_Data_To_Arrary(Legs,4,x1,y1,z1,x2,y2,z2,x_dx,x_dy,x_dz,end1x,end1y,end1z,end2x,end2y,end2z); 
    }
    if(!ISSTRING(part1_5)){
   	    Get_Beam_Para(part1_5,x1,y1,z1,x2,y2,z2,x_dx,x_dy,x_dz,end1x,end1y,end1z,end2x,end2y,end2z);
   	    Put_Beam_Data_To_Arrary(Legs,5,x1,y1,z1,x2,y2,z2,x_dx,x_dy,x_dz,end1x,end1y,end1z,end2x,end2y,end2z); 
    }
    
    /*load pad data 读取垫板的数据并存入对应的数组 */
    lox = 0.0;loy = 0.0;loz = 0.0;
	udx = 0.0;udy = 0.0;udz = 0.0;
	vdx = 0.0;vdy = 0.0;vdz = 0.0;
	size = 1.0 * DM_PARTID_DATA(Support_Leg_Pid,"D31");
	if(!ISSTRING(part2_0)){
	    Get_Plate_Para(part2_0,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz);
	    if(pad_part_type == "T"){
            Point_3D_Move_With_DirAndDis(lox,loy,loz,udx,udy,udz,size/2);
           	Point_3D_Move_With_DirAndDis(lox,loy,loz,vdx,vdy,vdz,size/2);	        
	    }
	    Put_Plate_Data_To_Array(Pads,0,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz);
    }
	if(!ISSTRING(part2_1)){
	    Get_Plate_Para(part2_1,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz);
	    if(pad_part_type == "T"){
            Point_3D_Move_With_DirAndDis(lox,loy,loz,udx,udy,udz,size/2);
           	Point_3D_Move_With_DirAndDis(lox,loy,loz,vdx,vdy,vdz,size/2);	        
	    }	    
	    Put_Plate_Data_To_Array(Pads,1,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz);
    }
	if(!ISSTRING(part2_2)){
        Get_Plate_Para(part2_2,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz);
	    if(pad_part_type == "T"){
            Point_3D_Move_With_DirAndDis(lox,loy,loz,udx,udy,udz,size/2);
           	Point_3D_Move_With_DirAndDis(lox,loy,loz,vdx,vdy,vdz,size/2);	        
	    }        
        Put_Plate_Data_To_Array(Pads,2,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz);
    }
	if(!ISSTRING(part2_3)){
	    Get_Plate_Para(part2_3,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz);
	    if(pad_part_type == "T"){
            Point_3D_Move_With_DirAndDis(lox,loy,loz,udx,udy,udz,size/2);
           	Point_3D_Move_With_DirAndDis(lox,loy,loz,vdx,vdy,vdz,size/2);	        
	    }	    
	    Put_Plate_Data_To_Array(Pads,3,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz);
    }
	if(!ISSTRING(part2_4)){
	    Get_Plate_Para(part2_4,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz);
	    if(pad_part_type == "T"){
            Point_3D_Move_With_DirAndDis(lox,loy,loz,udx,udy,udz,size/2);
           	Point_3D_Move_With_DirAndDis(lox,loy,loz,vdx,vdy,vdz,size/2);	        
	    }	    
	    Put_Plate_Data_To_Array(Pads,4,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz);
    }
	if(!ISSTRING(part2_5)){
	    Get_Plate_Para(part2_5,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz);
	    if(pad_part_type == "T"){
            Point_3D_Move_With_DirAndDis(lox,loy,loz,udx,udy,udz,size/2);
           	Point_3D_Move_With_DirAndDis(lox,loy,loz,vdx,vdy,vdz,size/2);	        
	    }	    
	    Put_Plate_Data_To_Array(Pads,5,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz);
    }
    
    /*search tray part and get tray data 自动查找支架对应的电缆托架 */
    x0 = get_2darray(Legs,0,0);
    y0 = get_2darray(Legs,0,1);
    z0 = get_2darray(Legs,0,2);
    search_scope = 20;
    x1=x0-search_scope;y1=y0-search_scope;z1=z0-search_scope;
    x2=x0+search_scope;y2=y0+search_scope;z2=z0+search_scope;
    tray_handle = Search_First_Model(x1,y1,z1,x2,y2,z2,"7");
    if(!ISINT(tray_handle)){
        Cable_Tray_Handle = tray_handle;
    }
    else{
        Cable_Tray_Handle = Pick_Cable_Tray(MMT_CABLETRP_TYPE_STANDARD);
    } 

    get_tray_data();  

    /* calculate leg position, height */
    total_height = 0;
    for(i=0;i<2*Leg_Number;i=i+1;){
        Get_Beam_Position_Data_From_Array(Legs,i,x1,y1,z1,x2,y2,z2);
        Put_Beam_Position_Data_To_Array(Leg_Position,i,x1,y1,z1);
        dx=x2-x1;dy=y2-y1;dz=z2-z1;
        height = VEC_UNITV(dx,dy,dz) + pad_thickness;
        if(height > total_height){
            total_height = height;
        }
        A_PUT(Leg_Heights,i,height);
    }
    set_height_parameters(); 
    
    /* 计算支撑面位置及托架支撑方向 */
    x0 = x1; y0 = y1; z0 = z1;
    Point_3D_Move_With_DirAndDis(x0,y0,z0,dx,dy,dz,total_height); 
    calculate_attached_position(x0,y0,z0);
          
    /* 计算支撑脚的间距(角度) */
    leg_size = 1.0 * DM_PARTID_DATA(Support_Leg_Pid,"D31");
    angle = get_2darray(Cable_Tray_Data,0,9);
    for(i=0;i<Leg_Number;i=i+1){
        interval = Get_Bend_Tray_Interval(angle,i);
        A_PUT(Intervals,i,interval);
    }
    set_interval_parameters(); 
   
    /* cable tray layer*/
    layer = get_tray_layer();
    Support_Layer = layer;
    W_SET_PANELITEM_ARGS(Support_Layer_Option, W_PANEL_ORDINALVALUE, layer-1);
    set_support_layer_option(layer);
   
    /* calculate aling position 计算托架的参考位置 */
    /*1. 获取第一对支撑脚的位置 */
    x1 = get_2darray(Legs,0,0);
    y1 = get_2darray(Legs,0,1);
    z1 = get_2darray(Legs,0,2);
    
    x2 = get_2darray(Legs,1,0);
    y2 = get_2darray(Legs,1,1);
    z2 = get_2darray(Legs,1,2);
   
    /*2. 获取连接点1的坐标 */
    x3 = get_2darray(Cable_Tray_Data,0,0);
    y3 = get_2darray(Cable_Tray_Data,0,1);
    z3 = get_2darray(Cable_Tray_Data,0,2);
    x4 = 0;y4 = 0;z4 = 0;
    point_set = PM_CREATE_PNTSET(4);
    PM_SET_PNT(point_set,0,x1,y1,z1);
    PM_SET_PNT(point_set,1,x2,y2,z2);
    PM_SET_PNT(point_set,2,x3,y3,z3);
    PM_SET_PNT(point_set,3,x4,y4,z4);
    distance = 0;
    /*3. 将连接点1投影到第一对脚的连线上 */
    res = Project_Point_To_Line(point_set,distance);
    PM_GET_PNT(point_set,3,x4,y4,z4);
    PM_FREE_PNTSET(point_set);
    /*4. 获取连接点1的方向 */
    dx = get_2darray(Cable_Tray_Data,0,3);
    dy = get_2darray(Cable_Tray_Data,0,4);
    dz = get_2darray(Cable_Tray_Data,0,5);
    x5=0;y5=0;z5=0;
    /*5. 将连接点1投影到第一个支撑脚的位置的平面上 */
    PlaneLineIntersectPoint(dx,dy,dz,x1,y1,z1,dx,dy,dz,x3,y3,z3,x5,y5,z5);  
    dx=x5-x4;dy=y5-y4;dz=z5-z4;
    distance = VEC_UNITV(dx,dy,dz);
    /*Support_X = x3;Support_Y= y3;Support_Z = z3;
    Point_3D_Move_With_DirAndDis(Support_X,Support_Y,Support_Z,Support_Dx,Support_Dy,Support_Dz,-distance);*/
    if(distance < 1 & distance > -1){
        Align_Position = "B";
        W_SET_PANELITEM_ARGS(Support_Align_Option, W_PANEL_ORDINALVALUE, 0);
    }
    height = get_2darray(Cable_Tray_Data,0,7);
    check = distance - height/2;
    if(check < 1 & check > -1){
        Align_Position = "M";
        W_SET_PANELITEM_ARGS(Support_Align_Option, W_PANEL_ORDINALVALUE, 1);
    }   
    check = distance - height;
    if(check < 1 & check > -1){
        Align_Position = "T";
        W_SET_PANELITEM_ARGS(Support_Align_Option, W_PANEL_ORDINALVALUE, 2);
    }  
    return(0);
}

create_material_panel(mainform)
{
    /* 创建用于显示灯架材料信息的面板 */
    Material = W_ADD_WINDOW(mainform, W_PANEL, "Material");

    /* 设置面板参数 */
    W_REALIZE_WINDOW(Material,  W_FRAME_X,      0,
							    W_FRAME_Y,      450,
							    W_FRAME_WIDTH,  410,
							    W_FRAME_HEIGHT, 100);

    title = W_ADD_PANELITEM(Material, W_PANEL_MESSAGE, "title");
    W_REALIZE_PANELITEM(title,  W_PANEL_ROW,	0,
		                        W_PANEL_COL,	0,
		                        W_PANEL_LABEL,	"支架材料");

    seperate_line = W_ADD_PANELITEM(Material, W_PANEL_MESSAGE, "seperate_line");
    W_REALIZE_PANELITEM(seperate_line,  W_PANEL_ROW,        0,
	                                    W_PANEL_COL,        7,
		                                W_PANEL_LABEL,      "",
		                                W_PANEL_SEPARATOR,  1);

    /* support leg material */
	Support_Leg = W_ADD_PANELITEM(Material, W_PANEL_FILL, "Support_Leg");
	W_REALIZE_PANELITEM(Support_Leg,    W_PANEL_ROW,        1,
	                                    W_PANEL_COL,        0,
							            W_PANEL_LABEL,      "支撑脚:    ",
							            W_PANEL_LENGTH,     100,
							            W_PANEL_DISPLEN,    25,
							            W_PANEL_VALUE,      "Undefined");

	Select_Support_Leg = W_ADD_PANELITEM(Material, W_PANEL_BUTTON, "Select_Support_Leg");
	W_REALIZE_PANELITEM(Select_Support_Leg, W_PANEL_ROW,            1,
	                                        W_PANEL_COL,            34,
                  							W_PANEL_BUTTONIMAGE,    "选择角钢",
                  							W_PANEL_WIDTH,          10,
                  							W_PANEL_BUTTONVALUE,    201,
                  							W_PANEL_CALLBACK,       1,
                  							W_PANEL_LAYOUT,         W_LAYOUT_HORIZONTAL);
    W_SET_PANELITEM_HANDLER(Select_Support_Leg, "select_support_leg_handler");

    /* pad material option */
    Support_Pad_Switch = W_ADD_PANELITEM(Material, W_PANEL_TOGGLE, "Support_Pad_Switch");
	W_REALIZE_PANELITEM(Support_Pad_Switch, W_PANEL_ROW,            2,
	                                        W_PANEL_COL,            0,
                     						W_PANEL_LABEL,          "",
                     						W_PANEL_CHOICESTRING,   "加垫板   ",
                     						W_PANEL_VALUE,          "1",
                     						W_PANEL_CHOICESTYLE,    W_STYLE_PUSHBUTTONS,
                     						W_PANEL_CALLBACK,       1);
    W_SET_PANELITEM_HANDLER(Support_Pad_Switch, "support_pad_switch_handler");

    /* size of pad clearance */
	Pad_Clearance = W_ADD_PANELITEM(Material, W_PANEL_FILL, "Pad_Clearance");
    W_CONFIG_NUMERIC_PANELITEM(Pad_Clearance, W_NUMERIC_INT,0,100);
	W_REALIZE_PANELITEM(Pad_Clearance,  W_PANEL_ROW,        2,
	                                    W_PANEL_COL,        15,
							            W_PANEL_LABEL,      "垫板边距:   ",
							            W_PANEL_LENGTH,     5,
							            W_PANEL_SENSITIVITY,1,
							            W_PANEL_CALLBACK,   1);
    W_SET_PANELITEM_HANDLER(Pad_Clearance, "pad_clearance_handler");

    /* size of pad radius */
	Pad_Radius = W_ADD_PANELITEM(Material, W_PANEL_FILL, "Pad_Radius");
    W_CONFIG_NUMERIC_PANELITEM(Pad_Radius, W_NUMERIC_INT,0,100);
	W_REALIZE_PANELITEM(Pad_Radius, W_PANEL_ROW,        2,
	                                W_PANEL_COL,        30,
							        W_PANEL_LABEL,      "垫板圆角:   ",
							        W_PANEL_LENGTH,     5,
							        W_PANEL_SENSITIVITY,1,
							        W_PANEL_CALLBACK,   1);
	W_SET_PANELITEM_HANDLER(Pad_Radius, "pad_radius_handler");

	Support_Pad_Type = W_ADD_PANELITEM(Material, W_PANEL_CHOICE, "Support_Pad_Type");
	W_REALIZE_PANELITEM(Support_Pad_Type,   W_PANEL_ROW,            3, 
	                                        W_PANEL_COL,            0,
							                W_PANEL_LABEL,          "垫板类型    ",
							                W_PANEL_CHOICESTRING,   "矩形  ",
							                W_PANEL_CHOICESTRING,   "圆形  ",
							                W_PANEL_CHOICESTRING,   "三角形  ",
							                W_PANEL_CHOICESTRING,   "标准垫板  ",
							                W_PANEL_ORDINALVALUE,   0,
							                W_PANEL_CHOICESTYLE,    W_STYLE_PUSHBUTTONS,
							                W_PANEL_CALLBACK,       1);
	W_SET_PANELITEM_HANDLER(Support_Pad_Type, "support_pad_type_handler");

    /* support pad material */
	Support_Pad = W_ADD_PANELITEM(Material, W_PANEL_FILL, "Support_Pad");
	W_REALIZE_PANELITEM(Support_Pad,    W_PANEL_ROW,            4,
	                                    W_PANEL_COL,            0,
							            W_PANEL_LABEL,          "垫板:     ",
							            W_PANEL_LENGTH,         100,
							            W_PANEL_DISPLEN,        25,
							            W_PANEL_SENSITIVITY,    1,
							            W_PANEL_VALUE, "Undefined");
	W_SET_PANELITEM_HANDLER(Support_Pad, "support_pad_handler");

	Select_Support_Pad = W_ADD_PANELITEM(Material, W_PANEL_BUTTON, "Select_Support_Pad");
	W_REALIZE_PANELITEM(Select_Support_Pad, W_PANEL_ROW,            4,
	                                        W_PANEL_COL,            34,
                  						    W_PANEL_BUTTONIMAGE,    "选择钢板",
                     						W_PANEL_WIDTH,          10,
                     						W_PANEL_BUTTONVALUE,    202,
                     						W_PANEL_CALLBACK,       1,
                     						W_PANEL_SENSITIVITY,    1,
                     						W_PANEL_LAYOUT,         W_LAYOUT_HORIZONTAL);
    W_SET_PANELITEM_HANDLER(Select_Support_Pad, "select_support_pad_handler");

    return(Material);
}

support_leg_handler(item, event_type, dummy)
{
	pid = Support_Leg_Pid;
	if(ISSTRING(pid)){
		if(Is_Equal_Angle_Bar(pid)){
			beam_descr = Pid_To_Description(pid);
			W_SET_PANELITEM_ARGS(Support_Leg, W_PANEL_VALUE, beam_descr);
			SET_STRING_DEFAULT("CableTraySupport_Bend", "Support_Leg", pid);
		}
	}
	return(0);
}

select_support_leg_handler(item, event_type, button_value)
{
	U_MESSAGE("选择支撑脚材料");
	selectmask = DM_INIT_TAGREC();
	DM_SET_TAGVAL(selectmask, "KW", "BEAM L");
	pid = DM_BROWSE_PARTCODE(AngleBar_Part_Code, 1, selectmask);
	if(ISSTRING(pid)){
	    origin_size = 1.0 * DM_PARTID_DATA(Support_Leg_Pid,"D31");
		Support_Leg_Pid = pid;
		beam_descr = Pid_To_Description(pid);
		W_SET_PANELITEM_ARGS(Support_Leg, W_PANEL_VALUE, beam_descr);
		SET_STRING_DEFAULT("CableTraySupport_Bend", "Support_Leg", pid);
        if(Modify_flag){
            U_MESSAGE("  ");
            st = PM_UM_OPEN_CHANGE("重新支撑脚材料");
            delete_support_members();
            calculate_leg_position();
            calculate_leg_height();
            set_height_parameters();
            calculate_leg_pad_para();
            res = create_support();
            if (res == -1){
                PM_UM_CLOSE_CHANGE();
                PM_UM_UNDO_LAST_CHANGE();
                return(0);
            }
            st = PM_UM_CLOSE_CHANGE();
   	    }
	}
	return(0);
}

select_support_pad_handler(item, event_type, button_value)
{
    U_MESSAGE("选择垫板");
	selectmask = DM_INIT_TAGREC();
	DM_SET_TAGVAL(selectmask, "KW", "PLATE");
	if(Pad_Type == "S"){
	    loop_flag = 1;
	    while(loop_flag){
   	        pid = DM_BROWSE_PARTCODE(Pad_Part_Code, 1, selectmask);
   	        if(!ISINT(pid)){
   	            shape = DM_PARTID_DATA(pid,"SH");
      	        if(shape != "7"){
      	            loop_flag = 0;
      	        }
      	    }
        }
	}
	else{
	    loop_flag = 1;
	    while(loop_flag){
   	        pid = DM_BROWSE_PARTCODE(Plate_Part_Code, 1, selectmask);
   	        if(!ISINT(pid)){
   	            shape = DM_PARTID_DATA(pid,"SH");
      	        if(shape == "7"){
      	            loop_flag = 0;
      	        }
      	    }
        }
	}
    Support_Pad_Pid = pid;
    pad_descr = Pid_To_Description1(pid);
    W_SET_PANELITEM_ARGS(Support_Pad, W_PANEL_VALUE, pad_descr);
    SET_STRING_DEFAULT("CableTraySupport_Bend", "Support_Pad_Pid", pid);
	if(Modify_flag){
        st = PM_UM_OPEN_CHANGE("修改垫板材料");
        delete_support_members();
        calculate_leg_pad_para();
        res = create_support();
        /* 如果修改不成功，回滚到原来状态 */
        if (res == -1){
            PM_UM_CLOSE_CHANGE();
            PM_UM_UNDO_LAST_CHANGE();
            return(0);
        }
        st = PM_UM_CLOSE_CHANGE();
	}
	return(0);
}

support_pad_switch_handler(item, event_type, dummy)
{
    s = W_GET_PANELITEM_ARG(item, W_PANEL_VALUE);
	if ( s == "0" ){
        W_SET_PANELITEM_ARGS(Support_Pad, W_PANEL_SENSITIVITY,0);
        W_SET_PANELITEM_ARGS(Select_Support_Pad, W_PANEL_SENSITIVITY,0);
        Pad_Switch = "off";
        SET_STRING_DEFAULT("CableTraySupport_Bend", "Pad_Switch", "off");
        W_SET_PANELITEM_ARGS(Support_Pad_Type, W_PANEL_SENSITIVITY,0);
        W_SET_PANELITEM_ARGS(Support_Pad, W_PANEL_SENSITIVITY,0);
        W_SET_PANELITEM_ARGS(Select_Support_Pad, W_PANEL_SENSITIVITY,0);
        W_SET_PANELITEM_ARGS(Pad_Clearance, W_PANEL_SENSITIVITY,0);
        W_SET_PANELITEM_ARGS(Pad_Radius, W_PANEL_SENSITIVITY,0);
	}
	else if( s == "1"){
	    W_SET_PANELITEM_ARGS(Support_Pad, W_PANEL_SENSITIVITY,1);
	    W_SET_PANELITEM_ARGS(Select_Support_Pad, W_PANEL_SENSITIVITY,1);
	    Pad_Switch = "on";
	    SET_STRING_DEFAULT("CableTraySupport_Bend", "Pad_Switch", "on");
	    W_SET_PANELITEM_ARGS(Support_Pad_Type, W_PANEL_SENSITIVITY,1);
        W_SET_PANELITEM_ARGS(Support_Pad, W_PANEL_SENSITIVITY,1);
        W_SET_PANELITEM_ARGS(Select_Support_Pad, W_PANEL_SENSITIVITY,1);
        W_SET_PANELITEM_ARGS(Pad_Clearance, W_PANEL_SENSITIVITY,1);
        W_SET_PANELITEM_ARGS(Pad_Radius, W_PANEL_SENSITIVITY,1);
	}

    if(Pad_Type == "S"){
        W_SET_PANELITEM_ARGS(Select_Support_Pad,W_PANEL_BUTTONIMAGE,"选择垫板",W_PANEL_WIDTH, 10);
        W_SET_PANELITEM_ARGS(Pad_Clearance, W_PANEL_SENSITIVITY,0);
        W_SET_PANELITEM_ARGS(Pad_Radius, W_PANEL_SENSITIVITY,0);
    }
    else{
        W_SET_PANELITEM_ARGS(Select_Support_Pad,W_PANEL_BUTTONIMAGE,"选择钢板",W_PANEL_WIDTH, 10);
    }

	if(Modify_flag){
	    if(Pad_Switch == "on"){
            st = PM_UM_OPEN_CHANGE("添加支撑脚垫板");
        }
        else{
            st = PM_UM_OPEN_CHANGE("删除支撑脚垫板");
        }
        delete_support_members();
        calculate_leg_position();
        calculate_leg_pad_para();
        create_support();
        st = PM_UM_CLOSE_CHANGE();
    }
	return(0);
}

support_pad_type_handler(item, event_type, dummy)
{
    pad_type = W_GET_PANELITEM_ARG(Support_Pad_Type,W_PANEL_VALUE);
    if(pad_type == "矩形  " | pad_type == "圆形  " | pad_type == "三角形  "){
        W_SET_PANELITEM_ARGS(Pad_Clearance, W_PANEL_SENSITIVITY,1);
        W_SET_PANELITEM_ARGS(Pad_Radius, W_PANEL_SENSITIVITY,1);
        if(Pad_Type == "S"){
            W_SET_PANELITEM_ARGS(Select_Support_Pad,W_PANEL_BUTTONIMAGE,"选择钢板",W_PANEL_WIDTH, 10);
        	U_MESSAGE("选择垫板材料");
        	selectmask = DM_INIT_TAGREC();
        	DM_SET_TAGVAL(selectmask, "KW", "PLATE");
        	loop_flag = 1;
        	while(loop_flag){
        	    part_id = DM_BROWSE_PARTCODE(Plate_Part_Code, 1, selectmask);
        	    shape = DM_PARTID_DATA(part_id,"SH");
           	    if(ISSTRING(part_id) & shape == "7"){
           	        loop_flag = 0;
           	    	Support_Pad_Pid = part_id;
           	    	descr = Pid_To_Description(part_id);
           	    	W_SET_PANELITEM_ARGS(Support_Pad, W_PANEL_VALUE, descr);
           	    	SET_STRING_DEFAULT("CableTraySupport_Bend", "Support_Pad", part_id);
           	    	part_code = STRINGTERM(part_id,"-");
                    Plate_Part_Code = part_code;
           	    }
            }
        }
    }
    else{
        W_SET_PANELITEM_ARGS(Pad_Clearance, W_PANEL_SENSITIVITY,0);
        W_SET_PANELITEM_ARGS(Pad_Radius, W_PANEL_SENSITIVITY,0);
        if(Pad_Type != "S"){
            W_SET_PANELITEM_ARGS(Select_Support_Pad,W_PANEL_BUTTONIMAGE,"选择垫板",W_PANEL_WIDTH, 10);
        	U_MESSAGE("选择垫板材料");
        	selectmask = DM_INIT_TAGREC();
        	DM_SET_TAGVAL(selectmask, "KW", "PLATE");
        	loop_flag = 1;
        	while(loop_flag){
        	   part_id = DM_BROWSE_PARTCODE(Pad_Part_Code, 1, selectmask);
        	   shape = DM_PARTID_DATA(part_id,"SH");
           	    if(ISSTRING(part_id) & shape != "7"){
           	        loop_flag = 0;
           		    Support_Pad_Pid = part_id;
           		    descr = Pid_To_Description(part_id);
           		    W_SET_PANELITEM_ARGS(Support_Pad, W_PANEL_VALUE, descr);
           		    SET_STRING_DEFAULT("CableTraySupport_Bend", "Support_Pad", part_id);
           		    part_code = STRINGTERM(part_id,"-");
                    Pad_Part_Code = part_code;
           	    }
            }
            DM_FREE_TAGREC(selectmask);
        }
    }
    
    if(pad_type == "矩形  "){
        Pad_Type = "R";
    }
    else if(pad_type == "圆形  "){
        Pad_Type = "C";
    }
    else if(pad_type == "三角形  "){
        Pad_Type = "T";
    }
    else{
        Pad_Type = "S";
    }
    SET_STRING_DEFAULT("CableTraySupport_Bend", "Support_Pad_Type", Pad_Type);
    
    if(Modify_flag){
        st = PM_UM_OPEN_CHANGE("修改垫板类型为:" + Pad_Type);
        delete_support_members();
        calculate_leg_position();
        calculate_leg_pad_para();
        res = create_support();
        if (res == -1){
            PM_UM_CLOSE_CHANGE();
            PM_UM_UNDO_LAST_CHANGE();
            return(0);
        }
        st = PM_UM_CLOSE_CHANGE();
    }
    return(0);
}

support_align_orientation_handler(item, event_type, dummy)
{
    orien = W_GET_PANELITEM_ARG(Support_Direction_Option,W_PANEL_VALUE);
    if(orien == "正装  "){
        Support_Direction = 1;
    }
    else{
        Support_Direction = 0;
    }
    if(Modify_flag){
        U_MESSAGE("  ");
        st = PM_UM_OPEN_CHANGE("修改托架安装方式为:" + orien);
        delete_support_members();
        calculate_leg_position();
        calculate_leg_height();
        set_height_parameters();
        calculate_leg_pad_para();
        res = create_support();
        if (res == -1){
            PM_UM_CLOSE_CHANGE();
            PM_UM_UNDO_LAST_CHANGE();
            return(0);
        }
        st = PM_UM_CLOSE_CHANGE();
    }
    return(0);
}

support_layer_option_handler(item, event_type, dummy)
{
    layer = W_GET_PANELITEM_ARG(Support_Layer_Option,W_PANEL_VALUE);
    if(layer == "单层  "){
        set_support_layer_option(1);
    }
    else if(layer == "双层  "){
        set_support_layer_option(2);
    }
    else{
        set_support_layer_option(3);
    }
    
    if(Modify_flag){
        st = PM_UM_OPEN_CHANGE("修改托架层数为:" + layer);
        delete_support_members();
        calculate_leg_position();
        calculate_leg_height();
        set_height_parameters();
        calculate_leg_pad_para();
        res = create_support();
        if (res == -1){
            PM_UM_CLOSE_CHANGE();
            PM_UM_UNDO_LAST_CHANGE();
            return(0);
        }
        st = PM_UM_CLOSE_CHANGE();
    }
    return(0);
}

set_support_layer_option(layer)
{
    Support_Layer = layer;
    if(layer == 1){
        W_SET_PANELITEM_ARGS(Support_Layer_H1, W_PANEL_SENSITIVITY,0);
        W_SET_PANELITEM_ARGS(Support_Layer_H2, W_PANEL_SENSITIVITY,0);
        W_SET_NUMERIC_VALUE(Support_Layer_H1, 0);
        W_SET_NUMERIC_VALUE(Support_Layer_H2, 0);
    }
    else if(layer == 2){
        W_SET_PANELITEM_ARGS(Support_Layer_H1, W_PANEL_SENSITIVITY,1);
        W_SET_PANELITEM_ARGS(Support_Layer_H2, W_PANEL_SENSITIVITY,0);
        W_SET_NUMERIC_VALUE(Support_Layer_H1, Mult_Tray_Layer_Height1);
        W_SET_NUMERIC_VALUE(Support_Layer_H2, 0);
    }
    else if(layer == 3){
        W_SET_PANELITEM_ARGS(Support_Layer_H1, W_PANEL_SENSITIVITY,1);
        W_SET_PANELITEM_ARGS(Support_Layer_H2, W_PANEL_SENSITIVITY,1);
        W_SET_NUMERIC_VALUE(Support_Layer_H1, Mult_Tray_Layer_Height1);
        W_SET_NUMERIC_VALUE(Support_Layer_H2, Mult_Tray_Layer_Height2);
    }
}

/*通过空间范围判断支架层数*/
get_tray_layer()
{
    layer = 1;
    supp_parts = PM_GET_OBJECTS_IN_GROUP(Support_Handle);
    part_number = PM_NR_MEMBERS_IN_SET(supp_parts);        
    for(i=0;i<part_number;i=i+1;){
        part = PM_GET_MEMBER_IN_SET(supp_parts,i);
        /*part_id = PM_GET_OBJDATA(part,0, MMT_TAG_PARTID);*/
        obj_type = PM_GET_OBJDATA(part,0, MMT_TAG_OBJTYPE);
        if (obj_type==5){
            xmin = 0; xmax = 0; ymin = 0; ymax = 0; zmin = 0; zmax = 0;
            res = PM_GET_BBOX_OF_OBJECT(part, xmin, xmax, ymin, ymax, zmin, zmax); 
            trays = search_mdels_intersect_box(xmin,ymin,zmin,xmax,ymax,zmax,7);
            if(!ISINT(trays)){
                layer = PM_NR_MEMBERS_IN_SET(trays); 
                if(layer==2){
                    for(j=0;j<layer;j=j+1;){
                        tray_handle = PM_GET_MEMBER_IN_SET(trays,j);
                        if(tray_handle!=Cable_Tray_Handle){
                            Mult_Tray_Layer_Height1 = get_tray_distance(Cable_Tray_Handle,tray_handle);
                        }
                    }
                }
                else if(layer==3){
                    vector = DM_VECTOR_CREATE();
                    for(j=0;j<layer;j=j+1;){
                        tray_handle = PM_GET_MEMBER_IN_SET(trays,j);
                        if(tray_handle!=Cable_Tray_Handle){
                            heightj = get_tray_distance(Cable_Tray_Handle,tray_handle);
                            DM_VECTOR_PUSH_BACK(vector, heightj); 
                        }
                    }
                    DM_VECTOR_SORT(vector, "float", DM_ARRAY_SORT_ASCENDING); 
                    Mult_Tray_Layer_Height1 = DM_VECTOR_GET(vector, 0); 
                    Mult_Tray_Layer_Height2 = DM_VECTOR_GET(vector, 1)-DM_VECTOR_GET(vector, 0);
                    DM_VECTOR_DELETE(vector);
                }
                return(layer);
            }
        }
    }
	return(layer);
}

/*判断支架层间距*/
get_tray_distance(tray_handle1,tray_handle2)
{
    node = 1;
    x1 = String_To_Float(PM_GET_CONPNT_DATA(tray_handle1,node,"x"));
    y1 = String_To_Float(PM_GET_CONPNT_DATA(tray_handle1,node,"y"));
    z1 = String_To_Float(PM_GET_CONPNT_DATA(tray_handle1,node,"z"));
    x2 = String_To_Float(PM_GET_CONPNT_DATA(tray_handle2,node,"x"));
    y2 = String_To_Float(PM_GET_CONPNT_DATA(tray_handle2,node,"y"));
    z2 = String_To_Float(PM_GET_CONPNT_DATA(tray_handle2,node,"z"));
    dist = Point_DistToPlane(x1,y1,z1, x2,y2,z2, Tray_Dx, Tray_Dy, Tray_Dz);
    return(Abs(dist));
}

search_mdels_intersect_box(x1,y1,z1,x2,y2,z2,obj_type)
{
	models = PM_OBJECTS_IN_BOX(1,x1,y1,z1,x2,y2,z2);
	model_number = PM_NR_MEMBERS_IN_SET(models);
	objects = PM_INIT_SET();
	if(model_number<=0){
		return(-1);
	}
	object_number = 0;
	for(i=0;i<model_number;i=i+1;){
		model = PM_GET_MEMBER_IN_SET(models,i);
		model_type = PM_GET_OBJDATA(model,0,MMT_TAG_OBJTYPE);
		if(model_type == obj_type){
			PM_ADD_OBJECT_TO_SET(model,objects);
			object_number = object_number+1;
		}
	}
	if(object_number>0){
		return(objects);	
	}
	else{
		return(0);
	}	
}

support_align_option_handler(item, event_type, dummy)
{
    align = W_GET_PANELITEM_ARG(Support_Align_Option,W_PANEL_VALUE);
    if(align == "顶部  "){
        Align_Position = "T";
    }
    else if(align == "底部  "){
        Align_Position = "B";
    }
    else if(align == "中心  "){
        Align_Position = "M";
    }
    SET_STRING_DEFAULT("CableTraySupport_Bend","Align_Position",Align_Position);
    if(Modify_flag){
        st = PM_UM_OPEN_CHANGE("修改托架参考位置为:" + align);
        delete_support_members();
        calculate_leg_position();
        calculate_leg_height();
        set_height_parameters();
        calculate_leg_pad_para();
        res = create_support();
        if (res == -1){
            PM_UM_CLOSE_CHANGE();
            PM_UM_UNDO_LAST_CHANGE();
            return(0);
        }
        st = PM_UM_CLOSE_CHANGE();
    }
    return(0);
}

pad_clearance_handler(item, event_type, dummy)
{
    if (event_type == W_EVENT_ITEM_LEFT){
        st = 0;
        pad_clearance = W_GET_NUMERIC_VALUE(item, st);
        if (st != 0){
            W_SET_NUMERIC_VALUE(item, Pad_Gap);
            return(0);
        }
        Pad_Gap = pad_clearance;
        SET_INT_DEFAULT("CableTraySupport_Bend", "Pad_Clearance", pad_clearance);
        
        if(Modify_flag){
            st = PM_UM_OPEN_CHANGE("修改垫板边距为:" + ITOASCII(pad_clearance));
            delete_support_members();
            calculate_leg_position();
            calculate_leg_pad_para();
            res = create_support();
            if (res == -1){
                PM_UM_CLOSE_CHANGE();
                PM_UM_UNDO_LAST_CHANGE();
                return(0);
            }
            st = PM_UM_CLOSE_CHANGE();
        }
        return(0);
    }
}

pad_radius_handler(item, event_type, dummy)
{
    if (event_type == W_EVENT_ITEM_LEFT){
        st = 0;
        pad_radius = W_GET_NUMERIC_VALUE(item, st);
        if (st != 0){
            W_SET_NUMERIC_VALUE(item, Pad_Corner_Radius);
            return(0);
        }
        Pad_Corner_Radius = pad_radius;
        SET_INT_DEFAULT("CableTraySupport_Bend", "Pad_Radius", pad_radius);
        
        if(Modify_flag){
            st = PM_UM_OPEN_CHANGE("修改垫板圆角为:" + ITOASCII(pad_radius));
            delete_support_members();
            calculate_leg_position();
            calculate_leg_pad_para();
            res = create_support();
            if (res == -1){
                PM_UM_CLOSE_CHANGE();
                PM_UM_UNDO_LAST_CHANGE();
                return(0);
            }
            st = PM_UM_CLOSE_CHANGE();
        }
        return(0);
    }
}

support_pad_handler(item, event_type, dummy)
{
    return(0);
}

create_support_handler(item, event_type, button_value)
{
    /* get name of support */
    SupportName = W_GET_PANELITEM_ARG(Support_Name, W_PANEL_VALUE);
    if (SupportName == "Undefined"){
        U_CONFIRM("请先输入支吊架编号");
        return(0);
    }
       
    /* check material selected or not */
    leg = W_GET_PANELITEM_ARG(Support_Leg, W_PANEL_VALUE);
    if (leg == "Undefined"){
        U_CONFIRM("请先选择支撑脚材料");
        return(-1);
    }
    
    /* check pad material inputed or not*/
    if(Pad_Switch == "on"){
        pad = W_GET_PANELITEM_ARG(Support_Pad, W_PANEL_VALUE);
        if (leg == "Undefined"){
            U_CONFIRM("请先选择垫板材料");
            return(-1);
        }
    }
    
    /* define undo cache */
    st = PM_UM_OPEN_CHANGE("创建电缆托架支吊架:" + SupportName);
    
    /* define model group */
    group_h = Create_Group(Group_Type, SupportName);
    if(ISINT(group_h)){
        U_CONFIRM("无法创建电缆托架支吊架，请检查是否已经定义了这种类型的模型组？");
        st = PM_UM_CLOSE_CHANGE();
        PM_UM_UNDO_LAST_CHANGE();
        return(0);
    }
    
    Support_Handle = group_h;
    
    /*select cable tray and support hull part*/
    Cable_Tray_Handle = Pick_Cable_Tray(MMT_CABLETRP_TYPE_BEND);
    if(Cable_Tray_Handle == Null_Handle){
        U_CONFIRM("取消操作");
        st = PM_UM_CLOSE_CHANGE();
        PM_UM_UNDO_LAST_CHANGE();
        return(0);
    }    
    /* 抽取电缆桥架数据并保存到全局数组中 */
    get_tray_data();
    
    /*Select hull panel that support leg will attach to*/
    /*If user when to pick position of leg end point directly, he can press ESC*/
    panel_handle = Pick_Hull_Panel("请选择支撑结构,按ESC直接选择支撑面上任意一点");
    /*User pick leg end position*/
    if(ISINT(panel_handle)){
        PickPosition = 1; 
        res = pick_attached_position();
        if(res == -1){
            st = PM_UM_CLOSE_CHANGE();
            PM_UM_UNDO_LAST_CHANGE();
            return(0);
        }
    }
    else{
        Panel_Handle = panel_handle;
        calculate_panel_data();
        res = check_panel_orientation();
        if(res == -1){
            st = PM_UM_CLOSE_CHANGE();
            PM_UM_UNDO_LAST_CHANGE();
            return(0);
        }
    }
    calculate_leg_position();
    calculate_leg_height();
    set_height_parameters();
    calculate_leg_pad_para();
    res = create_support();
    /* if fail to create support parts, rollback  */
    if(res == -1){
        U_CONFIRM("无法创建支吊架模型，请检查参数是否正确？");
        st = PM_UM_CLOSE_CHANGE();
        PM_UM_UNDO_LAST_CHANGE();
        return(0);
    }
    planning_unit = W_GET_PANELITEM_ARG(Planning_Unit, W_PANEL_VALUE);
    Set_Attribute_Value(Support_Handle,PlanningUnit,planning_unit);
    
    description = SupportDescription;
    Set_Attribute_Value(Support_Handle,SupportDes,description);
    
    Set_Attribute_Value(Support_Handle,SupportType,Support_Type);
    st = PM_UM_CLOSE_CHANGE();
    /* if successful, set the status to modify*/
    W_SET_PANELITEM_ARGS(Create_Support, W_PANEL_SENSITIVITY,0);  
    W_SET_PANELITEM_ARGS(Move_Legs, W_PANEL_SENSITIVITY,1);
    load_support_data(SupportName);
    Modify_flag = 1;
}

create_tray_label()
{
    tray_width = get_2darray(Cable_Tray_Data,0,6);
    tray_angle = get_2darray(Cable_Tray_Data,0,9);
    
    tray = Cable_Tray_Handle;
    nth = 0;
    pid = PM_GET_OBJDATA(tray,nth,MMT_TAG_PARTID);
    pre = DM_PARTID_DATA(pid,"DD");
    
    /*layer*/
    if(Support_Layer==2){
        pre = TRANS(pre,"S","D");
    }
    if(Support_Layer==3){
        pre = TRANS(pre,"S","T");
    }
    
    index = 0; first_hei = 0;
    for(i=0;i<2*Leg_Number;i=i+1;){
        res = Get_Bend_Tray_Leg_is_create(tray_angle,tray_width,i);
        if (res){
            heighti = A_GET(Leg_Heights,i);
            index = index + 1;
            if (!first_hei){
                first_hei = heighti;
            }
        }
    }
    if (!first_hei) return(0);
    
    height_array = A_ALLOC(index);
    A_PUT(height_array,0,first_hei);
    height_number = 1;
    
    for(i=1;i<2*Leg_Number;i=i+1;){
        res = Get_Bend_Tray_Leg_is_create(tray_angle,tray_width,i);
        if (res){
            height0 = A_GET(Leg_Heights,i);
            find = find_same_value(height_array,height_number,height0);
            if(!find){
                A_PUT(height_array,height_number,height0);
                height_number = height_number + 1;
            }  
        }
    }
    if(!Support_Direction){
        pre = "R" + pre;
    }
    
    height = A_GET(height_array,0);
    label = pre + "-" + STRINGTERM(FTOASCII(height+0.5),".");
    for(i=1;i<height_number;i=i+1){
        height = A_GET(height_array,i);
        label = label + "/" + STRINGTERM(FTOASCII(height+0.5),".");
    }
    A_FREE(height_array);  
    
    if(Pad_Switch=="on"){
        label = label + "P";
    }
    
	/*set cable tray support description default value*/
    SupportDescription = label;
    Set_Attribute_Value(tray,Tag_Tray_Label,label);  
    
    Set_Attribute_Value(Support_Handle,SupportDes,label);
    nam = PM_GET_OBJDATA(Support_Handle,0, "nam");
    Set_Attribute_Value(tray,Tag_Tray_Group,nam);
    W_SET_PANELITEM_ARGS(Support_Description,W_PANEL_VALUE,label);
    return(0);
}

find_same_value(array,element_number,value)
{
    for(i=0;i<element_number;i=i+1;){
        element = A_GET(array,i);
        if(element == value){
            return(1);
        }  
    }
    return(0);  
}

pick_attached_position()
{
    x0 = 0;
    y0 = 0;
    z0 = 0;
    PM_GET_CURRENT_LOC(x0,y0,z0); 
    x = x0;
    y = y0;
    z = z0;
    trace_handle = PM_NEW_TRACEP();    
    key = PM_GET_POINT("请选择支撑位置", trace_handle, x, y, z); 
    if(key < 0){
        U_CONFIRM("取消当前操作");
        return(-1);        
    }

    Panel_X = x;
    Panel_Y = y;
    Panel_Z = z;
    Panel_Thk = 0; 
    
    /*get connection point 2 coordinate*/
    x0 = get_2darray(Cable_Tray_Data,1,0);
    y0 = get_2darray(Cable_Tray_Data,1,1);
    z0 = get_2darray(Cable_Tray_Data,1,2);
    PM_SET_CURRENT_LOC(x0,y0,z0);
    
    /*calculate support direction*/       
    dx = x - x0;
    dy = y - y0;
    dz = z - z0;
    
    tray_dx = Tray_Dx;
    tray_dy = Tray_Dy;
    tray_dz = Tray_Dz;
      
    angle = 0;
    GU_GetAngleBetweenTwoVectors(tray_dx,tray_dy,tray_dz,dx,dy,dz,angle);    
    if(angle > 90 | angle < -90){
        Support_Dx = -Tray_Dx;
        Support_Dy = -Tray_Dy;
        Support_Dz = -Tray_Dz;                 
        Support_Direction = 0;
        W_SET_PANELITEM_ARGS(Support_Direction_Option,W_PANEL_ORDINALVALUE,1);
    }
    else{
        Support_Dx = Tray_Dx;
        Support_Dy = Tray_Dy;
        Support_Dz = Tray_Dz;                 
        Support_Direction = 1; 
        W_SET_PANELITEM_ARGS(Support_Direction_Option,W_PANEL_ORDINALVALUE,0);        
    }    
    
    Panel_Dx = tray_dx;
    Panel_Dy = tray_dy;
    Panel_Dz = tray_dz;  
    return(1);
}

calculate_attached_position(x,y,z)
{    
    Panel_X = x;
    Panel_Y = y;
    Panel_Z = z;
    Panel_Thk = 0; 
    
    /*get connection point 2 coordinate*/
    x0 = get_2darray(Cable_Tray_Data,1,0);
    y0 = get_2darray(Cable_Tray_Data,1,1);
    z0 = get_2darray(Cable_Tray_Data,1,2);
    PM_SET_CURRENT_LOC(x0,y0,z0);
    
    /*calculate support direction*/       
    dx = x - x0;
    dy = y - y0;
    dz = z - z0;
    
    tray_dx = Tray_Dx;
    tray_dy = Tray_Dy;
    tray_dz = Tray_Dz;
      
    angle = 0;
    GU_GetAngleBetweenTwoVectors(tray_dx,tray_dy,tray_dz,dx,dy,dz,angle);    
    if(angle > 90 | angle < -90){
        Support_Dx = -Tray_Dx;
        Support_Dy = -Tray_Dy;
        Support_Dz = -Tray_Dz;                 
        Support_Direction = 0;
        W_SET_PANELITEM_ARGS(Support_Direction_Option,W_PANEL_ORDINALVALUE,1);
    }    
    else{
        Support_Dx = Tray_Dx;
        Support_Dy = Tray_Dy;
        Support_Dz = Tray_Dz;                 
        Support_Direction = 1;  
        W_SET_PANELITEM_ARGS(Support_Direction_Option,W_PANEL_ORDINALVALUE,0);        
    }  
        
    Panel_Dx = tray_dx;
    Panel_Dy = tray_dy;
    Panel_Dz = tray_dz;      
    return(1);
}

check_panel_orientation()
{
    panel_dx = Panel_Dx;
    panel_dy = Panel_Dy;
    panel_dz = Panel_Dz;
    tray_dx = Tray_Dx;
    tray_dy = Tray_Dy;
    tray_dz = Tray_Dz;
    angle = 0;
    GU_GetAngleBetweenTwoVectors(tray_dx,tray_dy,tray_dz,panel_dx,panel_dy,panel_dz,angle);
    if((angle<179.9 & angle>0.1) | (angle<-0.1 & angle >-179.9)){
        U_CONFIRM("托架平面与结构平面的夹角大于0.1度");
        return(-1);
    }
    
    if(angle > 90 | angle < -90){
        Support_Dx = -Tray_Dx;
        Support_Dy = -Tray_Dy;
        Support_Dz = -Tray_Dz;                       
        Support_Direction = 0;
        W_SET_PANELITEM_ARGS(Support_Direction_Option,W_PANEL_ORDINALVALUE,1);
    }
    else{
        Support_Dx = Tray_Dx;
        Support_Dy = Tray_Dy;
        Support_Dz = Tray_Dz;                       
        Support_Direction = 1;        
        W_SET_PANELITEM_ARGS(Support_Direction_Option,W_PANEL_ORDINALVALUE,0);
    }
}

/*方向夹角转换为方向向量*/
angle_to_direction(ang_s,ang_r, dx,dy,dz)
{
    slope_angle = String_To_Float(ang_s);
    rotation_angle = String_To_Float(ang_r);
    dx = COS(slope_angle) * COS(rotation_angle);
    dy = COS(slope_angle) * SIN(rotation_angle);
    dz = SIN(slope_angle);
    VEC_UNITV(dx,dy,dz);
    return (0);
}

get_tray_bend_angle(tray_handle)
{ 
    /*axis direction of node 1*/
    v1_x = 0.0; v1_y = 0.0; v1_z = 0.0;
    fns1 = PM_GET_CONPNT_DATA(tray_handle,1,"fns");
    fnr1 = PM_GET_CONPNT_DATA(tray_handle,1,"fnr");
    angle_to_direction(fns1,fnr1, v1_x,v1_y,v1_z); 
    /*axis direction of node 3*/
    v3_x = 0.0; v3_y = 0.0; v3_z = 0.0;
    fns3 = PM_GET_CONPNT_DATA(tray_handle,3,"fns");
    fnr3 = PM_GET_CONPNT_DATA(tray_handle,3,"fnr");
    angle_to_direction(fns3,fnr3, v3_x,v3_y,v3_z); 
    
    angle = 0.0;
    GU_GetAngleBetweenTwoVectors(v1_x,v1_y,v1_z, v3_x,v3_y,v3_z, angle);  
    return (180.0-angle);
}

get_tray_data()
{  
    tray = Cable_Tray_Handle;
    /*抽取电缆桥架数据*/
    tray_height = 0;
    for(i=1;i<=3;i=i+1;){
        node = i;
        /* 抽取连接点坐标 */
        x = String_To_Float(PM_GET_CONPNT_DATA(tray,node,"x"));
        y = String_To_Float(PM_GET_CONPNT_DATA(tray,node,"y"));
        z = String_To_Float(PM_GET_CONPNT_DATA(tray,node,"z"));   
        put_2darray(Cable_Tray_Data,i-1,0,x); 
        put_2darray(Cable_Tray_Data,i-1,1,y);
        put_2darray(Cable_Tray_Data,i-1,2,z);    
        /* 抽取连接点方向 */
        slope   = String_To_Float(PM_GET_CONPNT_DATA(tray,node,"fns"));
        rotate  = String_To_Float(PM_GET_CONPNT_DATA(tray,node,"fnr"));
        dx = COS(slope)*COS(rotate);
        dy = COS(slope)*SIN(rotate);
        dz = SIN(slope);
        put_2darray(Cable_Tray_Data,i-1,3,dx); 
        put_2darray(Cable_Tray_Data,i-1,4,dy);
        put_2darray(Cable_Tray_Data,i-1,5,dz);         
        /* 连接点宽度,高度及角度 */
        width_s = PM_GET_CONPNT_DATA(tray,node,"adw");
        if(ISSTRING(width_s)){
            width = String_To_Float(width_s);
        }
        else{
            width = 0;
        }        
        put_2darray(Cable_Tray_Data,i-1,6,width);
        height_s = PM_GET_CONPNT_DATA(tray,node,"adh");
        if(ISSTRING(height_s)){
            height = String_To_Float(height_s);
        }
        else{
            height = 0;
        }
        put_2darray(Cable_Tray_Data,i-1,7,height);
    }
    /* 计算各个连接点到中心点（第2点）的距离 */
    x0 = get_2darray(Cable_Tray_Data,1,0);
    y0 = get_2darray(Cable_Tray_Data,1,1);
    z0 = get_2darray(Cable_Tray_Data,1,2);
    for(i=0;i<3;i=i+1;){
        x = get_2darray(Cable_Tray_Data,i,0);
        y = get_2darray(Cable_Tray_Data,i,1);
        z = get_2darray(Cable_Tray_Data,i,2);
        dx = x - x0;
        dy = y - y0;
        dz = z - z0;
        length = VEC_UNITV(dx,dy,dz);
        put_2darray(Cable_Tray_Data,i,8,length);
        angle = get_tray_bend_angle(tray);
        put_2darray(Cable_Tray_Data,i,9,angle);
    }

    /* 计算托架中心位置 */
    calculate_bend_center(tray); 

    /* 计算托架敷线面方向 */
    dx1 = get_2darray(Cable_Tray_Data,2,3);
    dy1 = get_2darray(Cable_Tray_Data,2,4);
    dz1 = get_2darray(Cable_Tray_Data,2,5);
    dx2 = get_2darray(Cable_Tray_Data,0,3);
    dy2 = get_2darray(Cable_Tray_Data,0,4);
    dz2 = get_2darray(Cable_Tray_Data,0,5);    
    dx = 0;dy = 0;dz = 0;
    VEC_CROSS_PRODUCT(dx1,dy1,dz1,dx2,dy2,dz2,dx,dy,dz);
    VEC_UNITV(dx,dy,dz);
    Tray_Dx = dx;
    Tray_Dy = dy;
    Tray_Dz = dz;
    return(0);
}

set_interval_parameters()
{
    interval = A_GET(Intervals,0);
    W_SET_NUMERIC_VALUE(Support_Interval1,interval);
    W_SET_PANELITEM_ARGS(Support_Interval1, W_PANEL_SENSITIVITY,0);
    interval = A_GET(Intervals,1);
    W_SET_NUMERIC_VALUE(Support_Interval2,interval);
    W_SET_PANELITEM_ARGS(Support_Interval2, W_PANEL_SENSITIVITY,0);
    interval = A_GET(Intervals,2);
    W_SET_NUMERIC_VALUE(Support_Interval3,interval);
    W_SET_PANELITEM_ARGS(Support_Interval3, W_PANEL_SENSITIVITY,0);
    return(0);
}

set_height_parameters()
{
    tray_width = get_2darray(Cable_Tray_Data,0,6);
    tray_angle = get_2darray(Cable_Tray_Data,0,9);
    
    res = Get_Bend_Tray_Leg_is_create(tray_angle,tray_width,0);
    if (res){
        height = A_GET(Leg_Heights,0);
        W_SET_PANELITEM_ARGS(Support_Leg1_R, W_PANEL_SENSITIVITY,1);
        W_SET_NUMERIC_VALUE(Support_Leg1_R, height+0.5);
    }else{
        W_SET_PANELITEM_ARGS(Support_Leg1_R, W_PANEL_SENSITIVITY,0);
    }
    res = Get_Bend_Tray_Leg_is_create(tray_angle,tray_width,1);
    if (res){
        height = A_GET(Leg_Heights,1);
        W_SET_PANELITEM_ARGS(Support_Leg1_L, W_PANEL_SENSITIVITY,1);
        W_SET_NUMERIC_VALUE(Support_Leg1_L, height+0.5);
    }else{
        W_SET_PANELITEM_ARGS(Support_Leg1_L, W_PANEL_SENSITIVITY,0);
    }
    res = Get_Bend_Tray_Leg_is_create(tray_angle,tray_width,2);
    if (res){
        height = A_GET(Leg_Heights,2);
        W_SET_PANELITEM_ARGS(Support_Leg2_R, W_PANEL_SENSITIVITY,1);
        W_SET_NUMERIC_VALUE(Support_Leg2_R, height+0.5);
    }else{
        W_SET_PANELITEM_ARGS(Support_Leg2_R, W_PANEL_SENSITIVITY,0);
    }
    res = Get_Bend_Tray_Leg_is_create(tray_angle,tray_width,3);
    if (res){
        height = A_GET(Leg_Heights,3);
        W_SET_PANELITEM_ARGS(Support_Leg2_L, W_PANEL_SENSITIVITY,1);
        W_SET_NUMERIC_VALUE(Support_Leg2_L, height+0.5);
    }else{
        W_SET_PANELITEM_ARGS(Support_Leg2_L, W_PANEL_SENSITIVITY,0);
    }
    res = Get_Bend_Tray_Leg_is_create(tray_angle,tray_width,4);
    if (res){
        height = A_GET(Leg_Heights,4);
        W_SET_PANELITEM_ARGS(Support_Leg3_R, W_PANEL_SENSITIVITY,1);
        W_SET_NUMERIC_VALUE(Support_Leg3_R, height+0.5);
    }else{
        W_SET_PANELITEM_ARGS(Support_Leg3_R, W_PANEL_SENSITIVITY,0);
    }
    res = Get_Bend_Tray_Leg_is_create(tray_angle,tray_width,5);
    if (res){
        height = A_GET(Leg_Heights,5);
        W_SET_PANELITEM_ARGS(Support_Leg3_L, W_PANEL_SENSITIVITY,1);
        W_SET_NUMERIC_VALUE(Support_Leg3_L, height+0.5);
    }else{
        W_SET_PANELITEM_ARGS(Support_Leg3_L, W_PANEL_SENSITIVITY,0);
    }
    return(0);
}

calculate_panel_data()
{
    /*initiate argument for get hull panel data*/
    panel_x = 0; panel_y = 0; panel_z = 0;
    normal_dx = 0;
    normal_dy = 0;
    normal_dz = 0;
    panel_t = 0;
    Get_Panel_Data(Panel_Handle,panel_x,panel_y,panel_z,normal_dx,normal_dy,normal_dz,panel_t);
    if(panel_t == 0){
        panel_t = Panel_Default_Thickness;
    }
    Panel_X = panel_x;
    Panel_Y = panel_y;
    Panel_Z = panel_z;
    Panel_Dx = normal_dx;
    Panel_Dy = normal_dy;
    Panel_Dz = normal_dz;
    Panel_Thk = panel_t;
}

/*弯管托架中心点*/
calculate_bend_center(tray_handle)
{
    ori_x = 0.0; ori_y = 0.0; ori_z = 0.0;
    /*axis direction of node 1*/
    v1_x = 0.0; v1_y = 0.0; v1_z = 0.0;
    wxs1 = PM_GET_CONPNT_DATA(tray_handle,1,"wxs");
    wxr1 = PM_GET_CONPNT_DATA(tray_handle,1,"wxr");
    angle_to_direction(wxs1,wxr1, v1_x,v1_y,v1_z); 
    str_n1_x = PM_GET_CONPNT_DATA(tray_handle,1,"x");
    str_n1_y = PM_GET_CONPNT_DATA(tray_handle,1,"y");
    str_n1_z = PM_GET_CONPNT_DATA(tray_handle,1,"z");
    n1_x = String_To_Float(str_n1_x);
    n1_y = String_To_Float(str_n1_y);
    n1_z = String_To_Float(str_n1_z);
    
    /*axis direction of node 3*/
    v3_x = 0.0; v3_y = 0.0; v3_z = 0.0;
    fns3 = PM_GET_CONPNT_DATA(tray_handle,3,"fns");
    fnr3 = PM_GET_CONPNT_DATA(tray_handle,3,"fnr");
    angle_to_direction(fns3,fnr3, v3_x,v3_y,v3_z); 
    str_n3_x = PM_GET_CONPNT_DATA(tray_handle,3,"x");
    str_n3_y = PM_GET_CONPNT_DATA(tray_handle,3,"y");
    str_n3_z = PM_GET_CONPNT_DATA(tray_handle,3,"z");
    n3_x = String_To_Float(str_n3_x);
    n3_y = String_To_Float(str_n3_y);
    n3_z = String_To_Float(str_n3_z);

    /*托架圆心坐标*/
    PlaneLineIntersectPoint(v3_x,v3_y,v3_z, n3_x,n3_y,n3_z, v1_x,v1_y,v1_z, n1_x,n1_y,n1_z, ori_x,ori_y,ori_z); 
    Tray_Ori_x = ori_x;
    Tray_Ori_y = ori_y;
    Tray_Ori_z = ori_z;
    
    /*端部起点位置*/
    width = get_2darray(Cable_Tray_Data,0,6);
    part_id = PM_GET_OBJDATA(tray_handle,0,MMT_TAG_PARTID);
    side_bar_width = DM_PARTID_NAMED_DIM(part_id,"SideBarW");
    if(side_bar_width != -1){
        width =width + 2*side_bar_width;
    }

    or_x = n1_x; or_y = n1_y; or_z =n1_z;
    Point_3D_Move_With_DirAndDis(or_x,or_y,or_z, v1_x,v1_y,v1_z, 0.5*width);
    ir_x = n1_x; ir_y = n1_y; ir_z =n1_z;
    Point_3D_Move_With_DirAndDis(ir_x,ir_y,ir_z, v1_x,v1_y,v1_z, -0.5*width);
    Tray_OR_x = or_x;
    Tray_OR_y = or_y;
    Tray_OR_z = or_z;
    Tray_IR_x = ir_x;
    Tray_IR_y = ir_y;
    Tray_IR_z = ir_z;
}

/* 计算支吊架支撑脚的位置 */
calculate_leg_position()
{
    /* 支撑角钢的尺寸 Get size of angle bar*/
    beam_size = 1.0 * DM_PARTID_DATA(Support_Leg_Pid,"D31");

    /* 托架的参考中心位置 get reference position of cable tray*/
    align = W_GET_PANELITEM_ARG(Support_Align_Option,W_PANEL_VALUE); 
    
    /* 获取第一个连接点的相关数据 Get data of first connection point */
    x = get_2darray(Cable_Tray_Data,0,0);
    y = get_2darray(Cable_Tray_Data,0,1);
    z = get_2darray(Cable_Tray_Data,0,2);
    dx = get_2darray(Cable_Tray_Data,0,3);
    dy = get_2darray(Cable_Tray_Data,0,4);
    dz = get_2darray(Cable_Tray_Data,0,5);
    width = get_2darray(Cable_Tray_Data,0,6);
    height = get_2darray(Cable_Tray_Data,0,7);
    length = get_2darray(Cable_Tray_Data,0,8);
    angle = get_2darray(Cable_Tray_Data,0,9);
    
    if(!Support_Direction){
        /*侧装*/
        Support_Dx = -Tray_Dx;
        Support_Dy = -Tray_Dy;
        Support_Dz = -Tray_Dz;
    }
    else{
        /*正装*/
        Support_Dx = Tray_Dx;
        Support_Dy = Tray_Dy;
        Support_Dz = Tray_Dz;
    }

    /*支撑点分布*/
    for(i=0;i<Leg_Number;i=i+1){
        interval = Get_Bend_Tray_Interval(angle,i);
        A_PUT(Intervals,i,interval);
    }
    set_interval_parameters(); 
    
    /*参考位置*/
    if(Support_Direction){
        /*正装*/
        if(Align_Position == "B"){
            z_offset = 0;
        }
        else if(Align_Position == "T"){
            z_offset = 1.0*height;
        }
        else if(Align_Position == "M"){
            z_offset = 0.5*height;
        }
    }
    else{
        if(Align_Position == "B"){
            z_offset = 1.0*height;
        }
        else if(Align_Position == "T"){
            z_offset = 0;
        }
        else if(Align_Position == "M"){
            z_offset = 0.5*height;
        }
    }

    /* 计算支撑点位置 Calculate attached point of leg*/ 
    dis_ang = 0;    
    for(i=0;i<Leg_Number;i=i+1;){
        vx = 0.0; vy = 0.0; vz = 0.0;
        ox = 0.0; oy = 0.0; oz = 0.0;
        ix = 0.0; iy = 0.0; iz = 0.0;
        dis_ang = dis_ang + A_GET(Intervals,i);
        
        Point_Rotate(Tray_OR_x,  Tray_OR_y,  Tray_OR_z,  ox,oy,oz,  
                     Tray_Ori_x, Tray_Ori_y, Tray_Ori_z, 
                     Tray_Dx,    Tray_Dy,    Tray_Dz,    dis_ang);
        Point_Rotate(Tray_IR_x,  Tray_IR_y,  Tray_IR_z,  ix,iy,iz,  
                     Tray_Ori_x, Tray_Ori_y, Tray_Ori_z, 
                     Tray_Dx,    Tray_Dy,    Tray_Dz,    dis_ang);

        Vector3d_Rotate(dx,         dy,         dz, 
                        Tray_Dx,    Tray_Dy,    Tray_Dz,  dis_ang, 
                        vx,         vy,         vz);

        if(!Support_Direction){
            /*多层托架侧装偏移*/
            offHeight = Get_Tray_OffHeight(Cable_Tray_Handle);
            Point_3D_Move_With_DirAndDis(ox,oy,oz, Support_Dx,Support_Dy,Support_Dz, -1*offHeight);
            Point_3D_Move_With_DirAndDis(ix,iy,iz, Support_Dx,Support_Dy,Support_Dz, -1*offHeight);
        }
        /*参考位置*/
        Point_3D_Move_With_DirAndDis(ox,oy,oz, Tray_Dx,Tray_Dy,Tray_Dz, z_offset);
        Point_3D_Move_With_DirAndDis(ix,iy,iz, Tray_Dx,Tray_Dy,Tray_Dz, z_offset);
        /*角钢半宽*/
        if(i==0){
            Point_3D_Move_With_DirAndDis(ox,oy,oz, vx,vy,vz, -0.5*beam_size);
            Point_3D_Move_With_DirAndDis(ix,iy,iz, vx,vy,vz, -0.5*beam_size);
        }
        else{
            Point_3D_Move_With_DirAndDis(ox,oy,oz, vx,vy,vz, 0.5*beam_size);
            Point_3D_Move_With_DirAndDis(ix,iy,iz, vx,vy,vz, 0.5*beam_size);
        }
        
        put_2darray(Leg_Position,2*i,0,ix);
        put_2darray(Leg_Position,2*i,1,iy);
        put_2darray(Leg_Position,2*i,2,iz);
        put_2darray(Leg_Position,2*i+1,0,ox);
        put_2darray(Leg_Position,2*i+1,1,oy);
        put_2darray(Leg_Position,2*i+1,2,oz);
        
        put_2darray(Leg_Direction,2*i,0,vx);
        put_2darray(Leg_Direction,2*i,1,vy);
        put_2darray(Leg_Direction,2*i,2,vz);
        put_2darray(Leg_Direction,2*i+1,0,vx);
        put_2darray(Leg_Direction,2*i+1,1,vy);
        put_2darray(Leg_Direction,2*i+1,2,vz);
    }
    return(0);
}

calculate_leg_height()
{
    /* 支撑面的位置及方向 */
    plane_x = Panel_X;plane_y = Panel_Y;plane_z = Panel_Z;
    plane_dx = Panel_Dx;plane_dy = Panel_Dy;plane_dz = Panel_Dz;
    /* 支吊架方向 */
    dx = Support_Dx;dy = Support_Dy;dz = Support_Dz;
    /* 计算支撑脚高度 */   
    for(i=0;i<Leg_Number;i=i+1){
        /*Left right leg*/
        x = get_2darray(Leg_Position,2*i,0);
        y = get_2darray(Leg_Position,2*i,1);
        z = get_2darray(Leg_Position,2*i,2);
        x0 = 0;y0 = 0;z0 = 0;
        PlaneLineIntersectPoint(plane_dx,plane_dy,plane_dz,plane_x,plane_y,plane_z,dx,dy,dz,x,y,z,x0,y0,z0);
        udx = x-x0;
        udy = y-y0;
        udz = z-z0;
        height = VEC_UNITV(udx,udy,udz);
        angle = 0;
        GU_GetAngleBetweenTwoVectors(udx,udy,udz,plane_dx,plane_dy,plane_dz,angle);
        if((angle>-Angle_Tolerance & angle<Angle_Tolerance)){
            height = height - Panel_Thk;
        }
        A_PUT(Leg_Heights,2*i,height);
        
        /*right left leg*/
        x = get_2darray(Leg_Position,2*i+1,0);
        y = get_2darray(Leg_Position,2*i+1,1);
        z = get_2darray(Leg_Position,2*i+1,2);
        x0 = 0;y0 = 0;z0 = 0;
        PlaneLineIntersectPoint(plane_dx,plane_dy,plane_dz,plane_x,plane_y,plane_z,dx,dy,dz,x,y,z,x0,y0,z0);
        udx = x-x0;
        udy = y-y0;
        udz = z-z0;
        height = VEC_UNITV(udx,udy,udz);
        angle = 0;
        GU_GetAngleBetweenTwoVectors(udx,udy,udz,plane_dx,plane_dy,plane_dz,angle);
        if((angle>-Angle_Tolerance & angle<Angle_Tolerance)){
            height = height - Panel_Thk;
        }
        A_PUT(Leg_Heights,2*i+1,height);
    }
    return(0);
}

calculate_leg_pad_para()
{
    /* 获取支吊架支撑脚方向 get support direction*/
    dx = Support_Dx;dy = Support_Dy;dz = Support_Dz;
    for(i=0;i<Leg_Number;i=i+1){
        /* 获取支撑脚位置 get leg position*/
        x = get_2darray(Leg_Position,2*i,0);
        y = get_2darray(Leg_Position,2*i,1);
        z = get_2darray(Leg_Position,2*i,2);
        /* 获取支撑脚朝向 get leg direction*/
        x_dx = get_2darray(Leg_Direction,2*i,0);
        x_dy = get_2darray(Leg_Direction,2*i,1);
        x_dz = get_2darray(Leg_Direction,2*i,2);
        /* 支撑脚朝向*/
        y_dx=0.0; y_dy=0.0; y_dz=0.0;
        Vector3d_CrossProduct(dx,dy,dz, x_dx,x_dy,x_dz, y_dx,y_dy,y_dz);
        /* 计算支撑脚高度 */
        height = A_GET(Leg_Heights,2*i);
        pad_thickness = 1.0*DM_PARTID_DATA(Support_Pad_Pid,"D31");
        if(Pad_Switch == "on"){
           height = height - pad_thickness;
        }

        /* 计算支撑脚位置 */
        x1=x;y1=y;z1=z;
        x2=x;y2=y;z2=z;
        Point_3D_Move_With_DirAndDis(x2,y2,z2, dx,dy,dz, height);
        /* 注意应该是单位向量表示的方向 */

        /* pad data of left side */
        if(Pad_Switch == "on"){
            if (Support_Direction){
                if (i!=0){
                    u_dx = -x_dx;   u_dy = -x_dy;   u_dz = -x_dz;
                    v_dx = -y_dx;   v_dy = -y_dy;   v_dz = -y_dz;
                }
                else{
                    u_dx = -y_dx;   u_dy = -y_dy;   u_dz = -y_dz;
                    v_dx = x_dx;    v_dy = x_dy;    v_dz = x_dz;
                }
            }
            else{
                if (i!=0){
                    u_dx = y_dx;    u_dy = y_dy;    u_dz = y_dz;
                    v_dx = -x_dx;   v_dy = -x_dy;   v_dz = -x_dz;
                }
                else{
                    u_dx = x_dx;    u_dy = x_dy;    u_dz = x_dz;
                    v_dx = y_dx;    v_dy = y_dy;    v_dz = y_dz;
                }
            }
            Put_Plate_Data_To_Array(Pads,2*i, x2,y2,z2, u_dx,u_dy,u_dz, v_dx,v_dy,v_dz);
        }
        
        if (Support_Direction){
            /*正装*/
            if (i!=0){
                /*第一个角钢朝向与其他不同*/
                x_dx = -y_dx;
                x_dy = -y_dy;
                x_dz = -y_dz;
            }
            end1x = -Support_Dx-y_dx;
            end1y = -Support_Dy-y_dy;
            end1z = -Support_Dz-y_dz;
            VEC_UNITV(end1x,end1y,end1z);
            end2x = Support_Dx;
            end2y = Support_Dy;
            end2z = Support_Dz;
        }
        else{
            /*侧装*/
            if (i!=0){
                /*第一个角钢朝向与其他不同*/
                x_dx = -x_dx;
                x_dy = -x_dy;
                x_dz = -x_dz;
            }
            else{
                x_dx = y_dx;
                x_dy = y_dy;
                x_dz = y_dz;
            }
            end1x = -Support_Dx+y_dx;
            end1y = -Support_Dy+y_dy;
            end1z = -Support_Dz+y_dz;
            VEC_UNITV(end1x,end1y,end1z);
            end2x = Support_Dx;
            end2y = Support_Dy;
            end2z = Support_Dz;
        }

   	    /*Leg data of left side*/ 
   	    Put_Beam_Data_To_Arrary(Legs,2*i,x1,y1,z1,x2,y2,z2,x_dx,x_dy,x_dz,end1x,end1y,end1z,end2x,end2y,end2z);

        /*right side ------------------------------ right side*/ 
        x = get_2darray(Leg_Position,2*i+1,0);
        y = get_2darray(Leg_Position,2*i+1,1);
        z = get_2darray(Leg_Position,2*i+1,2);
        /* 获取支撑脚朝向 get leg direction*/
        x_dx = get_2darray(Leg_Direction,2*i+1,0);
        x_dy = get_2darray(Leg_Direction,2*i+1,1);
        x_dz = get_2darray(Leg_Direction,2*i+1,2);
        /* 支撑脚朝向*/
        y_dx=0.0; y_dy=0.0; y_dz=0.0;
        Vector3d_CrossProduct(dx,dy,dz, x_dx,x_dy,x_dz, y_dx,y_dy,y_dz);
        /* 支撑脚高度*/
        height = A_GET(Leg_Heights,2*i+1);
        if(Pad_Switch == "on"){
           height = height - pad_thickness;
        }
        x1=x;y1=y;z1=z;
        x2=x;y2=y;z2=z;
        Point_3D_Move_With_DirAndDis(x2,y2,z2,dx,dy,dz,height);
        
        /* pad data of right side */
        if(Pad_Switch == "on"){
            if (Support_Direction){
                if (i==0){
                    u_dx = x_dx;   u_dy = x_dy;   u_dz = x_dz;
                    v_dx = y_dx;   v_dy = y_dy;   v_dz = y_dz;
                }
                else{
                    u_dx = y_dx;   u_dy = y_dy;   u_dz = y_dz;
                    v_dx = -x_dx;  v_dy = -x_dy;  v_dz = -x_dz;
                }
            }
            else{
                if (i==0){
                    v_dx = x_dx;   v_dy = x_dy;   v_dz = x_dz;
                    u_dx = -y_dx;  u_dy = -y_dy;  u_dz = -y_dz;
                }
                else{
                    u_dx = -x_dx;  u_dy = -x_dy;  u_dz = -x_dz;
                    v_dx = -y_dx;  v_dy = -y_dy;  v_dz = -y_dz;
                }
            }
            Put_Plate_Data_To_Array(Pads,2*i+1, x2,y2,z2, u_dx,u_dy,u_dz, v_dx,v_dy,v_dz);
        }
        
        if (Support_Direction){
            /*正装*/
            if (i==0){
                x_dx = -y_dx; x_dy = -y_dy; x_dz = -y_dz;
            }
            end1x = -Support_Dx+y_dx;
            end1y = -Support_Dy+y_dy;
            end1z = -Support_Dz+y_dz;
            VEC_UNITV(end1x,end1y,end1z);
            end2x = Support_Dx;
            end2y = Support_Dy;
            end2z = Support_Dz;
        }
        else{
            /*侧装*/
            if (i==0){
                x_dx = -x_dx; x_dy = -x_dy; x_dz = -x_dz;
            }
            else{
                x_dx = y_dx; x_dy = y_dy; x_dz = y_dz;
            }
            end1x = -Support_Dx-y_dx;
            end1y = -Support_Dy-y_dy;
            end1z = -Support_Dz-y_dz;
            VEC_UNITV(end1x,end1y,end1z);
            end2x = Support_Dx;
            end2y = Support_Dy;
            end2z = Support_Dz;
        }

   	    /*Leg data of right side*/
   	    Put_Beam_Data_To_Arrary(Legs,2*i+1,x1,y1,z1,x2,y2,z2,-x_dx,-x_dy,-x_dz,end1x,end1y,end1z,end2x,end2y,end2z);
    }
    return(0);
}

create_support()
{
    tray_width = get_2darray(Cable_Tray_Data,0,6);
    tray_angle = get_2darray(Cable_Tray_Data,0,9);

    /* define model set for cable tray support */
    support = PM_INIT_SET();
    /* create cable tray support leg */
    for(i=0;i<Leg_Number;i=i+1){
        x1=0.0;y1=0.0;z1=0.0;x2=0.0;y2=0.0;z2=0.0;
        x_dx  = 0.0;x_dy  = 0.0;x_dz  = 0.0;
	    end1x = 0.0;end1y = 0.0;end1z = 0.0;
        end2x = 0.0;end2y = 0.0;end2z = 0.0;
        
        /*create leg of left side */
        is_create = Get_Bend_Tray_Leg_is_create(tray_angle,tray_width,2*i);
        if(is_create){
            Get_Beam_Data_From_Arrary(Legs,2*i,x1,y1,z1,x2,y2,z2,x_dx,x_dy,x_dz,end1x,end1y,end1z,end2x,end2y,end2z);
            lox = 0; loy = 0; loz = 0;
            tmat_h = PM_CREATE_TMAT(1,lox,loy,loz,1,0,0,0,1,0);
            part_handle = Create_Beam(Support_Leg_Pid,SystemId,x1,y1,z1,x2,y2,z2,x_dx,x_dy,x_dz,end1x,end1y,end1z,end2x,end2y,end2z,tmat_h);
            if(ISINT(part_handle)){
                return(-1);
            }
            part_number = "1-" + ITOASCII(2*i);
            Set_Attribute_Value(part_handle, Part_Number,part_number);
            PM_ADD_OBJECT_TO_SET(part_handle, support);
            
            /*create pads*/
            if(Pad_Switch == "on"){
                size = 1.0*DM_PARTID_DATA(Support_Leg_Pid, "D31");
                t = 1.0*DM_PARTID_DATA(Support_Leg_Pid, "D32");
                hole_list = alloc_2darray(0, 0);
                /*create pads for leg of left side*/
                lox=0;loy=0;loz=0;udx=0;udy=0;udz=0;vdx=0;vdy=0;vdz=0;
                Get_Plate_Data_From_Array(Pads,2*i,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz);
                
                pad_type = "";
                if(Pad_Type == "R"){
                    length = size + 2*Pad_Gap;
                    width = size + 2*Pad_Gap;
                    radius = Pad_Corner_Radius;
                    pad_type = "R" + STRINGTERM(FTOASCII(length),".") + "X" + STRINGTERM(FTOASCII(width),".")+ "X" + STRINGTERM(FTOASCII(radius),".");
                    curve = Create_Rectangular_Curve(length,width,radius);
                    Point_3D_Move_With_DirAndDis(lox,loy,loz,udx,udy,udz,size/2);
                    Point_3D_Move_With_DirAndDis(lox,loy,loz,vdx,vdy,vdz,size/2);
                    /* tmat_h = PM_CREATE_TMAT(1,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz); */
                    tmat_h = Trans_SetFromPointAndTwoVectors(lox,loy,loz,udx,udy,udz,vdx,vdy,vdz);
                    part_handle = Create_Plate(Support_Pad_Pid, SystemId, curve, tmat_h, hole_list);
                }
                else if(Pad_Type == "C"){
                    radius = size/(2*COS(45)) + Pad_Gap;
                    curve = Create_Circle_Curve(radius);
                    pad_type = "C" + STRINGTERM(FTOASCII(2*radius),".");
                    Point_3D_Move_With_DirAndDis(lox,loy,loz,udx,udy,udz,size/2);
                    Point_3D_Move_With_DirAndDis(lox,loy,loz,vdx,vdy,vdz,size/2);
                    /* tmat_h = PM_CREATE_TMAT(1,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz); */
                    tmat_h = Trans_SetFromPointAndTwoVectors(lox,loy,loz,udx,udy,udz,vdx,vdy,vdz);
                    part_handle = Create_Plate(Support_Pad_Pid, SystemId, curve, tmat_h, hole_list);
                }
                else if(Pad_Type == "T"){
                    gap = Pad_Gap;
                    width = size;
                    height = size;
                    t1 = t;
                    t2 = t;
                    radius = Pad_Corner_Radius;
                    curve = Create_Triangle_Curve(width,height,t1,t2,gap,radius);
                    pad_type = "T" + STRINGTERM(FTOASCII(width),".") + "X" + STRINGTERM(FTOASCII(height),".")+ "X" + STRINGTERM(FTOASCII(radius),".");        
                    /* tmat_h = PM_CREATE_TMAT(1,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz); */
                    tmat_h = Trans_SetFromPointAndTwoVectors(lox,loy,loz,udx,udy,udz,vdx,vdy,vdz);
                    part_handle = Create_Plate(Support_Pad_Pid, SystemId, curve, tmat_h, hole_list);
                }
                else if(Pad_Type == "S"){
                    Point_3D_Move_With_DirAndDis(lox,loy,loz,udx,udy,udz,size/2);
                    Point_3D_Move_With_DirAndDis(lox,loy,loz,vdx,vdy,vdz,size/2);
                    part_handle = Create_Standcomp(Support_Pad_Pid, SystemId, lox, loy, loz, udx, udy, udz, vdx, vdy, vdz, tmat_h);
                    pad_type = "S";
                }
                if(ISINT(part_handle)){
                   free_2darray(hole_list);
                   return(-1);
                }
                part_number = "2-" + ITOASCII(2*i);
                Set_Attribute_Value(part_handle,Part_Number,part_number);
                Set_Attribute_Value(part_handle, PadType,  pad_type);
                PM_ADD_OBJECT_TO_SET(part_handle, support);
            }
        }

        /*create leg of right side */
        is_create = Get_Bend_Tray_Leg_is_create(tray_angle,tray_width,2*i+1);
        if(is_create){
            Get_Beam_Data_From_Arrary(Legs,2*i+1,x1,y1,z1,x2,y2,z2,x_dx,x_dy,x_dz,end1x,end1y,end1z,end2x,end2y,end2z);
            lox = 0; loy = 0; loz = 0;
            tmat_h = PM_CREATE_TMAT(1,lox,loy,loz,1,0,0,0,1,0);
            part_handle = Create_Beam(Support_Leg_Pid,SystemId,x1,y1,z1,x2,y2,z2,x_dx,x_dy,x_dz,end1x,end1y,end1z,end2x,end2y,end2z,tmat_h);
            if(ISINT(part_handle)){
                return(-1);
            }
            part_number = "1-" + ITOASCII(2*i+1);
            Set_Attribute_Value(part_handle,Part_Number,part_number);
            PM_ADD_OBJECT_TO_SET(part_handle, support);
            
            /*create pads*/
            if(Pad_Switch == "on"){
                size = 1.0*DM_PARTID_DATA(Support_Leg_Pid, "D31");
                t = 1.0*DM_PARTID_DATA(Support_Leg_Pid, "D32");
                hole_list = alloc_2darray(0, 0);
                pad_type = "";
                lox=0;loy=0;loz=0;udx=0;udy=0;udz=0;vdx=0;vdy=0;vdz=0;

                /*create pads for leg of right side*/
                Get_Plate_Data_From_Array(Pads,2*i+1,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz);
                if(Pad_Type == "R"){
                    length = size + 2*Pad_Gap;
                    width = size + 2*Pad_Gap;
                    radius = Pad_Corner_Radius;
                    pad_type = "R" + STRINGTERM(FTOASCII(length),".") + "X" + STRINGTERM(FTOASCII(width),".")+ "X" + STRINGTERM(FTOASCII(radius),".");
                    curve = Create_Rectangular_Curve(length,width,radius);
                    Point_3D_Move_With_DirAndDis(lox,loy,loz,udx,udy,udz,size/2);
                    Point_3D_Move_With_DirAndDis(lox,loy,loz,vdx,vdy,vdz,size/2);
                    /* tmat_h = PM_CREATE_TMAT(1,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz); */
                    tmat_h = Trans_SetFromPointAndTwoVectors(lox,loy,loz,udx,udy,udz,vdx,vdy,vdz);
                    part_handle = Create_Plate(Support_Pad_Pid, SystemId, curve, tmat_h, hole_list);
                }
                else if(Pad_Type == "C"){
                    radius = size/(2*COS(45)) + Pad_Gap;
                    pad_type = "C" + STRINGTERM(FTOASCII(radius),".");
                    curve = Create_Circle_Curve(radius);
                    Point_3D_Move_With_DirAndDis(lox,loy,loz,udx,udy,udz,size/2);
                    Point_3D_Move_With_DirAndDis(lox,loy,loz,vdx,vdy,vdz,size/2);
                    /* tmat_h = PM_CREATE_TMAT(1,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz); */
                    tmat_h = Trans_SetFromPointAndTwoVectors(lox,loy,loz,udx,udy,udz,vdx,vdy,vdz);
                    part_handle = Create_Plate(Support_Pad_Pid, SystemId, curve, tmat_h, hole_list);
                }
                else if(Pad_Type == "T"){
                    gap = Pad_Gap;
                    width = size;
                    height = size;
                    t1 = t;
                    t2 = t;
                    radius = Pad_Corner_Radius;
                    curve = Create_Triangle_Curve(width,height,t1,t2,gap,radius);
                    pad_type = "T" + STRINGTERM(FTOASCII(width),".") + "X" + STRINGTERM(FTOASCII(height),".")+ "X" + STRINGTERM(FTOASCII(radius),".");     	        
                    /* tmat_h = PM_CREATE_TMAT(1,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz); */
                    tmat_h = Trans_SetFromPointAndTwoVectors(lox,loy,loz,udx,udy,udz,vdx,vdy,vdz);
                    part_handle = Create_Plate(Support_Pad_Pid, SystemId, curve, tmat_h, hole_list);
                }
                else if(Pad_Type == "S"){
                    Point_3D_Move_With_DirAndDis(lox,loy,loz,udx,udy,udz,size/2);
                    Point_3D_Move_With_DirAndDis(lox,loy,loz,vdx,vdy,vdz,size/2);
                    part_handle = Create_Standcomp(Support_Pad_Pid, SystemId, lox, loy, loz, udx, udy, udz, vdx, vdy, vdz, tmat_h);
                    pad_type = "S";
                }
                if(ISINT(part_handle)){
                    free_2darray(hole_list);
                    return(-1);
                }
                part_number = "2-" + ITOASCII(2*i+1);
                Set_Attribute_Value(part_handle,Part_Number,part_number);
                Set_Attribute_Value(part_handle,PadType,pad_type);
                PM_ADD_OBJECT_TO_SET(part_handle,support);
            }
        }
    }
    PM_ADD_SET_TO_GROUP(support, Support_Handle);
    create_tray_label();
    PM_FREE_SET(support);
    Copy_Tray_Layer(Cable_Tray_Handle, 
                    Support_Dx,Support_Dy,Support_Dz,
                    Tray_Dx,Tray_Dy,Tray_Dz, 
                    Support_Layer);
	return(0);
}

quit_handler(item, event_type, button_value)
{
    free_2darray(Legs);
    free_2darray(Pads);
    free_2darray(Leg_Position);
    free_2darray(Leg_Direction);
    A_FREE(Intervals);
    A_FREE(Leg_Heights);
	U_MESSAGE("退出电缆托架支吊架参数化建模窗口");
	return(99);
}

/*
**创建用于输入及编辑灯架参数的面板
*/
create_parameter_panel(mainform)
{
	Parameters = W_ADD_WINDOW(mainform, W_PANEL, "Parameters");

    W_REALIZE_WINDOW(Parameters,    W_FRAME_X,      420,
                                    W_FRAME_Y,      310,
                                    W_FRAME_WIDTH,  200,
                                    W_FRAME_HEIGHT, 180);

	title = W_ADD_PANELITEM(Parameters, W_PANEL_MESSAGE, "title");
	W_REALIZE_PANELITEM(title,  W_PANEL_ROW,	0,
		                        W_PANEL_COL,	0,
		                        W_PANEL_LABEL,	"支架尺寸");

    seperate_line = W_ADD_PANELITEM(Parameters, W_PANEL_MESSAGE, "seperate_line");
	W_REALIZE_PANELITEM(seperate_line,  W_PANEL_ROW,        0,
                                        W_PANEL_COL,        7,
                                        W_PANEL_LABEL,      "",
                                        W_PANEL_SEPARATOR,  1);

    title0 = W_ADD_PANELITEM(Parameters, W_PANEL_MESSAGE, "title0");
	W_REALIZE_PANELITEM(title0, W_PANEL_ROW,	1,
                                W_PANEL_COL,	0,
                                W_PANEL_LABEL,	"支架层数:");

	Support_Layer_Option = W_ADD_PANELITEM(Parameters, W_PANEL_CHOICE, "Support_Layer_Option");
	W_REALIZE_PANELITEM(Support_Layer_Option, W_PANEL_ROW,          1,
	                                          W_PANEL_COL,          10,
							                  W_PANEL_LABEL,        "",
							                  W_PANEL_CHOICESTRING, "单层  ",
							                  W_PANEL_CHOICESTRING, "双层  ",
							                  W_PANEL_CHOICESTRING, "三层  ",
							                  W_PANEL_ORDINALVALUE, 0,
							                  W_PANEL_CHOICESTYLE,	W_STYLE_PUSHBUTTONS,
							                  W_PANEL_CALLBACK,     1);
	W_SET_PANELITEM_HANDLER(Support_Layer_Option, "support_layer_option_handler");
    
	title1 = W_ADD_PANELITEM(Parameters, W_PANEL_MESSAGE, "title1");
	W_REALIZE_PANELITEM(title1, W_PANEL_ROW,	2,
                                W_PANEL_COL,	0,
                                W_PANEL_LABEL,	"支架层高:");

	Support_Layer_H1 = W_ADD_PANELITEM(Parameters, W_PANEL_FILL, "Support_Layer_H1");
    W_CONFIG_NUMERIC_PANELITEM(Support_Layer_H1, W_NUMERIC_INT,0, 10000);
	W_REALIZE_PANELITEM(Support_Layer_H1, W_PANEL_ROW,        2,
	                                      W_PANEL_COL,        10,
							              W_PANEL_LABEL,      "H1:",
							              W_PANEL_LENGTH,     5,
							              W_PANEL_SENSITIVITY,0,
							              W_PANEL_CALLBACK,   1);
	W_SET_PANELITEM_HANDLER(Support_Layer_H1, "support_para_handler");

	Support_Layer_H2 = W_ADD_PANELITEM(Parameters, W_PANEL_FILL, "Support_Layer_H2");
    W_CONFIG_NUMERIC_PANELITEM(Support_Layer_H2, W_NUMERIC_INT,0, 10000);
	W_REALIZE_PANELITEM(Support_Layer_H2, W_PANEL_ROW,        2,
	                                      W_PANEL_COL,        21,
							              W_PANEL_LABEL,      "H2:",
							              W_PANEL_LENGTH,     5,
							              W_PANEL_SENSITIVITY,0,
							              W_PANEL_CALLBACK,   1);
	W_SET_PANELITEM_HANDLER(Support_Layer_H2, "support_para_handler");
    
	title2 = W_ADD_PANELITEM(Parameters, W_PANEL_MESSAGE, "title2");
	W_REALIZE_PANELITEM(title2, W_PANEL_ROW,	3,
                                W_PANEL_COL,	0,
                                W_PANEL_LABEL,	"参考位置:");

	Support_Align_Option = W_ADD_PANELITEM(Parameters, W_PANEL_CHOICE, "Support_Align_Option");
	W_REALIZE_PANELITEM(Support_Align_Option, W_PANEL_ROW,          3,
	                                          W_PANEL_COL,          10,
							                  W_PANEL_LABEL,        "",
							                  W_PANEL_CHOICESTRING, "底部  ",
							                  W_PANEL_CHOICESTRING, "中心  ",
							                  W_PANEL_CHOICESTRING, "顶部  ",
							                  W_PANEL_ORDINALVALUE, 0,
							                  W_PANEL_CHOICESTYLE,	W_STYLE_PUSHBUTTONS,
							                  W_PANEL_CALLBACK,     1);
	W_SET_PANELITEM_HANDLER(Support_Align_Option, "support_align_option_handler");

    title3 = W_ADD_PANELITEM(Parameters, W_PANEL_MESSAGE, "title3");
	W_REALIZE_PANELITEM(title3, W_PANEL_ROW,	4,
                                W_PANEL_COL,	0,
                                W_PANEL_LABEL,	"安装方式:");
                                
	Support_Direction_Option = W_ADD_PANELITEM(Parameters, W_PANEL_CHOICE, "Support_Direction_Option");
	W_REALIZE_PANELITEM(Support_Direction_Option, W_PANEL_ROW,      4,
	                                          W_PANEL_COL,          10,
							                  W_PANEL_LABEL,        "",
							                  W_PANEL_CHOICESTRING, "正装  ",
							                  W_PANEL_CHOICESTRING, "侧装  ",
							                  W_PANEL_ORDINALVALUE, 0,
							                  W_PANEL_CHOICESTYLE,	W_STYLE_PUSHBUTTONS,
							                  W_PANEL_CALLBACK,     1);
	W_SET_PANELITEM_HANDLER(Support_Direction_Option, "support_align_orientation_handler");

	Support_Leg_Number = W_ADD_PANELITEM(Parameters, W_PANEL_FILL, "Support_Leg_Number");
    W_CONFIG_NUMERIC_PANELITEM(Support_Leg_Number, W_NUMERIC_INT,0,6);
	W_REALIZE_PANELITEM(Support_Leg_Number, W_PANEL_ROW,        5,
	                                        W_PANEL_COL,        0,
							                W_PANEL_LABEL,      "撑脚个数:     ",
							                W_PANEL_LENGTH,     5,
							                W_PANEL_SENSITIVITY,0,
							                W_PANEL_CALLBACK,   1);
	W_SET_PANELITEM_HANDLER(Support_Leg_Number, "support_leg_number_handler");
	W_SET_NUMERIC_VALUE(Support_Leg_Number, 3);

    Move_Legs = W_ADD_PANELITEM(Parameters, W_PANEL_BUTTON, "Move_Legs");
	W_REALIZE_PANELITEM(Move_Legs,  W_PANEL_ROW,            5,
                                    W_PANEL_COL,            20,
                                    W_PANEL_BUTTONIMAGE,    "延伸撑脚",
                                    W_PANEL_WIDTH,          10,
                                    W_PANEL_BUTTONVALUE,    506,
                                    W_PANEL_CALLBACK,       1,
                                    W_PANEL_LAYOUT,         W_LAYOUT_HORIZONTAL);
	W_SET_PANELITEM_HANDLER(Move_Legs, "move_legs_handler");
    
	title3 = W_ADD_PANELITEM(Parameters, W_PANEL_MESSAGE, "title3");
	W_REALIZE_PANELITEM(title3, W_PANEL_ROW,	6,
		                        W_PANEL_COL,	0,
		                        W_PANEL_LABEL,	"------撑脚高度------");
    /* height of support legs */
	Support_Interval1 = W_ADD_PANELITEM(Parameters, W_PANEL_FILL, "Support_Interval1");
    W_CONFIG_NUMERIC_PANELITEM(Support_Interval1, W_NUMERIC_FLOAT, 0, 3000, "%.1f");
	W_REALIZE_PANELITEM(Support_Interval1,  W_PANEL_ROW,        7,
	                                        W_PANEL_COL,        0,
							                W_PANEL_LABEL,      "L0:",
							                W_PANEL_LENGTH,     5,
							                W_PANEL_SENSITIVITY,0,
							                W_PANEL_CALLBACK,   1);
	W_SET_PANELITEM_HANDLER(Support_Interval1, "support_para_handler");

	Support_Leg1_L = W_ADD_PANELITEM(Parameters, W_PANEL_FILL, "Support_Leg1_L");
    W_CONFIG_NUMERIC_PANELITEM(Support_Leg1_L, W_NUMERIC_INT, 0, 10000);
	W_REALIZE_PANELITEM(Support_Leg1_L, W_PANEL_ROW,        7,
	                                    W_PANEL_COL,        10,
							            W_PANEL_LABEL,      "H0L:",
							            W_PANEL_LENGTH,     5,
							            W_PANEL_SENSITIVITY,0,
							            W_PANEL_CALLBACK,   1);
	W_SET_PANELITEM_HANDLER(Support_Leg1_L, "support_para_handler");

	Support_Leg1_R = W_ADD_PANELITEM(Parameters, W_PANEL_FILL, "Support_Leg1_R");
    W_CONFIG_NUMERIC_PANELITEM(Support_Leg1_R, W_NUMERIC_INT, 0, 10000);
	W_REALIZE_PANELITEM(Support_Leg1_R, W_PANEL_ROW,        7,
	                                    W_PANEL_COL,        21,
							            W_PANEL_LABEL,      "H0R:",
							            W_PANEL_LENGTH,     5,
							            W_PANEL_SENSITIVITY,0,
							            W_PANEL_CALLBACK,   1);
	W_SET_PANELITEM_HANDLER(Support_Leg1_R, "support_para_handler");

	Support_Interval2 = W_ADD_PANELITEM(Parameters, W_PANEL_FILL, "Support_Interval2");
    W_CONFIG_NUMERIC_PANELITEM(Support_Interval2, W_NUMERIC_FLOAT, 0, 3000, "%.1f");
	W_REALIZE_PANELITEM(Support_Interval2,  W_PANEL_ROW,        8,
	                                        W_PANEL_COL,        0,
							                W_PANEL_LABEL,      "L1:",
							                W_PANEL_LENGTH,     5,
							                W_PANEL_SENSITIVITY,0,
							                W_PANEL_CALLBACK,   1);
	W_SET_PANELITEM_HANDLER(Support_Interval2, "support_para_handler");

	Support_Leg2_L = W_ADD_PANELITEM(Parameters, W_PANEL_FILL, "Support_Leg2_L");
    W_CONFIG_NUMERIC_PANELITEM(Support_Leg2_L, W_NUMERIC_INT, 0, 10000);
	W_REALIZE_PANELITEM(Support_Leg2_L, W_PANEL_ROW,        8,
	                                    W_PANEL_COL,        10,
							            W_PANEL_LABEL,      "H1L:",
							            W_PANEL_LENGTH,     5,
							            W_PANEL_SENSITIVITY,0,
							            W_PANEL_CALLBACK,   1);
	W_SET_PANELITEM_HANDLER(Support_Leg2_L, "support_para_handler");

	Support_Leg2_R = W_ADD_PANELITEM(Parameters, W_PANEL_FILL, "Support_Leg2_R");
    W_CONFIG_NUMERIC_PANELITEM(Support_Leg2_R, W_NUMERIC_INT, 0, 10000);
	W_REALIZE_PANELITEM(Support_Leg2_R, W_PANEL_ROW,        8,
	                                    W_PANEL_COL,        21,
							            W_PANEL_LABEL,      "H1R:",
							            W_PANEL_LENGTH,     5,
							            W_PANEL_SENSITIVITY,0,
							            W_PANEL_CALLBACK,   1);
	W_SET_PANELITEM_HANDLER(Support_Leg2_R, "support_para_handler");

 	Support_Interval3 = W_ADD_PANELITEM(Parameters, W_PANEL_FILL, "Support_Interval3");
    W_CONFIG_NUMERIC_PANELITEM(Support_Interval3, W_NUMERIC_FLOAT,0,3000, "%.1f");
	W_REALIZE_PANELITEM(Support_Interval3,  W_PANEL_ROW,        9,
	                                        W_PANEL_COL,        0,
							                W_PANEL_LABEL,      "L2:",
							                W_PANEL_LENGTH,     5,
							                W_PANEL_SENSITIVITY,0,
							                W_PANEL_CALLBACK,   1);
	W_SET_PANELITEM_HANDLER(Support_Interval3, "support_para_handler");

	Support_Leg3_L = W_ADD_PANELITEM(Parameters, W_PANEL_FILL, "Support_Leg3_L");
    W_CONFIG_NUMERIC_PANELITEM(Support_Leg3_L, W_NUMERIC_INT, 0, 10000);
	W_REALIZE_PANELITEM(Support_Leg3_L, W_PANEL_ROW,        9,
	                                    W_PANEL_COL,        10,
							            W_PANEL_LABEL,      "H2L:",
							            W_PANEL_LENGTH,     5,
							            W_PANEL_SENSITIVITY,0,
							            W_PANEL_CALLBACK,   1);
	W_SET_PANELITEM_HANDLER(Support_Leg3_L, "support_para_handler");

	Support_Leg3_R = W_ADD_PANELITEM(Parameters, W_PANEL_FILL, "Support_Leg3_R");
    W_CONFIG_NUMERIC_PANELITEM(Support_Leg3_R, W_NUMERIC_INT, 0, 10000);
	W_REALIZE_PANELITEM(Support_Leg3_R, W_PANEL_ROW,        9,
	                                    W_PANEL_COL,        21,
							            W_PANEL_LABEL,      "H2R:",
							            W_PANEL_LENGTH,     5,
							            W_PANEL_SENSITIVITY,0,
							            W_PANEL_CALLBACK,   1);
	W_SET_PANELITEM_HANDLER(Support_Leg3_R, "support_para_handler");   
	return(Parameters);
}

/*
**处理参数发生更改的事件
*/
support_para_handler(item, event_type, dummy)
{
    /* 处理输入新数值后 */
    if (event_type == W_EVENT_ITEM_LEFT){
        if(item == Support_Layer_H1){
            st = 0;
            value = W_GET_NUMERIC_VALUE(item, st);
            if (st != 0){
		        W_SET_NUMERIC_VALUE(item, Mult_Tray_Layer_Height1);
		        return(0);
            }
            Mult_Tray_Layer_Height1 = value;
            if(Modify_flag){
                st = PM_UM_OPEN_CHANGE("修改双层托架高度为:" + ITOASCII(value));
                delete_support_members();
                calculate_leg_position();
                calculate_leg_pad_para();
                res = create_support();
                if (res == -1){
                    PM_UM_CLOSE_CHANGE();
                    PM_UM_UNDO_LAST_CHANGE();
                    return(0);
                }
                st = PM_UM_CLOSE_CHANGE();
            }
        }
        else if(item == Support_Layer_H2){
            st = 0;
            value = W_GET_NUMERIC_VALUE(item, st);
            if (st != 0){
		        W_SET_NUMERIC_VALUE(item, Mult_Tray_Layer_Height2);
		        return(0);
            }
            Mult_Tray_Layer_Height2 = value;
            if(Modify_flag){
                st = PM_UM_OPEN_CHANGE("修改双层托架高度为:" + ITOASCII(value));
                delete_support_members();
                calculate_leg_position();
                calculate_leg_pad_para();
                res = create_support();
                if (res == -1){
                    PM_UM_CLOSE_CHANGE();
                    PM_UM_UNDO_LAST_CHANGE();
                    return(0);
                }
                st = PM_UM_CLOSE_CHANGE();
            }
        }
        else if(item == Support_Leg1_R){
            st = 0;
            value = W_GET_NUMERIC_VALUE(item, st);
            if (st != 0){
                orgin = A_GET(Leg_Heights,0);
		        W_SET_NUMERIC_VALUE(item, orgin);
		        return(0);
            }
            A_PUT(Leg_Heights,0,value);
            if(Modify_flag){
                st = PM_UM_OPEN_CHANGE("修改第1连接点右侧支撑脚的高度为:" + ITOASCII(value));
                delete_support_members();
                calculate_leg_position();
                calculate_leg_pad_para();
                res = create_support();
                if (res == -1){
                    PM_UM_CLOSE_CHANGE();
                    PM_UM_UNDO_LAST_CHANGE();
                    return(0);
                }
                st = PM_UM_CLOSE_CHANGE();
            }
        }
        else if(item == Support_Leg1_L){
            st = 0;
            value = W_GET_NUMERIC_VALUE(item, st);
            if (st != 0){       
                origin = A_GET(Leg_Heights,1);            
		        W_SET_NUMERIC_VALUE(item, origin);
		        return(0);
            }
            A_PUT(Leg_Heights,1,value);
            if(Modify_flag){
                st = PM_UM_OPEN_CHANGE("修改第1连接点左侧支撑脚的高度为" + ITOASCII(value));
                delete_support_members();
                calculate_leg_position();
                calculate_leg_pad_para();
                res = create_support();
                if (res == -1){
                    PM_UM_CLOSE_CHANGE();
                    PM_UM_UNDO_LAST_CHANGE();
                    return(0);
                }
                st = PM_UM_CLOSE_CHANGE();
            }
        }
        else if(item == Support_Leg2_R){
            st = 0;
            value = W_GET_NUMERIC_VALUE(item, st);
            if (st != 0){
                origin =  A_GET(Leg_Heights,2);
		        W_SET_NUMERIC_VALUE(item, origin);
		        return(0);
            }
            A_PUT(Leg_Heights,2,value);
            if(Modify_flag){
                st = PM_UM_OPEN_CHANGE("修改第2连接点右侧支撑脚的高度为" + ITOASCII(value));
                delete_support_members();
                calculate_leg_position();
                calculate_leg_pad_para();
                res = create_support();
                if (res == -1){
                    PM_UM_CLOSE_CHANGE();
                    PM_UM_UNDO_LAST_CHANGE();
                    return(0);
                }
                st = PM_UM_CLOSE_CHANGE();
            }
        }
        else if(item == Support_Leg2_L){
            st = 0;
            value = W_GET_NUMERIC_VALUE(item, st);
            if (st != 0){
                origin = A_GET(Leg_Heights,3);
		        W_SET_NUMERIC_VALUE(item, origin);
		        return(0);
            }
            A_PUT(Leg_Heights,3,value);
            if(Modify_flag){
                st = PM_UM_OPEN_CHANGE("修改第2连接点左侧支撑脚的高度为:" + ITOASCII(value));
                delete_support_members();
                calculate_leg_position();
                calculate_leg_pad_para();
                res = create_support();
                if (res == -1){
                    PM_UM_CLOSE_CHANGE();
                    PM_UM_UNDO_LAST_CHANGE();
                    return(0);
                }
                st = PM_UM_CLOSE_CHANGE();
            }
        }
        else if(item == Support_Leg3_R){
            st = 0;
            value = W_GET_NUMERIC_VALUE(item, st);
            if (st != 0){
                origin =  A_GET(Leg_Heights,4);
		        W_SET_NUMERIC_VALUE(item, origin);
		        return(0);
            }
            A_PUT(Leg_Heights,4,value);
            if(Modify_flag){
                st = PM_UM_OPEN_CHANGE("修改第3连接点右侧支撑脚的高度为" + ITOASCII(value));
                delete_support_members();
                calculate_leg_position();
                calculate_leg_pad_para();
                res = create_support();
                if (res == -1){
                    PM_UM_CLOSE_CHANGE();
                    PM_UM_UNDO_LAST_CHANGE();
                    return(0);
                }
                st = PM_UM_CLOSE_CHANGE();
            }
        }
        else if(item == Support_Leg3_L){
            st = 0;
            value = W_GET_NUMERIC_VALUE(item, st);
            if (st != 0){
                origin = A_GET(Leg_Heights,5);
		        W_SET_NUMERIC_VALUE(item, origin);
		        return(0);
            }
            A_PUT(Leg_Heights,5,value);
            if(Modify_flag){
                st = PM_UM_OPEN_CHANGE("修改第3连接点左侧支撑脚的高度为:" + ITOASCII(value));
                delete_support_members();
                calculate_leg_position();
                calculate_leg_pad_para();
                res = create_support();
                if (res == -1){
                    PM_UM_CLOSE_CHANGE();
                    PM_UM_UNDO_LAST_CHANGE();
                    return(0);
                }
                st = PM_UM_CLOSE_CHANGE();
            }
        }
        set_height_parameters();
    }
    return(0);
}

pick_beam_handles(handles)
{
    i=0;
    support_name = PM_GET_OBJDATA(Support_Handle,0,MMT_TAG_OBJNAME);
    while(1){
        tmp = 0;
        picked_handle = PM_PICK_OBJECT("选择延伸的支撑腿(角钢)", tmp, "STRUCTCMP","BEAM");
        if (!ISINT(picked_handle)){
            /*get name of support group*/
            group_handle = PM_GET_OBJECT_GROUP(picked_handle, Group_Type_I);
            if (ISINT(group_handle)){
                U_CONFIRM("此零件不属于任何电缆托架支吊架");
            }
            group_name = PM_GET_OBJDATA(group_handle,0,MMT_TAG_OBJNAME);
            /* is the type of support match with this script */
            type = PM_GET_OBJDATA(group_handle, 0, SupportType);
            if(ISINT(type)){
                U_CONFIRM("此零件不属于任何电缆托架支吊架");
            }
            if(type != Support_Type){
                info = "选择的电缆托架支吊架类型为" + type + ",这个程序只能处理类型为" + Support_Type + "的电缆托架支吊架。";
                U_CONFIRM(info);
            }
            if(group_name != support_name){
                info = "请选择当前托架"+support_name+"的角钢";
                U_CONFIRM(info);
            }
            obj_type = PM_GET_OBJDATA(picked_handle, tmp, MMT_TAG_OBJTYPE);
            if(obj_type == "5"){	
                A_PUT(handles,i,picked_handle); 
                PM_HIGHLIGHT_OBJECT(picked_handle, 1);
                i=i+1;
            }
            else{
                PM_HIGHLIGHT_OBJECT(picked_handle, 0);
                U_CONFIRM("请选择型材进行操作");
            }
        }
        else{
            return(i);
        }
    }
}

pick_position(x,y,z)
{
	px = 0.0; py = 0.0; pz = 0.0;
	trace_handle = PM_NEW_TRACEP();  
	PM_GET_CURRENT_LOC(px,py,pz);  
	res = PM_GET_POINT("选择参考点的位置", trace_handle, px, py, pz); 
	if(res<0) return(-1);
    x=px; y=py; z=pz;
    return(1);
}

is_position_ok(x,y,z)
{
    /*现有角钢上的点*/
    x1 = get_2darray(Legs,0,0);
    y1 = get_2darray(Legs,0,1);
    z1 = get_2darray(Legs,0,2);
    x2 = get_2darray(Legs,0,3);
    y2 = get_2darray(Legs,0,4);
    z2 = get_2darray(Legs,0,5);
    
    /*投影点*/
    px=0.0;py=0.0;pz=0.0;
    Point_ProjectOnLine(x,y,z, px,py,pz, x1,y1,z1, x2,y2,z2);

    dx1=0.0;dy1=0.0;dz1=0.0;
    Vector3d_FromPoints(x1,y1,z1, x2,y2,z2, dx1,dy1,dz1);
    dx2=0.0;dy2=0.0;dz2=0.0;
    Vector3d_FromPoints(x1,y1,z1, px,py,pz, dx2,dy2,dz2);
    /*是否同向*/
    angle = Vector3d_AngleToVector(dx1,dy1,dz1, dx2,dy2,dz2);
    if(Eq(angle,0)){
        height = Point_DistToPoint(x1,y1,z1, px,py,pz);
        return(height);
    }
    return(0);
}

move_legs_handler(item, event_type, dummy)
{
    /*是否修改模式*/
    if(!Modify_flag) return (0);
    /*选择支撑腿*/
    leg_handles = A_ALLOC(20);
    legs = pick_beam_handles(leg_handles);
    if (!legs) return (0);
    /*选择新的支撑面*/
    x0=0.0;y0=0.0;z0=0.0;
    res = pick_position(x0,y0,z0);
    if (!res) return (0);
    /*支撑面是否在角钢一侧*/
    height = is_position_ok(x0,y0,z0);
    if (!height) return (0);

    /*移动角钢及垫板*/
    for (i=0;i<legs;i=i+1){
        leg_handle = A_GET(leg_handles,i);
        part_number = Get_Attribute_Value(leg_handle,Part_Number);
        leg_index = String_To_Int(SUBSTRING(part_number, 2));
        A_PUT(Leg_Heights,leg_index,height);
    }
    
    st = PM_UM_OPEN_CHANGE("延伸撑脚:" + ITOASCII(height));
    delete_support_members();
    calculate_leg_pad_para();
    /*create support parts*/
    res = create_support();
    if (res == -1){
        PM_UM_CLOSE_CHANGE();
        PM_UM_UNDO_LAST_CHANGE();
        return(0);
    }
    st = PM_UM_CLOSE_CHANGE();
    set_height_parameters();
     return(1);
}

/*
**handle leg number change case
*/
support_leg_number_handler(item, event_type, dummy)
{
    if(event_type == W_EVENT_ITEM_LEFT){
        st = 0;
        leg_number = W_GET_NUMERIC_VALUE(item, st);
        if (st != 0){
            W_SET_NUMERIC_VALUE(item, Leg_Number);
            return(0);
        }
        Leg_Number = leg_number;

        if(Modify_flag){
            st = PM_UM_OPEN_CHANGE("修改支撑脚个数为:" + ITOASCII(leg_number));
            delete_support_members();
            set_interval_parameters();
            calculate_leg_position();
            calculate_leg_height();
            set_height_parameters();
            calculate_leg_pad_para();
            /*create support parts*/
            res = create_support();
            if(res == -1){
                PM_UM_CLOSE_CHANGE();
                PM_UM_UNDO_LAST_CHANGE();
                return(0);
            }
            st = PM_UM_CLOSE_CHANGE();
        }
    }
    return(0);
}

create_command_panel(mainform)
{
    Command = W_ADD_WINDOW(mainform, W_PANEL, "Command");
	W_REALIZE_WINDOW(Command,   W_FRAME_X,      0,
                                W_FRAME_Y,      600,
                                W_FRAME_WIDTH,  410,
                                W_FRAME_HEIGHT, 50);

	title = W_ADD_PANELITEM(Command, W_PANEL_MESSAGE, "title");

	W_REALIZE_PANELITEM(title,  W_PANEL_ROW,	0,
		                        W_PANEL_COL,	0,
		                        W_PANEL_LABEL,	"命令");

    seperate_line = W_ADD_PANELITEM(Command, W_PANEL_MESSAGE, "seperate_line");

	W_REALIZE_PANELITEM(seperate_line,  W_PANEL_ROW,        0,
	                                    W_PANEL_COL,        3,
		                                W_PANEL_LABEL,      "",
		                                W_PANEL_SEPARATOR,  1);

	Create_Support = W_ADD_PANELITEM(Command, W_PANEL_BUTTON, "Create_Support");
	W_REALIZE_PANELITEM(Create_Support, W_PANEL_ROW,            1,
	                                    W_PANEL_COL,            0,
							            W_PANEL_BUTTONIMAGE,    "创建",
							            W_PANEL_WIDTH,          10,
							            W_PANEL_BUTTONVALUE,    501,
							            W_PANEL_CALLBACK,       1,
							            W_PANEL_LAYOUT,         W_LAYOUT_HORIZONTAL);
	W_SET_PANELITEM_HANDLER(Create_Support, "create_support_handler");


	Delete_Support = W_ADD_PANELITEM(Command, W_PANEL_BUTTON, "Delete_Support");
	W_REALIZE_PANELITEM(Delete_Support, W_PANEL_ROW,            1,
	                                    W_PANEL_COL,            11,
							            W_PANEL_BUTTONIMAGE,    "删除",
							            W_PANEL_WIDTH,          10,
							            W_PANEL_BUTTONVALUE,    502,
							            W_PANEL_CALLBACK,       1,
							            W_PANEL_LAYOUT,         W_LAYOUT_HORIZONTAL);
	W_SET_PANELITEM_HANDLER(Delete_Support, "delete_support_handler");

	Browse_Support = W_ADD_PANELITEM(Command, W_PANEL_BUTTON, "Browse_Support");
	W_REALIZE_PANELITEM(Browse_Support, W_PANEL_ROW,            1,
	                                    W_PANEL_COL,            22,
							            W_PANEL_BUTTONIMAGE,    "浏览",
							            W_PANEL_WIDTH,          10,
							            W_PANEL_BUTTONVALUE,    503,
							            W_PANEL_CALLBACK,       1,
							            W_PANEL_LAYOUT,         W_LAYOUT_HORIZONTAL);
	W_SET_PANELITEM_HANDLER(Browse_Support, "browse_support_handler");

	Undo = W_ADD_PANELITEM(Command, W_PANEL_BUTTON, "Undo");
	W_REALIZE_PANELITEM(Undo,   W_PANEL_ROW,            1,
	                            W_PANEL_COL,            33,
							    W_PANEL_BUTTONIMAGE,    "Undo",
							    W_PANEL_WIDTH,          10,
							    W_PANEL_BUTTONVALUE,    504,
							    W_PANEL_CALLBACK,       1,
							    W_PANEL_LAYOUT,         W_LAYOUT_HORIZONTAL);
	W_SET_PANELITEM_HANDLER(Undo, "undo_handler");

	Redo = W_ADD_PANELITEM(Command, W_PANEL_BUTTON, "Redo");
	W_REALIZE_PANELITEM(Redo,   W_PANEL_ROW,            1,
	                            W_PANEL_COL,            44,
							    W_PANEL_BUTTONIMAGE,    "Redo",
							    W_PANEL_WIDTH,          10,
							    W_PANEL_BUTTONVALUE,    505,
							    W_PANEL_CALLBACK,       1,
							    W_PANEL_LAYOUT,         W_LAYOUT_HORIZONTAL);
	W_SET_PANELITEM_HANDLER(Redo, "redo_handler");

	quit = W_ADD_PANELITEM(Command, W_PANEL_BUTTON, "quit");
	W_REALIZE_PANELITEM(quit,   W_PANEL_ROW,            1,
	                            W_PANEL_COL,            55,
							    W_PANEL_BUTTONIMAGE,    "退出",
							    W_PANEL_WIDTH,          10,
							    W_PANEL_BUTTONVALUE,    506,
							    W_PANEL_CALLBACK,       1,
							    W_PANEL_CLOSEBUTTON,    1,
							    W_PANEL_LAYOUT,         W_LAYOUT_HORIZONTAL);
	W_SET_PANELITEM_HANDLER(quit, "quit_handler");

	return(Command);
}

browse_support_handler(item, event_type, button_value)
{
    W_UNMAP_FRAME(MainWindow);
	nth_part = 0;
	PM_PICK_OBJECT("浏览模型",nth_part);
	W_MAP_FRAME(MainWindow);
}

delete_support_handler(item, event_type, button_value)
{
    flag = 1;
    while(flag){
        tmp = 0;
        picked_object_handle = PM_PICK_OBJECT("请选择要删除的电缆托架支吊架", tmp, "STRUCTCMP","BEAM");
        if (!ISINT(picked_object_handle)){
            /*get name of cable tray support*/
            group_handle = PM_GET_OBJECT_GROUP(picked_object_handle,Group_Type_I);
            if (ISINT(group_handle)){
                U_CONFIRM("此零件不属于任何电缆托架支吊架");
                return(0);
            }
            group_name = PM_GET_OBJDATA(group_handle,0,MMT_TAG_OBJNAME);
            /* check type of cable tray support */
            type = PM_GET_OBJDATA(group_handle, 0, SupportType);
            if(ISINT(type)){
                U_CONFIRM("此零件不属于任何电缆托架支吊架");
                return(0);
            }
            else{
                check = STRINGTERM(type,"_");
                if(check != "CTS"){
                    U_CONFIRM("此零件不属于任何电缆托架支吊架");
                    return(0);
                }
            }

            /* 定义UNDO缓存 */
            st = PM_UM_OPEN_CHANGE("删除电缆托架支吊架" + group_name);

            /* delete parts of cable tray support */
            seat_members = PM_GET_OBJECTS_IN_GROUP(group_handle);
            PM_DELETE_OBJECTS_IN_SET(seat_members, 0);

            /* delete cable tray support group */
            res = PM_DELETE_OBJECT(group_handle);

            /* if fail, trace back */
            if (res == -1){
                PM_UM_CLOSE_CHANGE();
                PM_UM_UNDO_LAST_CHANGE();
                return(0);
            }
            st = PM_UM_CLOSE_CHANGE();
        }
        else{
            flag = 0;
        }
    }
    support_name = auto_naming();
    W_SET_PANELITEM_ARGS(Support_Name, W_PANEL_VALUE, support_name);
	W_SET_PANELITEM_ARGS(Create_Support, W_PANEL_SENSITIVITY,1);
    W_SET_PANELITEM_ARGS(Move_Legs, W_PANEL_SENSITIVITY,0);
	Modify_flag = 0;
    return(0);
}

redo_handler(item, event_type, button_value)
{
    res = PM_UM_REDO_LAST_CHANGE();
    if (res == -1){
        U_CONFIRM("已经到了最后一个");
    }
    else{
        support_name = PM_GET_OBJDATA(Support_Handle,0,MMT_TAG_OBJNAME);
        if(ISSTRING(support_name)){
            load_support_data(support_name);
        }
    }
    return(0);
}

undo_handler(item, event_type, button_value)
{
    res = PM_UM_UNDO_LAST_CHANGE();
    if (res == -1){
        U_CONFIRM("已经到了最后一个");
    }
    else{
        support_name = PM_GET_OBJDATA(Support_Handle,0,MMT_TAG_OBJNAME);
        if(ISSTRING(support_name)){
            load_support_data(support_name);
        }
    }
    return(0);
}

delete_support_members()
{
    part_id = PM_GET_OBJDATA(Cable_Tray_Handle,0,MMT_TAG_PARTID);
    side_bar_width = DM_PARTID_NAMED_DIM(part_id,"SideBarW");
    
    /*删除多层tray及相关space*/
    supp_parts = PM_GET_OBJECTS_IN_GROUP(Support_Handle);
    part_number = PM_NR_MEMBERS_IN_SET(supp_parts);        
    for(i=0;i<part_number;i=i+1;){
        part = PM_GET_MEMBER_IN_SET(supp_parts,i);
        /* part_id = PM_GET_OBJDATA(part,0, MMT_TAG_PARTID); */
        obj_type = PM_GET_OBJDATA(part,0, MMT_TAG_OBJTYPE);
        if (obj_type==5){
            xmin = 0; xmax = 0; ymin = 0; ymax = 0; zmin = 0; zmax = 0;
            res = PM_GET_BBOX_OF_OBJECT(part, xmin, xmax, ymin, ymax, zmin, zmax); 
            trays = search_mdels_intersect_box(xmin,ymin,zmin,xmax,ymax,zmax,7);
            if(!ISINT(trays)){
                tray_number = PM_NR_MEMBERS_IN_SET(trays); 
                for(j=0;j<tray_number;j=j+1;){
                    tray_handle = PM_GET_MEMBER_IN_SET(trays,j);
                    if(tray_handle!=Cable_Tray_Handle){
                        PM_DELETE_OBJECT(tray_handle);
                    }
                }
            }
            
            if(side_bar_width != -1){
                xmin = xmin - side_bar_width;
                ymin = ymin - side_bar_width;
                zmin = zmin - side_bar_width;
                xmax = xmax + side_bar_width;
                ymax = ymax + side_bar_width;
                zmax = zmax + side_bar_width;
            }
            spaces = search_mdels_intersect_box(xmin,ymin,zmin,xmax,ymax,zmax,12);
            if(!ISINT(spaces)){
                space_number = PM_NR_MEMBERS_IN_SET(spaces); 
                for(j=0;j<space_number;j=j+1;){
                    space_handle = PM_GET_MEMBER_IN_SET(spaces,j);
                    space_type = PM_GET_OBJDATA(space_handle,0, ".lu");
                    /* U_MESSAGE(space_type); */
                    if(space_type==13){
                        PM_DELETE_OBJECT(space_handle);
                    }
                }
            }
        }
    }
    
   support_members = PM_GET_OBJECTS_IN_GROUP(Support_Handle);
   PM_DELETE_OBJECTS_IN_SET(support_members, 0);
   return(0);
}

/*
**加载
*/
load_default_setting()
{
    permision = PM_PREPARE_TO_EDIT_SETTINGS();
    if(permision != 0){
        U_MESSAGE("用户没有保存共享设置的权限");
    }

    /*set default value of support system*/
	system_name = "";
	st = GET_STRING_DEFAULT("CableTraySupport_Bend", "System_Name", system_name);
	if(st == 0){
        SystemName = system_name;
		SystemId = PM_GET_SYSTEM_ID(system_name);
		W_SET_PANELITEM_ARGS(System_Name, W_PANEL_VALUE, system_name);
	}
	else{
	   SystemName = "Default";
		SystemId = PM_GET_SYSTEM_ID(system_name);
		W_SET_PANELITEM_ARGS(System_Name, W_PANEL_VALUE, system_name);
	}

	/*set default material of support leg*/
	part_id = "";
	st = GET_STRING_DEFAULT("CableTraySupport_Bend", "Support_Leg", part_id);
	if(st == 0){
		descr = Pid_To_Description(part_id);
		Support_Leg_Pid = part_id;
		W_SET_PANELITEM_ARGS(Support_Leg, W_PANEL_VALUE, descr);
        part_code = STRINGTERM(part_id,"-");
        AngleBar_Part_Code = part_code;
	}
    else{
        if(Is_Part_Exited(Beam_Part_Pid)){
            Support_Leg_Pid = Beam_Part_Pid;
            descr = Pid_To_Description(Support_Leg_Pid);
            W_SET_PANELITEM_ARGS(Support_Leg, W_PANEL_VALUE, descr);
            SET_STRING_DEFAULT("CableTraySupport_Bend", "Support_Leg", Support_Leg_Pid);
        }
        else{
            U_MESSAGE("选择支撑脚材料");
            selectmask = DM_INIT_TAGREC();
            DM_SET_TAGVAL(selectmask, "KW", "BEAM L");
            loop_flag = 1;
            while(loop_flag){
                part_id = DM_BROWSE_PARTCODE("", 1, selectmask);
                if(ISSTRING(part_id)){
                    loop_flag = 0;
                    Support_Leg_Pid = part_id;
                    descr = Pid_To_Description(part_id);
                    W_SET_PANELITEM_ARGS(Support_Leg, W_PANEL_VALUE, descr);
                    SET_STRING_DEFAULT("CableTraySupport_Bend", "Support_Leg", part_id);
                    part_code = STRINGTERM(part_id,"-");
                    AngleBar_Part_Code = part_code;
                }
            }
            DM_FREE_TAGREC(selectmask);
        }
	}

   /*set default material of support pad*/
	part_id = "";
	st = GET_STRING_DEFAULT("CableTraySupport_Bend", "Support_Pad", part_id);
	if(st == 0){
		descr = Pid_To_Description(part_id);
		Support_Pad_Pid = part_id;
		W_SET_PANELITEM_ARGS(Support_Pad, W_PANEL_VALUE, descr);
        part_code = STRINGTERM(part_id,"-");
        gt = DM_PARTID_DATA(part_id,"GT");
        if(gt == "3"){
            Plate_Part_Code = part_code;
        }
        else{
            Pad_Part_Code = part_code;
            W_SET_PANELITEM_ARGS(Support_Pad_Type,W_PANEL_ORDINALVALUE,3);
            W_SET_PANELITEM_ARGS(Select_Support_Pad,W_PANEL_BUTTONIMAGE,"选择垫板",W_PANEL_WIDTH, 10);
        }
	}
    else{
        if(Is_Part_Exited(Plate_Part_Pid)){
            Support_Pad_Pid = Plate_Part_Pid;
            descr = Pid_To_Description(Support_Pad_Pid);
            W_SET_PANELITEM_ARGS(Support_Pad, W_PANEL_VALUE, descr);
            SET_STRING_DEFAULT("CableTraySupport_Bend", "Support_Pad", Support_Pad_Pid);
        }
        else{
            U_MESSAGE("选择垫板材料");
            selectmask = DM_INIT_TAGREC();
            DM_SET_TAGVAL(selectmask, "KW", "PLATE");
            loop_flag = 1;
            while(loop_flag){
                part_id = DM_BROWSE_PARTCODE("", 1, selectmask);
                if(ISSTRING(part_id)){
                    loop_flag = 0;
                    Support_Pad_Pid = part_id;
                    descr = Pid_To_Description(part_id);
                    W_SET_PANELITEM_ARGS(Support_Pad, W_PANEL_VALUE, descr);
                    SET_STRING_DEFAULT("CableTraySupport_Bend", "Support_Pad", part_id);
                    part_code = STRINGTERM(part_id,"-");
                    gt = DM_PARTID_DATA(part_id,"GT");
                    if(gt == "3"){
                        Plate_Part_Code = part_code;
                    }
                    else{
                        Pad_Part_Code = part_code;
                        W_SET_PANELITEM_ARGS(Support_Pad_Type,W_PANEL_ORDINALVALUE,3);
                        W_SET_PANELITEM_ARGS(Select_Support_Pad,W_PANEL_BUTTONIMAGE,"选择垫板",W_PANEL_WIDTH, 10);
                    }
                }
            }
            DM_FREE_TAGREC(selectmask);
        }
	}

	/*set pad type default value*/
	pad_type = "";
	st = GET_STRING_DEFAULT("CableTraySupport_Bend", "Support_Pad_Type", pad_type);
	if(st == 0){
        Pad_Type = pad_type;
        if(pad_type == "R"){
            W_SET_PANELITEM_ARGS(Support_Pad_Type, W_PANEL_ORDINALVALUE, 0);
        }
        else if(pad_type == "C"){
            W_SET_PANELITEM_ARGS(Support_Pad_Type, W_PANEL_ORDINALVALUE, 1);
        }
        else if(pad_type == "T"){
            W_SET_PANELITEM_ARGS(Support_Pad_Type, W_PANEL_ORDINALVALUE, 2);
        }
        else if(pad_type == "S"){
            W_SET_PANELITEM_ARGS(Support_Pad_Type, W_PANEL_ORDINALVALUE, 3);
        }
	}

	/*load default value of pad clearance*/
	size = 0.0;
	st = GET_INT_DEFAULT("CableTraySupport_Bend", "Pad_Clearance", size);
	if(st == 0){
		W_SET_NUMERIC_VALUE(Pad_Clearance, size);
		Pad_Gap = size;
	}
	else if (st != 0){
		W_SET_NUMERIC_VALUE(Pad_Clearance, Pad_Gap);
		SET_INT_DEFAULT("CableTraySupport_Bend","Pad_Clearance",Pad_Gap);
	}

	/*load default value of pad clearance*/
	size = 0.0;
	st = GET_INT_DEFAULT("CableTraySupport_Bend", "Pad_Radius", size);
	if(st == 0){
		W_SET_NUMERIC_VALUE(Pad_Radius, size);
		Pad_Corner_Radius = size;
	}
	else if (st != 0){
		W_SET_NUMERIC_VALUE(Pad_Radius, Pad_Corner_Radius);
		SET_INT_DEFAULT("CableTraySupport_Bend","Pad_Radius",Pad_Corner_Radius);
	}

	/*set cable tray align position default value*/
	align = "";
	st = GET_STRING_DEFAULT("CableTraySupport_Bend","Align_Position",align);
	if(st == 0){
        Align_Position = align;
        if(align == "B"){
            W_SET_PANELITEM_ARGS(Support_Align_Option, W_PANEL_ORDINALVALUE, 0);
        }
        else if(align == "M"){
            W_SET_PANELITEM_ARGS(Support_Align_Option, W_PANEL_ORDINALVALUE, 1);
        }
        else if(align == "T"){
            W_SET_PANELITEM_ARGS(Support_Align_Option, W_PANEL_ORDINALVALUE, 2);
        }
	}

	/*set cable tray support planning unit default value*/
	planning_unit = "";
	st = GET_STRING_DEFAULT("CableTraySupport_Bend","Planning_Unit",planning_unit);
	if(st == 0){
        W_SET_PANELITEM_ARGS(Planning_Unit,W_PANEL_VALUE,planning_unit);
	}

	/*set cable tray support description default value*/
	description = "";
	st = GET_STRING_DEFAULT("CableTraySupport_Bend","Support_Description",description);
	if(st == 0){
        W_SET_PANELITEM_ARGS(Support_Description,W_PANEL_VALUE,description);
	}

	/*set initial value of leg height*/
	W_SET_NUMERIC_VALUE(Support_Leg1_L, 0);
    W_SET_NUMERIC_VALUE(Support_Leg1_R, 0);
	W_SET_NUMERIC_VALUE(Support_Leg2_L, 0);
    W_SET_NUMERIC_VALUE(Support_Leg2_R, 0);
    W_SET_NUMERIC_VALUE(Support_Leg3_L, 0);
    W_SET_NUMERIC_VALUE(Support_Leg3_R, 0);
    W_SET_NUMERIC_VALUE(Support_Interval1, 15);
    W_SET_NUMERIC_VALUE(Support_Interval2, 30);
    W_SET_NUMERIC_VALUE(Support_Interval3, 30);
	return(0);
}

initialize()
{
   Legs = alloc_2darray(6,15);
   Leg_Position = alloc_2darray(6,3);
   Leg_Direction = alloc_2darray(6,3);
   Pads = alloc_2darray(6,9);
   Intervals = A_ALLOC(3);
   A_PUT(Intervals,0,15);
   A_PUT(Intervals,1,30);
   A_PUT(Intervals,2,30);
   Leg_Heights = A_ALLOC(6);
   /* 电缆托架（平面弯头）的数据项如下：
   ** 0,1,2 - 连接点坐标
   ** 3,4,5 - 连接点方向
   ** 6     - 宽度
   ** 7     - 高度 
   ** 8     - 长度
   ** 9     - 转角 
   */
   Cable_Tray_Data = alloc_2darray(6,10);
   Modify_flag = 0;
   support_name = auto_naming();
   W_SET_PANELITEM_ARGS(Support_Name, W_PANEL_VALUE, support_name);
   W_SET_PANELITEM_ARGS(Move_Legs, W_PANEL_SENSITIVITY,0);
   return(0);
}

auto_naming()
{
    pre = "CTS";
    index_number = "000";
    for(i=1;i<1000;i=i+1;){
        support_name = pre + "-" + HEAD(index_number,STRLEN(index_number) - STRLEN(ITOASCII(i))) + ITOASCII(i);
        find = PM_FIND_BY_NAME(support_name);
        if(ISINT(find)){
            return(support_name);
        }
    }
    return("Undefined"); 
}

main(support_name)
{
    if(!license()){
        return(0);
    }
	mainform  = create_top_frame();
	Panel_1 = create_template_panel(mainform);
	Panel_2 = create_info_panel(mainform);
	Panel_3 = create_material_panel(mainform);
	Panel_4 = create_command_panel(mainform);
	Panel_5 = create_parameter_panel(mainform);
	initialize();
	load_default_setting();

	if(support_name != ""){
        load_support_data(support_name);
        W_SET_PANELITEM_ARGS(Create_Support, W_PANEL_SENSITIVITY,0);
        W_SET_PANELITEM_ARGS(Move_Legs, W_PANEL_SENSITIVITY,1);
        Modify_flag = 1;
	}

	MainWindow = mainform;
	W_MAP_FRAME(mainform);
	W_RUN_FRAME(mainform);
	W_UNMAP_FRAME(mainform);
	W_DESTROY_FRAME(mainform);
}

license()
{
    if(!check_license()){
        U_CONFIRM("请使用正版软件！");
        return(0);
    }
    
    if(!check_date()){
        U_CONFIRM("软件已过有效期！");
        return(0);        
    }    
    return(1);
}

check_license()
{
    return(1);
}

check_date()
{
    year = 2019;
    month = 12;
    date = 31;
    
    current_time = GET_TIME();  
    current = CNV_DATE(current_time,7);
    int current_year;
    current_year = SCAN_QUANT(3,STRINGTERM(current,"-"));
    current = SUBSTRING(SEARCH(current,"-"),1);
    int current_month;
    current_month = SCAN_QUANT(3,STRINGTERM(current,"-"));
    int current_date;
    current_date = SCAN_QUANT(3,SUBSTRING(SEARCH(current,"-"),1));
    if(current_year > year){       
        return(0);
    }
    else if(current_month > month){
        return(0);
    }
    else if(current_date > date){
        return(0);
    }
    return(1);
}

/*
**设置指定模型对象属性的值
*/
Set_Attribute_Value(handle object_handle, string tag, value)
{
   /*根据属性TAG获取属性的handle*/
	attr_h = PM_FIND_ATTRIBUTE(tag);
	if (attr_h == 0) {
		message = "属性<" + tag + ">未定义";
		U_MESSAGE(message);
		return(-1);
	}

	/*获取属性的值类型*/
	type = PM_GET_ATTR_INFO(attr_h,"type");

	/*检查模型是否已经CHECKOUT*/
	set_handle = PM_INIT_SET();
	PM_ADD_OBJECT_TO_SET(object_handle,set_handle);
	res = PM_CHECK_OUT(set_handle,0);
	if(res<0){
	   U_MESSAGE("你没有写权限");
	   return(-1);
	}

   /*根据属性的值类型进行赋值*/
	if(type == 2){
	   if(ISINT(value)){
	      attr_value = ITOASCII(value);
	   }
	   else if(ISFLOAT(value)){
	      attr_value = FTOASCII(value);
	   }
	   else{
	      attr_value = value;
	   }
	   st = PM_ASSIGN_ATTRIBUTE(attr_h, object_handle, 0, attr_value);
	   if(st<0){
	      PM_DEASSIGN_ATTRIBUTE(attr_h, object_handle, 0);
	      st = PM_ASSIGN_ATTRIBUTE(attr_h, object_handle, 0, attr_value);
	   }
	}
	else{
	   float_value = 0.0;
	   if(ISFLOAT(value)){
	      float_value = value;
	   }
	   else if(ISINT(value)){
	      float_value = value;
	   }
	   else{
	      float_value = String_To_Float(value);
	   }
	   st = PM_ASSIGN_ATTRIBUTE(attr_h, object_handle, 0, float_value);
	   if(st<0){
	      PM_DEASSIGN_ATTRIBUTE(attr_h, object_handle, 0);
	      st = PM_ASSIGN_ATTRIBUTE(attr_h, object_handle, 0, float_value);
		   if (st < 0){
		      int_value = 0;
      	   if(ISFLOAT(value)){
      	      int_value = String_To_Int(FTOASCII(value));
      	   }
      	   else if(ISINT(value)){
      	      int_value = value;
      	   }
      	   else{
      	      int_value = String_To_Int(value);
      	   }
		      st = PM_ASSIGN_ATTRIBUTE(attr_h, object_handle, 0, int_value);
		      if (st < 0){
		         PM_DEASSIGN_ATTRIBUTE(attr_h, object_handle, 0);
		         st = PM_ASSIGN_ATTRIBUTE(attr_h, object_handle, 0, int_value);
		         if (st < 0){
			         PM_FREE_SET(set_handle);
			         return(-1);
		         }
		      }
			}
	   }
	}
	PM_FREE_SET(set_handle);
	return(0);
}

/*
**获取指定模型对象属性的值
*/
Get_Attribute_Value(handle ModelObject, Tag_Name)
{
	Att_Value = PM_GET_OBJDATA(ModelObject, 0, Tag_Name);
	if(ISSTRING(Att_Value)){
		return(Att_Value);
	}
	else{
		return(-1);
	}
}

/* 由零件的ID号获取零件的描述及尺寸描述 */
Pid_To_Description(string part_id)
{
	description = DM_PARTID_DATA(part_id, "DE");
	dimensions  = DM_PARTID_DATA(part_id, "DD");
	return(description + " " + dimensions);
}

String_To_Int(string int_string)
{
   int value;
   value = 0;
   value = SCAN_QUANT(3,int_string);
   return(value);
}

String_To_Float(string float_string)
{
   value = 0.0;
   value = SCAN_QUANT(3,float_string);
   return(value);
}

Get_Beam_Para(part_handle,x1,y1,z1,x2,y2,z2,x_dx,x_dy,x_dz,end1x,end1y,end1z,end2x,end2y,end2z)
{
	x1 = String_To_Float(PM_GET_OBJDATA(part_handle,0,MMT_TAG_ORIG_X));
	y1 = String_To_Float(PM_GET_OBJDATA(part_handle,0,MMT_TAG_ORIG_Y));
	z1 = String_To_Float(PM_GET_OBJDATA(part_handle,0,MMT_TAG_ORIG_Z));
	length = String_To_Float(PM_GET_OBJDATA(part_handle,0,MMT_TAG_AXIS_LEN));
	axis_rotate = String_To_Float(PM_GET_OBJDATA(part_handle,0,MMT_TAG_AXIS_ROT_ANGLE)); 
	axis_slope = String_To_Float(PM_GET_OBJDATA(part_handle,0,MMT_TAG_AXIS_SLP_ANGLE));
	dx = COS(axis_slope)*COS(axis_rotate);
	dy = COS(axis_slope)*SIN(axis_rotate);
	dz = SIN(axis_slope);
	x2 = x1 + length * dx;
	y2 = y1 + length * dy;
	z2 = z1 + length * dz;
	x_rotate = String_To_Float(PM_GET_OBJDATA(part_handle,0,MMT_TAG_SAXIS_ROT_ANGLE));
	x_slope = String_To_Float(PM_GET_OBJDATA(part_handle,0,MMT_TAG_SAXIS_SLP_ANGLE));
	x_dx = COS(x_slope)*COS(x_rotate);
	x_dy = COS(x_slope)*SIN(x_rotate);
	x_dz = SIN(x_slope);	
	dx = x1-x2;
	dy = y1-y2;
	dz = z1-z2;
	VEC_UNITV(dx,dy,dz);
	end1x = dx;
	end1y = dy;
	end1z = dz; 
	end2x = -dx;
	end2y = -dy;
	end2z = -dz;
	
	nr1s = PM_GET_OBJDATA(part_handle,0,"n1r");
	if(ISSTRING(nr1s)){
	    rotate1 = String_To_Float(nr1s);
	    slope1 = String_To_Float(PM_GET_OBJDATA(part_handle,0,"n1s"));
	    end1x = COS(slope1)*COS(rotate1);
	    end1y = COS(slope1)*SIN(rotate1);
	    end1z = SIN(slope1);
	}

	nr2s = PM_GET_OBJDATA(part_handle,0,"n2r");
	if(ISSTRING(nr2s)){
	    rotate2 = String_To_Float(nr2s);
	    slope2 = String_To_Float(PM_GET_OBJDATA(part_handle,0,"n2s"));
	    end2x = COS(slope2)*COS(rotate2);
	    end2y = COS(slope2)*SIN(rotate2);
	    end2z = SIN(slope2);
	}			 
	return(0);  
}

Get_Plate_Para(part_handle,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz)
{
	lox = String_To_Float(PM_GET_OBJDATA(part_handle,0,MMT_TAG_ORIG_X));
	loy = String_To_Float(PM_GET_OBJDATA(part_handle,0,MMT_TAG_ORIG_Y));
	loz = String_To_Float(PM_GET_OBJDATA(part_handle,0,MMT_TAG_ORIG_Z));   
	axis_rotate = String_To_Float(PM_GET_OBJDATA(part_handle,0,MMT_TAG_AXIS_ROT_ANGLE)); 
	axis_slope = String_To_Float(PM_GET_OBJDATA(part_handle,0,MMT_TAG_AXIS_SLP_ANGLE));
	udx = COS(axis_slope)*COS(axis_rotate);
	udy = COS(axis_slope)*SIN(axis_rotate);
	udz = SIN(axis_slope);
	saxis_rotate = String_To_Float(PM_GET_OBJDATA(part_handle,0,MMT_TAG_SAXIS_ROT_ANGLE));
	saxis_slope = String_To_Float(PM_GET_OBJDATA(part_handle,0,MMT_TAG_SAXIS_SLP_ANGLE));
	vdx = COS(saxis_slope)*COS(saxis_rotate);
	vdy = COS(saxis_slope)*SIN(saxis_rotate);
	vdz = SIN(saxis_slope);	
    return(0);
}

Search_First_Model(x1,y1,z1,x2,y2,z2,type)
{
	models = PM_OBJECTS_IN_BOX(1,x1,y1,z1,x2,y2,z2);
	model_number = PM_NR_MEMBERS_IN_SET(models);
	if(model_number<=0){
		return(-1);
	}
	for(i=0;i<model_number;i=i+1;){
		model = PM_GET_MEMBER_IN_SET(models,i);
		model_type = PM_GET_OBJDATA(model,0,MMT_TAG_OBJTYPE);
		if(model_type == type){
			return(model);
		}
	}
	return(0);
}

Pick_Cable_Tray(type)
{
    /*select cable tray*/
    pick_loop = 1;
    while(pick_loop){
        nth_part = 0;
        if(type == MMT_CABLETRP_TYPE_STANDARD){
            prompt = "请选择电缆托架三通";
        }
        else if(type == MMT_CABLETRP_TYPE_STRAIGHT){
            prompt = "请选择电缆托架直段";
        }
        else if(type == MMT_CABLETRP_TYPE_BEND){
            prompt = "请选择电缆托架水平弯头";
        }
        else if(type == MMT_CABLETRP_TYPE_BEND_UP){
            prompt = "请选择电缆托架向上弯头";
        }
        else if(type == MMT_CABLETRP_TYPE_BEND_DOWN){
            prompt = "请选择电缆托架向下弯头";
        }
        else if(type == MMT_CABLETRP_TYPE_NETWORKSEGMENT){
            prompt = "请选择电缆通道";
        }
        else if(type == MMT_CABLETRP_TYPE_NETWORKNODE){
            prompt = "请选择电缆节点";
        }
        else{
            prompt = "请选择电缆托架零件";
        }
        tray = PM_PICK_OBJECT(prompt,nth_part,"CABLETRAY");
        if(!ISINT(tray)){
            selected_type = PM_GET_OBJDATA(tray,nth_part,MMT_TAG_CABLETRP_TYPE);
            if(selected_type == type | selected_type == MMT_CABLETRP_TYPE_STANDARD){
                pick_loop = 0;                 
            }
            else{               
                U_CONFIRM("请选择正确的类型");
			}
		}
		else{
		    return(0);
		}
	}
	return(tray);
}

Pick_Hull_Panel(string prompt)
{
    flag = 1;
    while(flag){
        tmp = 0;
        picked_hull_handle = PM_PICK_OBJECT(prompt, tmp, "EQUIPMENT");
        if(!ISINT(picked_hull_handle)){
            if(Is_Hull_Part(picked_hull_handle)){
                /*set flag for skip looping*/
                flag = 0;
            }
        }
        else{
            return(0);
        }
    }
    return(picked_hull_handle);
}

Project_Point_To_Line(handle point_set, float distance)
{
	ax1 = 0.0;	ay1 = 0.0;	az1 = 0.0;
	ax2 = 0.0;	ay2 = 0.0;	az2 = 0.0;
	bx = 0.0;	by = 0.0;	bz = 0.0;
	
	PM_GET_PNT(point_set, 0, ax1, ay1, az1);
	PM_GET_PNT(point_set, 1, ax2, ay2, az2);
	PM_GET_PNT(point_set, 2, bx, by, bz);
	
	/* Direction of line A */
	adx = ax2 - ax1;
	ady = ay2 - ay1;
	adz = az2 - az1;
	len1 = VEC_UNITV(adx, ady, adz);
	if(len1 < 0.1)
		return(-1);
	
	/* Transform line A point 1 to origin & along X-direction */
	orig_tm = PM_CREATE_TMAT(3, ax1, ay1, az1, adx, ady, adz, 0, 0, 0);
	inv_tm 	= PM_INVERSE_TMAT(orig_tm);
	
	TRF_POINT(inv_tm, bx, by, bz);
	
	dx = 0.0;
	dy = by;
	dz = bz;
	distance = VEC_UNITV(dx, dy, dz);
	
	/* Transform to original coordinate system */
	x = bx;		y = 0.0;	z = 0.0;
	TRF_POINT(orig_tm, x, y, z);
	PM_SET_PNT(point_set, 3, x, y, z);
	
	return(0);
}

/*Parameter    type     description 
--plane_dx     float    vector value of plane
--plane_dy     float    vector value of plane
--plane_dz     float    vector value of plane
--plane_x      float    x coordinate value of plane
--plane_y      float    y coordinate value of plane
--plane_z      float    z coordinate value of plane   
--line_dx      float    vector value of line      
--line_dy      float    vector value of line      
--line_dz      float    vector value of line      
--line_x       float    x coordinate value of line
--line_y       float    y coordinate value of line
--line_z       float    z coordinate value of line
--x,y,z        float    intersection point coordinate
*/ 
PlaneLineIntersectPoint(plane_dx,plane_dy,plane_dz,plane_x,plane_y,plane_z,line_dx,line_dy,line_dz,line_x,line_y,line_z,x,y,z)  
{ 
    vp1 = plane_dx;  
    vp2 = plane_dy;  
    vp3 = plane_dz;  
    n1 = plane_x;  
    n2 = plane_y;  
    n3 = plane_z;  
    v1 = line_dx;  
    v2 = line_dy;  
    v3 = line_dz;  
    m1 = line_x;  
    m2 = line_y;  
    m3 = line_z;  
    vpt = v1 * vp1 + v2 * vp2 + v3 * vp3;  
    /*首先判断直线是否与平面平行*/  
    if (vpt == 0)  {  
       return(-1);  
    }   
    t = ((n1 - m1) * vp1 + (n2 - m2) * vp2 + (n3 - m3) * vp3) / vpt;  
    x = m1 + v1 * t;  
    y = m2 + v2 * t;  
    z = m3 + v3 * t;  
    return(0);  
}  

/*Parameter    type     description 
--x            float    x coordinate value of point
--y            float    y coordinate value of point
--z            float    z coordinate value of point   
--dx           float    vector value of move direction      
--dy           float    vector value of move direction      
--dz           float    vector value of move direction      
--distance     float    move distance
*/  

Point_3D_Move_With_DirAndDis(float x,float y,float z,float dx, float dy, float dz, float distance)
{
    x = x + dx*distance;
    y = y + dy*distance;
    z = z + dz*distance;
    return(0);
}

/* 检查零件是否为等边角钢 */
Is_Equal_Angle_Bar(string pid)
{
    if(!ISSTRING(pid))
        return(FALSE);

	shape = DM_PARTID_DATA(pid, "SH");
	if(shape == 61)
        return(TRUE);
	else if(shape == 62){
		len1 = DM_PARTID_DATA(pid, "D31");
		len2 = DM_PARTID_DATA(pid, "D32");
		if(len1 == len2)
            return(TRUE);
		else {
            beam_descr = Pid_To_Description(pid);
			msg = "<" + beam_descr + "> 不是等边角钢!";
			U_MESSAGEBOX(msg, U_MB_ERROR, U_MB_OK, U_OK);
			return(FALSE);
		}
	}
	else {
        beam_descr = Pid_To_Description(pid);
		msg = "<" + beam_descr + "> 不是等边角钢!";
		U_MESSAGEBOX(msg, U_MB_ERROR, U_MB_OK, U_OK);
		return(FALSE);
	}
	return(FALSE);
}

Pid_To_Description1(string part_id)
{
	description = DM_PARTID_DATA(part_id, "DD");
	return(description);
}

/*
创建一个指定类型及名称的模型组
如果成功，则返回模型组的句柄
如果失败，在消息窗口提示相关信息并返回0
*/
Create_Group(string group_type, string group_name)
{
	rec = DM_INIT_TAGREC();
	DM_SET_TAGVAL(rec, MMT_TAG_GROUPTYPE, group_type);
	DM_SET_TAGVAL(rec, MMT_TAG_OBJNAME, group_name);

	inv_tag = "";
	obj = PM_CREATE_OBJECT("GROUP", rec, inv_tag);

	DM_FREE_TAGREC(rec);

	if (!ISINT(obj)){
		return(obj);

	}

	U_MESSAGE("Failed to create group.");
	U_MESSAGE("Error : " + DM_GET_ERRMSG(obj));
	if(inv_tag != ""){
		U_MESSAGE("Bad value in : " + inv_tag);
	}

	return(0);
}

Get_Panel_Data(hull,x,y,z,dx,dy,dz,t)
{
    find_node = 0;
    node_number = 1;
    while(!find_node){
        check = PM_GET_CONPNT_DATA(hull,node_number,"x");
        if(ISSTRING(check)){
            find_node = 1;
        }
        else{
            node_number = node_number + 1;
            if(node_number > Max_Panel_Node_Number){
                return(-1);
            }
        }
    } 
    /*node point position*/
    x = String_To_Float(PM_GET_CONPNT_DATA(hull,node_number,"x"));
    y = String_To_Float(PM_GET_CONPNT_DATA(hull,node_number,"y"));
    z = String_To_Float(PM_GET_CONPNT_DATA(hull,node_number,"z"));
    /*normal direction of panel*/
    fnr = PM_GET_CONPNT_DATA(hull,node_number,"fnr");
    fns = PM_GET_CONPNT_DATA(hull,node_number,"fns");
    rotation_angle = String_To_Float(fnr);
    slope_angle = String_To_Float(fns);
    dx = COS(slope_angle)*COS(rotation_angle);
    dy = COS(slope_angle)*SIN(rotation_angle);
    dz = SIN(slope_angle);
    VEC_UNITV(dx,dy,dz);
    /*get thickness of panel*/
    ts = PM_GET_OBJDATA(hull,0,NCH_Thickness);
    if(ISSTRING(ts)){
        t = String_To_Float(ts);
    }
    return(0);
}

Create_Rectangular_Curve(float length,float width,float radius)
{
    curve = "";
    if(radius == 0){
        p1x = length/2;
        p1y = width/2;
        p2x = p1x;
        p2y = - p1y;
        p3x = - p1x;
        p3y = - p1y;
        p4x = - p1x;
        p4y = p1y;
        
        p1xs = STRINGTERM(FTOASCII(p1x),".")+",";
        p1ys = STRINGTERM(FTOASCII(p1y),".")+",";
        p2xs = STRINGTERM(FTOASCII(p2x),".")+",";
        p2ys = STRINGTERM(FTOASCII(p2y),".")+",";
        p3xs = STRINGTERM(FTOASCII(p3x),".")+",";
        p3ys = STRINGTERM(FTOASCII(p3y),".")+",";
        p4xs = STRINGTERM(FTOASCII(p4x),".")+",";
        p4ys = STRINGTERM(FTOASCII(p4y),".");
        curve = curve+p1xs+p1ys+p2xs+p2ys+p3xs+p3ys+p4xs+p4ys;
    }
    else{
        p1x = -length/2;
        p1y = width/2-radius;
        p2x = p1x;
        p2y = - p1y;
        p3x = p1x - radius*SIN(45) + radius;
        p3y = p2y - radius*COS(45);
        p4x = -length/2 + radius;
        p4y = -width/2;
        p5x = -p4x;
        p5y = p4y;
        p6x = - p3x;
        p6y = p3y;
        p7x = - p2x;
        p7y = p2y;
        p8x = p7x;
        p8y = - p7y;
        p9x = p6x;
        p9y = -p6y;
        p10x = p5x;
        p10y = -p5y;
        p11x = p4x;
        p11y = -p4y;
        p12x = p3x;
        p12y = -p3y;

        p1xs = STRINGTERM(FTOASCII(p1x),".")+",";
        p1ys = STRINGTERM(FTOASCII(p1y),".")+",";
        p2xs = STRINGTERM(FTOASCII(p2x),".")+",";
        p2ys = STRINGTERM(FTOASCII(p2y),".")+",";
        p3xs = STRINGTERM(FTOASCII(p3x),".")+",";
        p3ys = STRINGTERM(FTOASCII(p3y),".")+",";
        p4xs = STRINGTERM(FTOASCII(p4x),".")+",";
        p4ys = STRINGTERM(FTOASCII(p4y),".")+",";
        p5xs = STRINGTERM(FTOASCII(p5x),".")+",";
        p5ys = STRINGTERM(FTOASCII(p5y),".")+",";
        p6xs = STRINGTERM(FTOASCII(p6x),".")+",";
        p6ys = STRINGTERM(FTOASCII(p6y),".")+",";
        p7xs = STRINGTERM(FTOASCII(p7x),".")+",";
        p7ys = STRINGTERM(FTOASCII(p7y),".")+",";
        p8xs = STRINGTERM(FTOASCII(p8x),".")+",";
        p8ys = STRINGTERM(FTOASCII(p8y),".")+",";
        p9xs = STRINGTERM(FTOASCII(p9x),".")+",";
        p9ys = STRINGTERM(FTOASCII(p9y),".")+",";
        p10xs = STRINGTERM(FTOASCII(p10x),".")+",";
        p10ys = STRINGTERM(FTOASCII(p10y),".")+",";
        p11xs = STRINGTERM(FTOASCII(p11x),".")+",";
        p11ys = STRINGTERM(FTOASCII(p11y),".")+",";
        p12xs = STRINGTERM(FTOASCII(p12x),".")+",";
        p12ys = STRINGTERM(FTOASCII(p12y),".")+",";
        p1ys0 = STRINGTERM(FTOASCII(p1y),".");
        curve = curve+p1xs+p1ys+p2xs+p2ys+"ARP,"+p3xs+p3ys+p4xs+p4ys+p5xs+p5ys+"ARP,"+p6xs+p6ys+p7xs+p7ys+p8xs+p8ys+"ARP,"+p9xs+p9ys+p10xs+p10ys+p11xs+p11ys+"ARP,"+p12xs+p12ys+p1xs+p1ys0;
    }
	return(curve);
}

/*
变量说明：
part_id           -- 型材的零件id
sys_id            -- 型材所属系统的id
x1,y1,z1          -- 型材起始点坐标
x2,y2,z2          -- 型材结束点坐标
x_dx,x_dy,x_dz    -- 型材截面X坐标轴的方向
e1_dx,e1_dy,e1_dz -- 型材起始点切面的法线方向
e2_dx,e2_dy,e2_dz -- 型材结束点切面的法线方向
tmat_h            -- 型材位置及方向的变换矩阵
*/
Create_Beam(string part_id, int sys_id, float x1, float y1, float z1, float x2, float y2, float z2, float x_dx, float x_dy, float x_dz,float e1_dx, float e1_dy, float e1_dz, float e2_dx, float e2_dy, float e2_dz, handle tmat_h)
{
	/* 将传递过来的参数值拷贝到本地变量，这样就不会改变传递过来的变量的值 */
	
	x1t = x1;		y1t = y1;		z1t = z1;
	x2t = x2;		y2t = y2;		z2t = z2;
	xt_dx = x_dx;	xt_dy = x_dy;	xt_dz = x_dz;
	e1t_dx = e1_dx;	e1t_dy = e1_dy;	e1t_dz = e1_dz;
	e2t_dx = e2_dx;	e2t_dy = e2_dy;	e2t_dz = e2_dz;
	
	/* 转换点和方向 */
	TRF_POINT(tmat_h, x1t, y1t, z1t);
	TRF_POINT(tmat_h, x2t, y2t, z2t);
	TRF_DIR(tmat_h, xt_dx, xt_dy, xt_dz);
	TRF_DIR(tmat_h, e1t_dx, e1t_dy, e1t_dz);
	TRF_DIR(tmat_h, e2t_dx, e2t_dy, e2t_dz);
	VEC_UNITV(xt_dx, xt_dy, xt_dz);
	VEC_UNITV(e1t_dx, e1t_dy, e1t_dz);
	VEC_UNITV(e2t_dx, e2t_dy, e2t_dz);
	
	rec = DM_INIT_TAGREC();
	
	DM_SET_TAGVAL(rec, MMT_TAG_SYSTEM_ID, ITOASCII(sys_id));
	DM_SET_TAGVAL(rec, MMT_TAG_PARTID, part_id);
	Point_To_Rec(MMT_TAG_1st_ENDPOINT, x1t, y1t, z1t, rec);
	Point_To_Rec(MMT_TAG_2nd_ENDPOINT, x2t, y2t, z2t, rec);
	Dir_To_Rec(MMT_TAG_LOCAL_XDIR,  xt_dx, xt_dy, xt_dz, rec);
	Dir_To_Rec(MMT_TAG_1st_ENDNORMAL, e1t_dx, e1t_dy, e1t_dz, rec);
	Dir_To_Rec(MMT_TAG_2nd_ENDNORMAL, e2t_dx, e2t_dy, e2t_dz, rec);
	
	inv_tag = "";
	obj = PM_CREATE_OBJECT("BEAM", rec, inv_tag);
	
	DM_FREE_TAGREC(rec);
	if(!ISINT(obj)){
		return(obj);
	}

	U_MESSAGE("生成型材失败");
	U_MESSAGE("错误信息: " + DM_GET_ERRMSG(obj));
	if(inv_tag != "")
		U_MESSAGE("Bad value in : " + inv_tag);
		
	return(0);
}

/*
变量说明：
part_id           -- 板材的零件id
sys_id            -- 板材所属系统的id
curve             -- 板材截面各个顶点坐标描述字符串
tmat_h            -- 板材位置及方向的变换矩阵
holes_array       -- 板材上的开孔信息
*/
Create_Plate(string part_id, int sys_id, string curve, handle tmat_h, handle holes_array)
{
	/* Copy values, because we must not change original values */
	xt = 0;	   yt = 0;		zt = 0;
	xt_dx = 1;	xt_dy = 0;	xt_dz = 0;
	yt_dx = 0;	yt_dy = 1;	yt_dz = 0;
	
	/* Transform point and directions */
	TRF_POINT(tmat_h, xt, yt, zt);
	TRF_DIR(tmat_h, xt_dx, xt_dy, xt_dz);
	TRF_DIR(tmat_h, yt_dx, yt_dy, yt_dz);
	
	rec = DM_INIT_TAGREC();
	
	DM_SET_TAGVAL(rec, MMT_TAG_SYSTEM_ID, ITOASCII(sys_id));
	DM_SET_TAGVAL(rec, MMT_TAG_PARTID, part_id);
	Point_To_Rec(MMT_TAG_ORIGIN, xt, yt, zt, rec);
	Dir_To_Rec(MMT_TAG_LOCAL_XDIR, xt_dx, xt_dy, xt_dz, rec);
	Dir_To_Rec(MMT_TAG_LOCAL_YDIR, yt_dx, yt_dy, yt_dz, rec);
	
	p1 = "_UseDegrees = 1\; \norig = POINT(0,0,0)\; \ndir1 = DIRECTION(0,0,1)\; \ndir2 = DIRECTION(1,0,0)\; ";
	curve_beg = "\ncur = CURVE(";
	curve_end = ")\; ";
	
	hole_number = nrows_2darray(holes_array);
	gdl = "";
    if (hole_number <= 0){	
	    p2 = "\nsec = SECTION(cur)\; \nplt = PLATE(orig, dir1, dir2, sec, 20)\;";
	    gdl = p1 + curve_beg + curve + curve_end + p2;
	}
	else{
	    hole_list = "\n";
	    hole_pos = "";
	    for(i = 0;i<hole_number;i=i+1;){
	        hole_list = hole_list + get_2darray(holes_array,i,0)+"\n";
	        hole_pos = hole_pos + get_2darray(holes_array,i,1);	      
	    }
	    p2 = "\nsec = SECTION(cur";
	    p3 = ")\; \nplt = PLATE(orig, dir1, dir2, sec, 20)\;";
	    gdl = p1 + curve_beg + curve + curve_end + hole_list + p2 + hole_pos + p3;	   
	}		
	DM_SET_TAGVAL(rec, MMT_TAG_CMDLEMBGDL, gdl);
	
	inv_tag = "";
	obj = PM_INSERT_PLATE("STANDCMP", rec, inv_tag);
	
	DM_FREE_TAGREC(rec);
	
	if(!ISINT(obj)){
		return(obj);
	}

	U_MESSAGE("创建板材失败");
	U_MESSAGE("错误信息:" + DM_GET_ERRMSG(obj));
	if(inv_tag != "")
		U_MESSAGE("这个属性的值不正确: " + inv_tag);		
	return(0);
}

Create_Circle_Curve(float radius)
{
    radius_s = STRINGTERM(FTOASCII(radius),".");
	curve = "";
	curve = curve + radius_s + ",0,ARC,0,0,360";
	return(curve);
}

Create_Triangle_Curve(float width,float height, float t1,float t2, float gap,float radius)
{
    curve = "";
    if(radius == 0){
        p1x = -gap;
        p1y = -gap;
        p2x = width+((t1+gap)*(width-t2)+gap*SQRT((width-t2)*(width-t2)+(height-t1)*(height-t1)))/(height-t1);
        p2y = -gap;
        p3x = -gap;
        p3y = height+((t2+gap)*(height-t1)+gap*SQRT((width-t2)*(width-t2)+(height-t1)*(height-t1)))/(width-t2);
        
        p1xs = STRINGTERM(FTOASCII(p1x),".")+",";
        p1ys = STRINGTERM(FTOASCII(p1y),".")+",";
        p2xs = STRINGTERM(FTOASCII(p2x),".")+",";
        p2ys = STRINGTERM(FTOASCII(p2y),".")+",";
        p3xs = STRINGTERM(FTOASCII(p3x),".")+",";
        p3ys = STRINGTERM(FTOASCII(p3y),".");
        curve = curve+p1xs+p1ys+p2xs+p2ys+p3xs+p3ys;
    }
    else{
        p1x = -gap;
        p1y = -gap+radius;
        p2x = -gap+radius-radius*COS(45);
        p2y = -gap+radius-radius*COS(45);
        p3x = -gap + radius;
        p3y = -gap;
        angle = ATAN((width-t2)/(height-t1));
        p4x = width+((t1+gap)*(width-t2)+gap*SQRT((width-t2)*(width-t2)+(height-t1)*(height-t1)))/(height-t1);
        p4x = p4x-radius/(TAN(angle/2)) ;
        p4y = -gap;
        p5x = p4x+radius*COS(angle/2);
        p5y = -gap+radius-radius*SIN(angle/2);
        p6x = p4x+radius*COS(90-angle);
        p6y = p4y+radius+radius*SIN(90-angle);
        p9x = -gap;
        p9y = height+((t2+gap)*(height-t1)+gap*SQRT((width-t2)*(width-t2)+(height-t1)*(height-t1)))/(width-t2);
        angle1 = (90-angle)/2;
        p9y = p9y-radius/SIN(angle1);
        p8x = p9x+radius-radius*SIN(angle1);
        p8y = p9y+radius*COS(angle1);
        p7x = p9x+radius+radius*COS(90-angle);
        p7y = p9y+radius*SIN(90-angle);
        p1xs = STRINGTERM(FTOASCII(p1x),".")+",";
        p1ys = STRINGTERM(FTOASCII(p1y),".")+",";
        p2xs = STRINGTERM(FTOASCII(p2x),".")+",";
        p2ys = STRINGTERM(FTOASCII(p2y),".")+",";
        p3xs = STRINGTERM(FTOASCII(p3x),".")+",";
        p3ys = STRINGTERM(FTOASCII(p3y),".")+",";
        p4xs = STRINGTERM(FTOASCII(p4x),".")+",";
        p4ys = STRINGTERM(FTOASCII(p4y),".")+",";
        p5xs = STRINGTERM(FTOASCII(p5x),".")+",";
        p5ys = STRINGTERM(FTOASCII(p5y),".")+",";
        p6xs = STRINGTERM(FTOASCII(p6x),".")+",";
        p6ys = STRINGTERM(FTOASCII(p6y),".")+",";
        p7xs = STRINGTERM(FTOASCII(p7x),".")+",";
        p7ys = STRINGTERM(FTOASCII(p7y),".")+",";
        p8xs = STRINGTERM(FTOASCII(p8x),".")+",";
        p8ys = STRINGTERM(FTOASCII(p8y),".")+",";
        p9xs = STRINGTERM(FTOASCII(p9x),".")+",";
        p9ys = STRINGTERM(FTOASCII(p9y),".")+",";
        p1ys0 = STRINGTERM(FTOASCII(p1y),".");
   	    curve = curve+p1xs+p1ys+"ARP,"+p2xs+p2ys+p3xs+p3ys+p4xs+p4ys+"ARP,"+p5xs+p5ys+p6xs+p6ys+p7xs+p7ys+"ARP,"+p8xs+p8ys+p9xs+p9ys+p1xs+p1ys0;
    }
    width1 = width+((t1+gap)*(width-t2)+gap*SQRT((width-t2)*(width-t2)+(height-t1)*(height-t1)))/(height-t1) + gap;
    height = height+((t2+gap)*(height-t1)+gap*SQRT((width-t2)*(width-t2)+(height-t1)*(height-t1)))/(width-t2) + gap;
    width = width1;
    return(curve);
}

/*
变量说明：
part_id           -- 标准舾装件的零件id
sys_id            -- 标准舾装所属系统的id
x,y,z             -- 标准舾装本地坐标原点坐标
x_dx,x_dy,x_dz    -- 标准舾装本地坐标系X坐标轴的方向
y_dx,y_dy,y_dz    -- 标准舾装本地坐标系Y坐标轴的方向
tmat_h            -- 标准舾装位置及方向的变换矩阵
*/
Create_Standcomp(string part_id, int sys_id, float x, float y, float z, float x_dx, float x_dy, float x_dz, float y_dx, float y_dy, float y_dz, handle tmat_h)
{
	/* Copy values, because we must not change original values */
	xt = x;			yt = y;			zt = z;
	xt_dx = x_dx;	xt_dy = x_dy;	xt_dz = x_dz;
	yt_dx = y_dx;	yt_dy = y_dy;	yt_dz = y_dz;
	
	/* Transform point and directions */
	TRF_POINT(tmat_h, xt, yt, zt);
	TRF_DIR(tmat_h, xt_dx, xt_dy, xt_dz);
	TRF_DIR(tmat_h, yt_dx, yt_dy, yt_dz);
	
	rec = DM_INIT_TAGREC();
	
	DM_SET_TAGVAL(rec, MMT_TAG_SYSTEM_ID, ITOASCII(sys_id));
	DM_SET_TAGVAL(rec, MMT_TAG_PARTID, part_id);
	Point_To_Rec(MMT_TAG_ORIGIN, xt, yt, zt, rec);
	Dir_To_Rec(MMT_TAG_LOCAL_XDIR, xt_dx, xt_dy, xt_dz, rec);
	Dir_To_Rec(MMT_TAG_LOCAL_YDIR, yt_dx, yt_dy, yt_dz, rec);
	
	inv_tag = "";
	obj = PM_CREATE_OBJECT("STANDCMP", rec, inv_tag);
	
	DM_FREE_TAGREC(rec);
	
	if(!ISINT(obj)){
		return(obj);
	}

	U_MESSAGE("无法创建标准零件");
	U_MESSAGE("错误信息: " + DM_GET_ERRMSG(obj));
	if(inv_tag != "")
		U_MESSAGE("此属性的值有错误: " + inv_tag);
		
	return(0);
}

/*check the specified part id exist in library or not*/
Is_Part_Exited(string part_id)
{
	descr = DM_PARTID_DATA(part_id,"DE");
	if(descr == ""){
		return(0);
	}
	else{
		return(1);
	}
	return(0);
}

/*check if the passed model is hull structure*/
Is_Hull_Part(handle part_handle)
{
   check = PM_GET_OBJDATA(part_handle,0,".qL");
   if(check == "1"){
      return(1);
   }
   return(0);
}

Point_To_Rec(tag, x, y, z, rec)
{
	s = "";
	S_PRINTF(s, "%f %f %f", x, y, z);
	DM_SET_TAGVAL(rec, tag, s);
}

Dir_To_Rec(tag, dx, dy, dz, rec)
{
	s = "";
	S_PRINTF(s, "%f %f %f", dx, dy, dz);
	DM_SET_TAGVAL(rec, tag, s);
}

Put_Beam_Data_To_Arrary(array,index,x1,y1,z1,x2,y2,z2,x_dx,x_dy,x_dz,end1x,end1y,end1z,end2x,end2y,end2z) 
{
   	put_2darray(array,index,0,x1);
   	put_2darray(array,index,1,y1);
   	put_2darray(array,index,2,z1);
   	put_2darray(array,index,3,x2);
   	put_2darray(array,index,4,y2);
   	put_2darray(array,index,5,z2);
   	put_2darray(array,index,6,x_dx);
   	put_2darray(array,index,7,x_dy);
   	put_2darray(array,index,8,x_dz);
   	put_2darray(array,index,9,end1x);
   	put_2darray(array,index,10,end1y);
   	put_2darray(array,index,11,end1z);
   	put_2darray(array,index,12,end2x);
   	put_2darray(array,index,13,end2y);
   	put_2darray(array,index,14,end2z);
   	return(0);   
}

Put_Plate_Data_To_Array(array,index,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz)
{
    put_2darray(array,index,0,lox);
    put_2darray(array,index,1,loy);
    put_2darray(array,index,2,loz);
    put_2darray(array,index,3,udx);
    put_2darray(array,index,4,udy);
    put_2darray(array,index,5,udz);
    put_2darray(array,index,6,vdx);
    put_2darray(array,index,7,vdy);
    put_2darray(array,index,8,vdz);
    return(0);    
}

Get_Beam_Data_From_Arrary(array,index,x1,y1,z1,x2,y2,z2,x_dx,x_dy,x_dz,end1x,end1y,end1z,end2x,end2y,end2z) 
{
    x1 =    get_2darray(array,index,0);
    y1 =    get_2darray(array,index,1);
    z1 =    get_2darray(array,index,2);
    x2 =    get_2darray(array,index,3);
    y2 =    get_2darray(array,index,4);
    z2 =    get_2darray(array,index,5);
    x_dx =  get_2darray(array,index,6);
    x_dy =  get_2darray(array,index,7);
    x_dz =  get_2darray(array,index,8);
    end1x = get_2darray(array,index,9);
    end1y = get_2darray(array,index,10);
    end1z = get_2darray(array,index,11);
    end2x = get_2darray(array,index,12);
    end2y = get_2darray(array,index,13);
    end2z = get_2darray(array,index,14);
   	return(0);   
}
      	    
Get_Plate_Data_From_Array(array,index,lox,loy,loz,udx,udy,udz,vdx,vdy,vdz)
{
    lox = get_2darray(array,index,0);
    loy = get_2darray(array,index,1);
    loz = get_2darray(array,index,2);
    udx = get_2darray(array,index,3);
    udy = get_2darray(array,index,4);
    udz = get_2darray(array,index,5);
    vdx = get_2darray(array,index,6);
    vdy = get_2darray(array,index,7);
    vdz = get_2darray(array,index,8);
    return(0);    
}

Get_Beam_Position_Data_From_Array(array,index,x1,y1,z1,x2,y2,z2)
{
    x1=get_2darray(array,index,0);
    y1=get_2darray(array,index,1);
    z1=get_2darray(array,index,2);
    x2=get_2darray(array,index,3);
    y2=get_2darray(array,index,4);
    z2=get_2darray(array,index,5);    
    return(0);   
}

Put_Beam_Position_Data_To_Array(array,index,x1,y1,z1)
{
    put_2darray(array,index,0,x1);
    put_2darray(array,index,1,y1);
    put_2darray(array,index,2,z1);
    return(0);           
}

Put_Beam_Position_Data_To_Leg(array,index,x1,y1,z1,x2,y2,z2)
{
    put_2darray(array,index,0,x1);
    put_2darray(array,index,1,y1);
    put_2darray(array,index,2,z1);
    put_2darray(array,index,3,x2);
    put_2darray(array,index,4,y2);
    put_2darray(array,index,5,z2);
    return(0);           
}

Get_Beam_Position_Data(array,index,x,y,z)
{
    x=get_2darray(array,index,0);
    y=get_2darray(array,index,1);
    z=get_2darray(array,index,2);   
    return(0);   
}
       